// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<char,1> //
typedef struct ___insieme_type_1 { 
    char* data;
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<char,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
} __insieme_type_0;

// start code fragment :: Prototype for external function: clock ... type: (()->int<8>) //
long clock();
static long clock_wrap(void* _closure) { return clock(); }

// start code fragment :: vector_type_declaration of __insieme_type_5 <=> vector<real<4>,650> //
typedef struct ___insieme_type_5 { 
    float data[650];
} __insieme_type_5;

// A constructor initializing a vector of the type __insieme_type_5 uniformly
static inline __insieme_type_5 __insieme_type_5_init_uniform(float value) {
	__insieme_type_5 res;
	for (int i=0; i<650;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_4 <=> vector<vector<real<4>,650>,650> //
typedef struct ___insieme_type_4 { 
    __insieme_type_5 data[650];
} __insieme_type_4;

// A constructor initializing a vector of the type __insieme_type_4 uniformly
static inline __insieme_type_4 __insieme_type_4_init_uniform(__insieme_type_5 value) {
	__insieme_type_4 res;
	for (int i=0; i<650;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Prototype for external function: memset ... type: ((anyRef,int<4>,uint<8>)->anyRef) //
void* memset(void*, int, unsigned long);
static void* memset_wrap(void* _closure, void* var_39, int var_40, unsigned long var_41) { return memset(var_39, var_40, var_41); }

// start code fragment :: Prototype for external function: sin ... type: ((real<8>)->real<8>) //
double sin(double);
static double sin_wrap(void* _closure, double var_42) { return sin(var_42); }

// start code fragment :: Definition of init_func ... type: ((int<4>,int<4>)->real<8>) //
double init_func(int x, int y) { return (((double)(40))*sin(((double)(((16*((2*x)-1))*y))))); }
static double init_func_wrap(void* _closure, int x, int y) { return init_func(x, y); }

// start code fragment :: Prototype for external function: pow ... type: ((real<8>,real<8>)->real<8>) //
double pow(double, double);
static double pow_wrap(void* _closure, double var_43, double var_44) { return pow(var_43, var_44); }

// start code fragment :: Prototype for external function: memcpy ... type: ((anyRef,anyRef,uint<8>)->anyRef) //
void* memcpy(void*, void*, unsigned long);
static void* memcpy_wrap(void* _closure, void* var_45, void* var_46, unsigned long var_47) { return memcpy(var_45, var_46, var_47); }

// start code fragment :: Prototype for external function: sqrt ... type: ((real<8>)->real<8>) //
double sqrt(double);
static double sqrt_wrap(void* _closure, double var_48) { return sqrt(var_48); }

// start code fragment :: main function //
int main(int __argc, char** __argv) {
	
	// encapsulating arguments within Insieme Types ...
	int argc = __argc;
	__insieme_type_0 argv = (__insieme_type_0){alloca(sizeof(__insieme_type_1) * argc)};
	for(int i=0; i<argc; ++i) {
		argv.data[i] = (__insieme_type_1){__argv[i]};
	}
	
	// ---- begin of actual code body ----
	{
		long start_t = 0;
		long end_t = 0;
		double setup_time = 0.0;
		double elapsed_time = 0.0;
		((start_t) = clock());
		__insieme_type_4 u;
		__insieme_type_4 tmp;
		__insieme_type_4 f;
		__insieme_type_4 res;
		memset((void*)((float**)((*(&u)).data)), 0, ((unsigned long)((650*650))));
		memset((void*)((float**)((*(&f)).data)), 0, ((unsigned long)((650*650))));
		for(int var_17 = 0; var_17 < 650; var_17 += 1)  { for(int var_16 = 0; var_16 < 650; var_16 += 1)  { ((((((f).data[((unsigned int)(var_17))])).data[((unsigned int)(var_16))])) = ((float)(init_func(var_17, var_16)))); }; };
		double comm_time = ((double)(0));
		double comp_time = ((double)(0));
		double timer = ((double)(0));
		double resv = 0.0;
		double factor = pow((((double)(1))/((double)(650))), ((double)(2)));
		((end_t) = clock());
		((setup_time) = (((double)(((end_t)-(start_t))))/((double)(1000000l))));
		((start_t) = clock());
		for(int var_37 = 0; var_37 < 10; var_37 += 1) {
			for(int var_26 = 1; var_26 < (650-1); var_26 += 1)  { for(int var_25 = 1; var_25 < (650-1); var_25 += 1)  { ((((((tmp).data[((unsigned int)(var_26))])).data[((unsigned int)(var_25))])) = ((float)(((((double)(1))/((double)(4)))*(((double)(((((((((u).data[((unsigned int)((var_26-1)))])).data[((unsigned int)(var_25))]))+(((((u).data[((unsigned int)(var_26))])).data[((unsigned int)((var_25+1)))])))+(((((u).data[((unsigned int)(var_26))])).data[((unsigned int)((var_25-1)))])))+(((((u).data[((unsigned int)((var_26+1)))])).data[((unsigned int)(var_25))])))))-((factor)*((double)((((((f).data[((unsigned int)(var_26))])).data[((unsigned int)(var_25))])))))))))); }; };
			memcpy((void*)((float**)((*(&u)).data)), (void*)((float**)((*(&tmp)).data)), ((unsigned long)((650*650))));
			for(int var_30 = 1; var_30 < (650-1); var_30 += 1)  { for(int var_29 = 1; var_29 < (650-1); var_29 += 1)  { ((((((res).data[((unsigned int)(var_30))])).data[((unsigned int)(var_29))])) = ((((((((((f).data[((unsigned int)(var_30))])).data[((unsigned int)(var_29))]))-(((float)(4))*(((((u).data[((unsigned int)(var_30))])).data[((unsigned int)(var_29))]))))+(((((u).data[((unsigned int)((var_30-1)))])).data[((unsigned int)(var_29))])))+(((((u).data[((unsigned int)((var_30+1)))])).data[((unsigned int)(var_29))])))+(((((u).data[((unsigned int)(var_30))])).data[((unsigned int)((var_29-1)))])))+(((((u).data[((unsigned int)(var_30))])).data[((unsigned int)((var_29+1)))])))); }; };
			double norm = ((double)(0));
			for(int var_35 = 1; var_35 < (650-1); var_35 += 1)  { for(int var_34 = 1; var_34 < (650-1); var_34 += 1)  { ((norm) = ((norm)+pow(((double)((((((res).data[((unsigned int)(var_35))])).data[((unsigned int)(var_34))])))), ((double)(2))))); }; };
			((resv) = (sqrt((norm))/((double)((650-1)))));
		};
		((end_t) = clock());
		((elapsed_time) = (((double)(((end_t)-(start_t))))/((double)(1000000l))));
	}
	// ----  end of actual code body  ----
	
}

