import os, subprocess, shlex, sys

INSIEMEC='${CMAKE_BINARY_DIR}/code/driver/main'
CFLAGS = "--std=c99"
LDFLAGS = "-lm"
CC = "gcc"

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def run_cmd(cmd):
    pid = subprocess.Popen( shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    pid.wait()
    if pid.returncode == 0:
        return None;
    return pid.communicate()[1]

def check_for_error(ret):
    if ret is not None:
        sys.stderr.write(bcolors.FAIL + '@ [FAILED]' + bcolors.ENDC + '\n')
        sys.stderr.write(bcolors.FAIL + "@------------------ start cause --------------------\n" + bcolors.ENDC)
        sys.stderr.write(ret)
        sys.stderr.write(bcolors.FAIL + "@------------------- end cause ---------------------\n\n" + bcolors.ENDC)
        return True
    return False
    
def check_diff(ref, test):
    ret = run_cmd("diff {0} {1}".format(ref, test))
    return not check_for_error(ret)

def run_tests():
	failed_test = 0
	test_num = 0
	for (_,dirs,_) in os.walk("."):
	    for test_case_name in dirs:
	        # test cases whose directory name starts with a '#' are skipped
	        if test_case_name.startswith("#"):
	            continue # SKIP
	        
	        test_num += 1
	        print "#----------------------------------------"
	        print "# {0}: {1}".format(test_num, test_case_name)
	        
	        # name of the file contaning the reference IR for the current test
	        refIr   = test_case_name + '.ref.ir'
	        # name of the file containing the generated IR for the case test
	        testIr  = test_case_name + '.ir'
	        # name of the file containing the reference C output for the current test
	        refC    = test_case_name + '.ref.insieme.c'
	        # name of the file containing the generated C output for the current test
	        testC   = test_case_name + '.insieme.c'
	        
	        inputs = test_case_name + '.c'
	        if os.path.exists(test_case_name + '/inputs.data'):
	        		inputs = " ".join([x.strip() for x in open(test_case_name + '/inputs.data').read().split(',')])
	        		
	        os.chdir(test_case_name)
	        # RUN insieme to generate the IR dump and C output
	        ret = run_cmd( "{INSIEMEC} {INPUTS} --dump-ir={IR_DUMP} -o {C_DUMP}".format(
	        						**{'INSIEMEC': INSIEMEC, 'INPUTS': inputs, 'IR_DUMP': testIr, 'C_DUMP': testC}) 
	        					)
	        if check_for_error(ret):
	        	os.chdir("../")
	        	failed_test += 1
	        	continue
	        
	        print " * Comparing generated IR... "
	        if not check_diff(refIr, testIr):
					os.chdir("../")
					failed_test += 1
					continue
	        print " * -> " + bcolors.OKGREEN  +"Success." + bcolors.ENDC
	          
	        print " * Comparing generated C output... "
	        if not check_diff(refC, testC):
	            os.chdir("../")
	            failed_test += 1
	            continue
	        print " * -> " + bcolors.OKGREEN  +"Success." + bcolors.ENDC
	        
	        # file containing the output of the reference program
	        ref_out = "ref.out"
	        # file containing the output of the test program
	        test_out = "test.out"
	        
	        ret = run_cmd( "{CC} {CFLAGS} -o {OUTPUT} {INPUTS} {LDFLAGS}".format(
	        						**{'CC':CC, 'CFLAGS':CFLAGS, 'INPUTS':inputs, 'OUTPUT':'ref', 'LDFLAGS':LDFLAGS}) 
	       					)
	        os.system("./ref > {0}".format(ref_out))
	        
	        print " * Compiling generated C output... "
	        ret = run_cmd("{CC} {CFLAGS} -o {OUTPUT} {INPUTS} {LDFLAGS}".format(
	        						**{'CC':CC, 'CFLAGS':CFLAGS, 'INPUTS':testC, 'OUTPUT':'test', 'LDFLAGS':LDFLAGS})
	        					)
	        if check_for_error(ret):
					os.chdir("../")
					failed_test += 1
					continue
	        print " * -> " + bcolors.OKGREEN  +"Success." + bcolors.ENDC
	        
	        os.system("./test > {0}".format(test_out))
	        
	        print " * Checking generated program output... "
	        if not check_diff(ref_out, test_out):
	           	os.chdir("../")
	           	failed_test += 1
	           	continue
	        print " * -> " + bcolors.OKGREEN  +"Success." + bcolors.ENDC
	        
	        map(lambda x : os.remove(x), [testIr, testC, ref_out, test_out, 'ref', 'test'])
	        
	        print "@ " + bcolors.OKGREEN + "[SUCCESS]" + bcolors.ENDC
	        os.chdir("../")
	
	# return the number of executed test case and number of failed ones
	return (test_num, failed_test)

def main():
	os.chdir('${CMAKE_CURRENT_SOURCE_DIR}/test/')
	(executed, failed) = run_tests()
	print "###############################"
	print "#          Summary            #"
	print "#-----------------------------#"
	print "# Total number of tests: {0:4} #".format(executed)
	print "# -> SUCCEEDED: {0:13} #".format(executed - failed)
	print "# -> FAILED:    {0:13} #".format(failed)
	print "###############################"
	
	return  os._exit(failed);

if __name__ == "__main__":
    sys.exit(main())
       