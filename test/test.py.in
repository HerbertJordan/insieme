import os, subprocess, shlex, sys, shutil, time

INSIEMEC='${CMAKE_BINARY_DIR}/code/driver/main'
CFLAGS = "--std=c99 -I. -I${CMAKE_SOURCE_DIR}/code/simple_backend/include/insieme/simple_backend/runtime"
LDFLAGS_ORG = "-lm -lpthread"
LDFLAGS_RES = "-lm -lpthread -linsieme_simple_backend_runtime -L${CMAKE_BINARY_DIR}/code/simple_backend"
CC = "gcc"

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def run_cmd(cmd):
	start = time.time()
	pid = subprocess.Popen( shlex.split(cmd), stderr=subprocess.PIPE)
	pid.wait()
	elapsed = time.time() - start
	sys.stderr.write(" [{0:.4f} secs]\n".format(elapsed) )
	if pid.returncode == 0:
		# print pid.communicate()[1]
		return None;
	return pid.communicate()[1]

def check_for_error(test_case, ret):
    if ret is not None:
        sys.stderr.write(bcolors.FAIL + '@ {0}: [FAILED]'.format(test_case) + bcolors.ENDC + '\n')
        sys.stderr.write(bcolors.FAIL + "@------------------ start cause --------------------" + bcolors.ENDC + "\n")
        sys.stderr.write(ret)
        sys.stderr.write(bcolors.FAIL + "@------------------- end cause ---------------------" + bcolors.ENDC + "\n\n")
        return True
    return False
    
def check_diff(test_case_name, ref, test):
    ret = run_cmd("diff {0} {1}".format(ref, test))
    return not check_for_error(test_case_name, ret)

def run_test_case(test_case_name): 
	sys.stderr.write("#-----------------------------------------------------\n")
	sys.stderr.write("# {0}\n".format(test_case_name))

	# name of the file contaning the reference IR for the current test
	refIr   = test_case_name + '.ir.ref'
	# name of the file containing the generated IR for the case test
	testIr  = test_case_name + '.ir'
	# name of the file containing the reference C output for the current test
	refC    = test_case_name + '.insieme.c.ref'
	# name of the file containing the generated C output for the current test
	testC   = test_case_name + '.insieme.c'

	inputs = test_case_name + '.c'
	if os.path.exists(test_case_name + '/inputs.data'):
		inputs = " ".join([x.strip() for x in open(test_case_name + '/inputs.data').read().split(',')])

	insiemeFlags = ''
	if os.path.exists(test_case_name + '/insieme.flags'):
		insiemeFlags = " ".join([x.strip() for x in open(test_case_name + '/insieme.flags').read().split(',')])

	sys.stderr.write(" * Running Insieme Compiler...          ")	  		
	os.chdir(test_case_name)
	# RUN insieme to generate the IR dump and C output
	ret = run_cmd( "{INSIEMEC} {CFLAGS} {INPUTS} --dump-ir={IR_DUMP} -o {C_DUMP} {FLAGS}".format(
						**{'INSIEMEC': INSIEMEC, 'CFLAGS':CFLAGS, 'INPUTS': inputs, 'IR_DUMP': testIr, 'C_DUMP': testC, 'FLAGS':insiemeFlags}) 
					)
	if check_for_error(test_case_name, ret):
		os.chdir("../")
		return 1

	runTests = 0
	if not os.path.exists(refIr):
	  shutil.copyfile(testIr, refIr)
	  runTests = 1 # Reference is not there, we have to run the test to make sure the translation was correct
	  
	sys.stderr.write(" * -> " + bcolors.OKGREEN  +"Success." + bcolors.ENDC + "\n")

	sys.stderr.write(" * Comparing generated IR...            ")
	if not check_diff(test_case_name, refIr, testIr):
		os.chdir("../")
		return 1
	sys.stderr.write(" * -> " + bcolors.OKGREEN  +"Success." + bcolors.ENDC + "\n")

	if not os.path.exists(refC):
	  shutil.copyfile(testC, refC)
	  runTests = 1 # Reference is not there, we have to run the test to make sure the translation was correct
	  
	sys.stderr.write(" * Comparing generated C output...      ")
	if not check_diff(test_case_name, refC, testC):
		os.chdir("../")
		return 1
	sys.stderr.write(" * -> " + bcolors.OKGREEN  +"Success." + bcolors.ENDC + "\n")
	
	if runTests:
		ref_exec = test_case_name + '.ref'
		test_exec = test_case_name + '.test'
		
		# file containing the output of the reference program
		ref_out = "ref.out"
		# file containing the output of the test program
		test_out = "test.out"

		sys.stderr.write(" * Compiling C input...                 ")
		ret = run_cmd( "{CC} -O3 {CFLAGS} -o {OUTPUT} {INPUTS} {LDFLAGS}".format(
							**{'CC':CC, 'CFLAGS':CFLAGS, 'INPUTS':inputs, 'OUTPUT':ref_exec, 'LDFLAGS':LDFLAGS_ORG}) 
						)

		sys.stderr.write(" * Compiling generated C output...      ")
		ret = run_cmd( "{CC} -O3 {CFLAGS} -o {OUTPUT} {INPUTS} {LDFLAGS}".format(
							**{'CC':CC, 'CFLAGS':CFLAGS, 'INPUTS':testC, 'OUTPUT':test_exec, 'LDFLAGS':LDFLAGS_RES})
						)
		if check_for_error(test_case_name, ret):
			os.chdir("../")
			return 1
		sys.stderr.write(" * -> " + bcolors.OKGREEN  +"Success." + bcolors.ENDC + "\n")

		sys.stderr.write(" * Running input program...             ")
		start = time.time()
		os.system("./{0} > {1}".format(ref_exec, ref_out))
		sys.stderr.write(" [{0:.4f} secs]\n".format(time.time() - start))
		
		sys.stderr.write(" * Running output program...            ")
		ldPath = os.getenv("LD_LIBRARY_PATH", "");
		os.putenv("LD_LIBRARY_PATH", ldPath + ":${CMAKE_BINARY_DIR}/code/simple_backend");
		start = time.time()
		os.system("./{0} > {1}".format(test_exec, test_out))
		sys.stderr.write(" [{0:.4f} secs]\n".format(time.time() - start))
		os.putenv("LD_LIBRARY_PATH", ldPath);

		sys.stderr.write(" * Checking generated program output... ")
		if not check_diff(test_case_name, ref_out, test_out):
			os.chdir("../")
			return 1
		sys.stderr.write(" * -> " + bcolors.OKGREEN  + "Success." + bcolors.ENDC + "\n")

		# if the test is successful move the executable in the ../#bin directory for further benchmarking
		if os.path.exists("../#bin/" + ref_exec):
			os.remove("../#bin/" + ref_exec)
		shutil.move(ref_exec, "../#bin/")
		
		if os.path.exists("../#bin/" + test_exec):
			os.remove("../#bin/" + test_exec)
		shutil.move(test_exec, "../#bin/")

		map(lambda x : os.remove(x), [testIr, testC, ref_out, test_out])
	
	sys.stderr.write(bcolors.OKGREEN + "@ [SUCCESS]" + bcolors.ENDC + "\n")
	os.chdir("../")
	return 0

def main():
	os.chdir('${CMAKE_CURRENT_SOURCE_DIR}/test/')
	tests = []
	if len(sys.argv) > 1:
		# run the specified tests only
		tests = sys.argv[1:]
	elif os.path.exists('./test.cfg'):
		# read test cases from test.cfg file
		tests = [test_case for test_case in open('test.cfg').read().split('\n') if len(test_case) > 0 and not test_case.startswith('#')]
	else:
		tests = [x for x in os.listdir(".") if os.path.isdir(os.path.join('./', x)) and not x.startswith('#')]
		tests.sort() # sort the test cases by name
			
	failed = sum( map(lambda x: run_test_case(x), tests) )
	
	# print summary
	sys.stderr.write("###############################\n")
	sys.stderr.write("#          Summary            #\n")
	sys.stderr.write("#-----------------------------#\n")
	sys.stderr.write("# Total number of tests: {0:4} #\n".format( len(tests) ))
	sys.stderr.write("# -> SUCCEEDED: {0:13} #\n".format(len(tests) - failed))
	sys.stderr.write("# -> FAILED:    {0:13} #\n".format(failed))
	sys.stderr.write("###############################\n")
	
	return  os._exit(failed);

if __name__ == "__main__":
    sys.exit(main())
       
