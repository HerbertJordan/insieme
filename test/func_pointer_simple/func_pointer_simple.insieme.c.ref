// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: Definitions for function type: __insieme_funType_1 //
//
// -------------------- Begin of constructs for function type ((int<4>,int<4>)->int<4>)---------------------
// Base-struct of describing closures of type __insieme_funType_1 <-> ((int<4>,int<4>)->int<4>)
typedef struct ___insieme_funType_1 { 
    int(*call)(void*, int, int);
} __insieme_funType_1;

// Type safe function for invoking closures of type __insieme_funType_1
static inline int __insieme_funType_1_call(__insieme_funType_1* closure, int p1, int p2) { return closure->call(closure, p1,p2); }

// A constructor for closures wrapping pure functions of type ((int<4>,int<4>)->int<4>)
static inline __insieme_funType_1* __insieme_funType_1_ctr(__insieme_funType_1* target, int(*call)(void*, int, int)) {
	*target = (__insieme_funType_1){call};
	return target;
}
// ----------------------- end of constructs for function ((int<4>,int<4>)->int<4>)-----------------------

// start code fragment :: Definition of min ... type: ((int<4>,int<4>)->int<4>) //
int min(int a, int b) { return (((a<b))?(a):(b)); }
static int min_wrap(void* _closure, int a, int b) { return min(a, b); }

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	int a = 10;
	int b = 20;
	__insieme_funType_1* f = (__insieme_funType_1*)__insieme_funType_1_ctr((__insieme_funType_1*)alloca(sizeof(__insieme_funType_1)),&min_wrap);
	printf("Direct call:  min(%d,%d)=%d\n", (a), (b), min((a), (b)));
	printf("Pointer call:   f(%d,%d)=%d\n", (a), (b), __insieme_funType_1_call((f), (a), (b)));
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
