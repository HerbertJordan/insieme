// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v8, ref<array<ref<array<char,1>>,1>> v9){
        decl ref<int<4>> v10 =  var(10);
        decl ref<int<4>> v11 =  var(20);
        decl ref<(int<4>, int<4>) -> int<4>> v12 =  var(fun(int<4> v1, int<4> v2){
            return ite(v1<v2, bind(){fun(int<4> v20)return v20(v1)}, bind(){fun(int<4> v18)return v18(v2)});
        });
        printf(string.as.char.pointer("Direct call:  min(%d,%d)=%d\n"), varlist.pack((v10, v11, fun(int<4> v1, int<4> v2){
            return ite(v1<v2, bind(){fun(int<4> v5)return v5(v1)}, bind(){fun(int<4> v3)return v3(v2)});
        }(v10, v11))));
        printf(string.as.char.pointer("Pointer call:   f(%d,%d)=%d\n"), varlist.pack((v10, v11, v12(v10, v11))));
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v8, ref<array<ref<array<char,1>>,1>> v9){
        decl ref<int<4>> v10 = ( var(10));
        decl ref<int<4>> v11 = ( var(20));
        decl ref<(int<4>, int<4>) -> int<4>> v12 = ( var(fun(int<4> v1, int<4> v2){
            return ite((v1<v2), bind(){fun(int<4> v20)return v20(v1)}, bind(){fun(int<4> v18)return v18(v2)});
        }));
        printf(string.as.char.pointer("Direct call:  min(%d,%d)=%d\n"), varlist.pack((( *v10), ( *v11), fun(int<4> v1, int<4> v2){
            return ite((v1<v2), bind(){fun(int<4> v5)return v5(v1)}, bind(){fun(int<4> v3)return v3(v2)});
        }(( *v10), ( *v11)))));
        printf(string.as.char.pointer("Pointer call:   f(%d,%d)=%d\n"), varlist.pack((( *v10), ( *v11), ( *v12)(( *v10), ( *v11)))));
    }

