// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v2, ref<array<array<char,1>,1>> v3){
        decl ref<struct<a:vector<int<4>,10>>> v1 =  new(struct{a:=vector.init.uniform(0, 10)});
        fun(ref<struct<a:vector<int<4>,10>>> v4){
            for(decl int<4> v6 = 0 .. 10 : 1) {
                vector.ref.elem(composite.ref.elem(v4, a, type<vector<int<4>,10>>), v6) := v6;
            };
        }(v1);
        printf(string.as.char.pointer("sum=%d\n"), varlist.pack((fun(ref<struct<a:vector<int<4>,10>>> v8){
            decl ref<int<4>> v9 =  var(0);
            for(decl int<4> v11 = 0 .. 10 : 1) {
                v9 := v9+vector.ref.elem(composite.ref.elem(v8, a, type<vector<int<4>,10>>), v11);
            };
            return v9;
        }(v1))));
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v2, ref<array<array<char,1>,1>> v3){
        decl ref<struct<a:vector<int<4>,10>>> v1 = ( new(struct{a:=vector.init.uniform(0, 10)}));
        fun(ref<struct<a:vector<int<4>,10>>> v4){
            for(decl int<4> v6 = 0 .. 10 : 1) {
                (vector.ref.elem(composite.ref.elem(v4, a, type<vector<int<4>,10>>), CAST<uint<4>>(v6)) := v6);
            };
        }(v1);
        printf(string.as.char.pointer("sum=%d\n"), varlist.pack((fun(ref<struct<a:vector<int<4>,10>>> v8){
            decl ref<int<4>> v9 = ( var(0));
            for(decl int<4> v11 = 0 .. 10 : 1) {
                (v9 := (( *v9)+( *vector.ref.elem(composite.ref.elem(v8, a, type<vector<int<4>,10>>), CAST<uint<4>>(v11)))));
            };
            return ( *v9);
        }(v1))));
    }

