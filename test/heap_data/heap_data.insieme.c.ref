// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#define bool int
#define true 1
#define false 0
#define null 0
// --- Entry Point ---

// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    int(* a)[10];
    char(* b)[10];
};

// start code fragment :: Definitions for function type: __insieme_funType_type_0 //
// Abstract prototype for lambdas of type __insieme_funType_type_0
struct __insieme_funType_type_0 { 
    void(*fun)(void*);
    const size_t size;
};

// Type safe function for invoking lambdas of type __insieme_funType_type_0
void call__insieme_funType_type_0(struct __insieme_funType_type_0* lambda) { return lambda->fun(lambda); }

// start code fragment :: Definitions for function type: __insieme_funType_type_1 //
// Abstract prototype for lambdas of type __insieme_funType_type_1
struct __insieme_funType_type_1 { 
    void(*fun)(void*);
    const size_t size;
    struct __insieme_globals* p0;
};

// start code fragment :: Definition of init //
void init(void* _capture) {
	// --------- Captured Stuff - Begin -------------
	struct __insieme_globals* var_4 = ((struct __insieme_funType_type_1*)_capture)->p0;
	// --------- Captured Stuff -  End  -------------
	{
		for(int i = 0; i < 10; i += 1) {
			((((((((*var_4).a))[0]))[((unsigned int)((i)))])) = (i));
		};
	}
}


// start code fragment :: Prototype for external function: printf //
int printf(char*, ...);

// start code fragment :: Definitions for function type: __insieme_funType_type_2 //
// Abstract prototype for lambdas of type __insieme_funType_type_2
struct __insieme_funType_type_2 { 
    int(*fun)(void*);
    const size_t size;
};

// Type safe function for invoking lambdas of type __insieme_funType_type_2
int call__insieme_funType_type_2(struct __insieme_funType_type_2* lambda) { return lambda->fun(lambda); }

// start code fragment :: Definitions for function type: __insieme_funType_type_3 //
// Abstract prototype for lambdas of type __insieme_funType_type_3
struct __insieme_funType_type_3 { 
    int(*fun)(void*);
    const size_t size;
    struct __insieme_globals* p0;
};

// start code fragment :: Definition of sum //
int sum(void* _capture) {
	// --------- Captured Stuff - Begin -------------
	struct __insieme_globals* var_7 = ((struct __insieme_funType_type_3*)_capture)->p0;
	// --------- Captured Stuff -  End  -------------
	{
		int res = 0;
		for(int i = 0; i < 10; i += 1) {
			((res) = ((res)+(((((((*var_7).a))[0]))[((unsigned int)((i)))]))));
		};
		return (res);;
	}
}


// start code fragment :: Definition of main //
int main(int argc, char** argv) {
	{
		struct __insieme_globals var_1 = ((struct __insieme_globals){(calloc(sizeof(int[10]), 1)),
			(memcpy(malloc(sizeof(char[10])), &((char[10]){}), sizeof(char[10])))
		});
		((((var_1).b)) = argv);
		call__insieme_funType_type_0(((struct __insieme_funType_type_0*)(&((struct __insieme_funType_type_1){&init, 0, &var_1}))));
		printf("sum=%d\n", call__insieme_funType_type_2(((struct __insieme_funType_type_2*)(&((struct __insieme_funType_type_3){&sum, 0, &var_1})))));
	}
}

