// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: vector_type_declaration of __insieme_type_1 <=> vector<real<4>,1000> //
typedef struct ___insieme_type_1 { 
    float data[1000];
} __insieme_type_1;

// A constructor initializing a vector of the type __insieme_type_1 uniformly
static inline __insieme_type_1 __insieme_type_1_init_uniform(float value) {
	__insieme_type_1 res;
	for (int i=0; i<1000;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_0 <=> vector<vector<real<4>,1000>,1000> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1 data[1000];
} __insieme_type_0;

// A constructor initializing a vector of the type __insieme_type_0 uniformly
static inline __insieme_type_0 __insieme_type_0_init_uniform(__insieme_type_1 value) {
	__insieme_type_0 res;
	for (int i=0; i<1000;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    __insieme_type_0 A;
    __insieme_type_0 B;
    __insieme_type_0 C;
};

// start code fragment :: struct for job __insieme_job_3 //
struct __insieme_job_3 { 
	unsigned structSize;
	unsigned min, max;
	void (*fun)(isbr_JobArgs*);
	// ---- additional captured variables -----
	struct __insieme_globals* var_39;
};

// start code fragment :: Definitions for function type: __insieme_funType_4 //
//
// -------------------- Begin of constructs for function type (()->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_4 <-> (()->unit)
typedef struct ___insieme_funType_4 { 
    void(*call)(void*);
} __insieme_funType_4;

// Type safe function for invoking closures of type __insieme_funType_4
static inline void __insieme_funType_4_call(__insieme_funType_4* closure) {  closure->call(closure); }

// A constructor for closures wrapping pure functions of type (()->unit)
static inline __insieme_funType_4* __insieme_funType_4_ctr(__insieme_funType_4* target, void(*call)(void*)) {
	*target = (__insieme_funType_4){call};
	return target;
}
// ----------------------- end of constructs for function (()->unit)-----------------------

// start code fragment :: Definitions for function type: __insieme_funType_6 //
//
// -------------------- Begin of constructs for function type ((ref<struct<A:vector<vector<real<4>,1000>,1000>,B:vector<vector<real<4>,1000>,1000>,C:vector<vector<real<4>,1000>,1000>>>)->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_6 <-> ((ref<struct<A:vector<vector<real<4>,1000>,1000>,B:vector<vector<real<4>,1000>,1000>,C:vector<vector<real<4>,1000>,1000>>>)->unit)
typedef struct ___insieme_funType_6 { 
    void(*call)(void*, struct __insieme_globals*);
} __insieme_funType_6;

// Type safe function for invoking closures of type __insieme_funType_6
static inline void __insieme_funType_6_call(__insieme_funType_6* closure, struct __insieme_globals* p1) {  closure->call(closure, p1); }

// A constructor for closures wrapping pure functions of type ((ref<struct<A:vector<vector<real<4>,1000>,1000>,B:vector<vector<real<4>,1000>,1000>,C:vector<vector<real<4>,1000>,1000>>>)->unit)
static inline __insieme_funType_6* __insieme_funType_6_ctr(__insieme_funType_6* target, void(*call)(void*, struct __insieme_globals*)) {
	*target = (__insieme_funType_6){call};
	return target;
}
// ----------------------- end of constructs for function ((ref<struct<A:vector<vector<real<4>,1000>,1000>,B:vector<vector<real<4>,1000>,1000>,C:vector<vector<real<4>,1000>,1000>>>)->unit)-----------------------

// start code fragment :: Definition of __insieme_closure_5 ... type: (()->unit) //
// -- Begin - Closure Constructs ------------------------------------------------------------
// struct definition a closure of type (()->unit)
typedef struct ___insieme_closure_5 {
    void(*call)(void*);
    __insieme_funType_6* nested;
    struct __insieme_globals* c1;
} __insieme_closure_5;

static inline void __insieme_closure_5_bind(__insieme_closure_5* closure) {  closure->nested->call(closure->nested, closure->c1); }

static inline __insieme_closure_5* __insieme_closure_5_ctr(__insieme_closure_5* closure, __insieme_funType_6* nested, struct __insieme_globals* c1) {
    *closure = (__insieme_closure_5){&__insieme_closure_5_bind, nested, c1};
    return closure;
}
// -- End - Closure Constructs --------------------------------------------------------------

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_8_fun //
struct __insieme_pfor_body_8_fun_capture {
	struct __insieme_globals* var_25;
};

// start code fragment :: Definition of __insieme_supp_9 ... type: ((ref<struct<A:vector<vector<real<4>,1000>,1000>,B:vector<vector<real<4>,1000>,1000>,C:vector<vector<real<4>,1000>,1000>>>,int<4>)->unit) //
void __insieme_supp_9(struct __insieme_globals* var_29, int var_28) { for(int j = 0; j < 1000; j += 1)  { ((((((*(&((*var_29).A))).data[((unsigned int)(var_28))])).data[((unsigned int)((j)))])) = ((float)((var_28*(j))))); }; }
static void __insieme_supp_9_wrap(void* _closure, struct __insieme_globals* var_29, int var_28) { __insieme_supp_9(var_29, var_28); }

// start code fragment :: function for pfor-body __insieme_pfor_body_8_fun //
void __insieme_pfor_body_8_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	struct __insieme_globals* var_40 = ((struct __insieme_pfor_body_8_fun_capture*)(range.context))->var_25;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_9(var_40, __it);
	}
	
}

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_11_fun //
struct __insieme_pfor_body_11_fun_capture {
	struct __insieme_globals* var_25;
};

// start code fragment :: Definition of __insieme_supp_12 ... type: ((ref<struct<A:vector<vector<real<4>,1000>,1000>,B:vector<vector<real<4>,1000>,1000>,C:vector<vector<real<4>,1000>,1000>>>,int<4>)->unit) //
void __insieme_supp_12(struct __insieme_globals* var_33, int var_32) { for(int j = 0; j < 1000; j += 1)  { ((((((*(&((*var_33).B))).data[((unsigned int)(var_32))])).data[((unsigned int)((j)))])) = ((float)((((var_32==(j)))?(1):(0))))); }; }
static void __insieme_supp_12_wrap(void* _closure, struct __insieme_globals* var_33, int var_32) { __insieme_supp_12(var_33, var_32); }

// start code fragment :: function for pfor-body __insieme_pfor_body_11_fun //
void __insieme_pfor_body_11_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	struct __insieme_globals* var_42 = ((struct __insieme_pfor_body_11_fun_capture*)(range.context))->var_25;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_12(var_42, __it);
	}
	
}

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_13_fun //
struct __insieme_pfor_body_13_fun_capture {
	struct __insieme_globals* var_25;
};

// start code fragment :: Definition of __insieme_supp_14 ... type: ((ref<struct<A:vector<vector<real<4>,1000>,1000>,B:vector<vector<real<4>,1000>,1000>,C:vector<vector<real<4>,1000>,1000>>>,int<4>)->unit) //
void __insieme_supp_14(struct __insieme_globals* var_37, int var_36) { for(int j = 0; j < 1000; j += 1) {
	double sum = ((double)(0));
	for(int k = 0; k < 1000; k += 1)  { ((sum) = ((sum)+((double)(((((((*(&((*var_37).A))).data[((unsigned int)(var_36))])).data[((unsigned int)((k)))]))*(((((*(&((*var_37).B))).data[((unsigned int)((k)))])).data[((unsigned int)((j)))]))))))); };
	((((((*(&((*var_37).C))).data[((unsigned int)(var_36))])).data[((unsigned int)((j)))])) = ((float)((sum))));
}; }
static void __insieme_supp_14_wrap(void* _closure, struct __insieme_globals* var_37, int var_36) { __insieme_supp_14(var_37, var_36); }

// start code fragment :: function for pfor-body __insieme_pfor_body_13_fun //
void __insieme_pfor_body_13_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	struct __insieme_globals* var_44 = ((struct __insieme_pfor_body_13_fun_capture*)(range.context))->var_25;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_14(var_44, __it);
	}
	
}

// start code fragment :: Definition of __insieme_supp_7 ... type: ((ref<struct<A:vector<vector<real<4>,1000>,1000>,B:vector<vector<real<4>,1000>,1000>,C:vector<vector<real<4>,1000>,1000>>>)->unit) //
void __insieme_supp_7(struct __insieme_globals* var_25){
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_8_fun_capture){var_25})},&__insieme_pfor_body_8_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_11_fun_capture){var_25})},&__insieme_pfor_body_11_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_13_fun_capture){var_25})},&__insieme_pfor_body_13_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
}
static void __insieme_supp_7_wrap(void* _closure, struct __insieme_globals* var_25) { __insieme_supp_7(var_25); }

// start code fragment :: function for job __insieme_job_3 //
void fun__insieme_job_3(isbr_JobArgs* args) {
	// ----------- Unpacking local scope variables ----------
	// ---------- Unpacking auto-captured variables ---------
	struct __insieme_globals* var_39 = ((struct __insieme_job_3*)args)->var_39;
	// ------------------ Processing Guards -----------------
	// ------------------ Default processing -----------------
	__insieme_funType_4_call((__insieme_funType_4*)__insieme_closure_5_ctr((__insieme_closure_5*)alloca(sizeof(__insieme_closure_5)),(__insieme_funType_6*)__insieme_funType_6_ctr((__insieme_funType_6*)alloca(sizeof(__insieme_funType_6)),&__insieme_supp_7_wrap), var_39));
}

// start code fragment :: array type definition of __insieme_type_16 <=> array<char,1> //
typedef struct ___insieme_type_16 { 
    char* data;
} __insieme_type_16;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: vector_type_declaration of __insieme_type_18 <=> vector<char,3> //
typedef struct ___insieme_type_18 { 
    char data[3];
} __insieme_type_18;

// A constructor initializing a vector of the type __insieme_type_18 uniformly
static inline __insieme_type_18 __insieme_type_18_init_uniform(char value) {
	__insieme_type_18 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_19 <=> vector<char,4> //
typedef struct ___insieme_type_19 { 
    char data[4];
} __insieme_type_19;

// A constructor initializing a vector of the type __insieme_type_19 uniformly
static inline __insieme_type_19 __insieme_type_19_init_uniform(char value) {
	__insieme_type_19 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: main function //
int main() {
	{
		struct __insieme_globals* var_1 = malloc(sizeof(struct __insieme_globals));
		isbr_merge(isbr_parallel(memcpy(malloc(sizeof(struct __insieme_job_3)),&((struct __insieme_job_3){sizeof(struct __insieme_job_3),1,isbr_getMaxThreads(),&fun__insieme_job_3,var_1}),sizeof(struct __insieme_job_3))));
		int success = 1;
		for(int i = 0; i < 1000; i += 1) {
			for(int j = 0; j < (((1000<1000))?(1000):(1000)); j += 1)  { if(((((((*(&((*var_1).A))).data[((unsigned int)((i)))])).data[((unsigned int)((j)))]))!=(((((*(&((*var_1).C))).data[((unsigned int)((i)))])).data[((unsigned int)((j)))])))) { ((success) = 0); }; };
			for(int j = (((1000<1000))?(1000):(1000)); j < (((1000>1000))?(1000):(1000)); j += 1)  { if(((((((*(&((*var_1).C))).data[((unsigned int)((i)))])).data[((unsigned int)((j)))]))!=((float)(0)))) { ((success) = 0); }; };
		};
		printf(((char*)((*(&((__insieme_type_16){"Verification: %s\n"}))).data)), (((((success)!=0))?((((__insieme_type_16){(((__insieme_type_18){{'O', 'K', '\0'}})).data}))):((((__insieme_type_16){(((__insieme_type_19){{'E', 'R', 'R', '\0'}})).data}))))).data);
	}
}
