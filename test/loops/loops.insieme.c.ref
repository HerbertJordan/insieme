// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    int N;
    int i;
};

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Prototype for external function: ceil ... type: ((real<8>)->real<8>) //
double ceil(double);
static double ceil_wrap(void* _closure, double var_30) { return ceil(var_30); }

// start code fragment :: Definition of func ... type: ((int<4>)->int<4>) //
int func(int k){
	int var_3 = k;
	{
		{
			for(int var_5 = (var_3); var_5 < 10; var_5 += 1)  { printf("k=%d\n", var_5); };
			((var_3) = ((var_3)+(((int)(ceil((((double)((10-(var_3))))/((double)(1))))))*1)));
		};
		{
			for(int var_7 = (((int)(0))-10); var_7 < ((((int)(0))-0)+1); var_7 += 1)  { printf("k=%d\n", (((int)(0))-var_7)); };
			((var_3) = (10+(((int)(ceil((((double)((((((int)(0))-0)+1)-10)))/((double)(1))))))*1)));
		};
	};
}
static int func_wrap(void* _closure, int k) { return func(k); }

// start code fragment :: Definition of func2 ... type: ((ref<struct<N:int<4>,i:int<4>>>)->unit) //
void func2(struct __insieme_globals* var_9) { {
	for(int var_11 = (((int)(0))-10); var_11 < ((((int)(0))-0)+1); var_11 += 1)  { printf("k=%d\n", (((int)(0))-var_11)); };
	((*(&((*var_9).i))) = (10+(((int)(ceil((((double)((((((int)(0))-0)+1)-10)))/((double)(1))))))*1)));
}; }
static void func2_wrap(void* _closure, struct __insieme_globals* var_9) { func2(var_9); }

// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	struct __insieme_globals* var_1 = malloc(sizeof(struct __insieme_globals));
	((*(&((*var_1).N))) = 10);
	((*(&((*var_1).i))) = 0);
	int a = 10;
	for(int var_17 = 0; var_17 < (a); var_17 += 1)  { printf("idx=%d", var_17); };
	for(int var_19 = (((int)(0))-(a)); var_19 < ((((int)(0))-0)+1); var_19 += 1)  { printf("idx=%d", (((int)(0))-var_19)); };
	for(int var_21 = (((int)(0))-(*(&((*var_1).N)))); var_21 < (((int)(0))-0); var_21 += 1)  { printf("idx=%d", (((int)(0))-var_21)); };
	{
		int idx = (a);
		while(((*(&((*var_1).N)))>0)) {
			 { printf("idx=%d", (a)); };
			((*(&((*var_1).N)))--);
		};
	};
	{
		for(int var_24 = (((int)(0))-15); var_24 < ((((int)(0))-0)+1); var_24 += 3)  { printf("a=%d\n", (((int)(0))-var_24)); };
		((a) = (15+(((int)(ceil((((double)((((((int)(0))-0)+1)-15)))/((double)(3))))))*3)));
	};
	{
		for(int var_26 = 1; var_26 < 15; var_26 += 3)  { printf("a=%d\n", var_26); };
		((a) = (1+(((int)(ceil((((double)((15-1)))/((double)(3))))))*3)));
	};
	{
		((a) = 1);
		while((((a)<10)&&((a)>0))) {
			 { printf("a=%d\n", (a)); };
			((a) = ((a)+2));
		};
	};
	{
		((a) = 0);
		while(((a)!=0))  { printf("a=%d\n", (a)); };
	};
	printf("a=%d\n", (a));
	func((a));
	func2(var_1);
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
