// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<char,1> //
typedef struct ___insieme_type_1 { 
    char* data;
    unsigned size[1];
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<char,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
    unsigned size[1];
} __insieme_type_0;

// start code fragment :: Prototype for external function: strlen ... type: ((ref<array<char,1>>)->uint<8>) //
unsigned long strlen(char*);
static unsigned long strlen_wrap(void* _closure, __insieme_type_1* var_22) { return strlen(((char*)((*(var_22)).data))); }

// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    int N;
    int i;
};

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Prototype for external function: ceil ... type: ((real<8>)->real<8>) //
double ceil(double);
static double ceil_wrap(void* _closure, double var_23) { return ceil(var_23); }

// start code fragment :: Definition of func ... type: ((int<4>)->int<4>) //
int func(int k){
	int var_14 = k;
	{
		{
			for(int var_15 = (var_14); var_15 < 10; var_15 += 1)  { printf(((char*)((*(&((__insieme_type_1){"k=%d\n"}))).data)), (var_15)); };
			((var_14) = ((var_14)+(((int)(ceil((((double)((10-(var_14))))/((double)(1))))))*1)));
		};
		{
			for(int var_16 = (((int)(0))-10); var_16 < ((((int)(0))-0)+1); var_16 += 1)  { printf(((char*)((*(&((__insieme_type_1){"k=%d\n"}))).data)), (((int)(0))-(var_16))); };
			((var_14) = (10+(((int)(ceil((((double)((((((int)(0))-0)+1)-10)))/((double)(1))))))*1)));
		};
	};
}
static int func_wrap(void* _closure, int k) { return func(k); }

// start code fragment :: Definition of func2 ... type: ((ref<struct<N:int<4>,i:int<4>>>)->unit) //
void func2(struct __insieme_globals* var_18) { {
	for(int var_19 = (((int)(0))-10); var_19 < ((((int)(0))-0)+1); var_19 += 1)  { printf(((char*)((*(&((__insieme_type_1){"k=%d\n"}))).data)), (((int)(0))-(var_19))); };
	((*(&((*var_18).i))) = (10+(((int)(ceil((((double)((((((int)(0))-0)+1)-10)))/((double)(1))))))*1)));
}; }
static void func2_wrap(void* _closure, struct __insieme_globals* var_18) { func2(var_18); }

// start code fragment :: main function //
int main(int __argc, char** __argv) {
	
	// encapsulating arguments within Insieme Types ...
	int argc = __argc;
	__insieme_type_0 argv = (__insieme_type_0){alloca(sizeof(__insieme_type_1) * argc), {argc}};
	for(int i=0; i<argc; ++i) {
		argv.data[i] = (__insieme_type_1){__argv[i],{strlen(__argv[i])+1}};
	}
	
	// ---- begin of actual code body ----
	{
		struct __insieme_globals* var_1 = malloc(sizeof(struct __insieme_globals));
		((*(&((*var_1).N))) = 10);
		((*(&((*var_1).i))) = 0);
		int a = 10;
		for(int idx = 0; idx < (a); idx += 1)  { printf(((char*)((*(&((__insieme_type_1){"idx=%d"}))).data)), (idx)); };
		for(int idx = (((int)(0))-(a)); idx < ((((int)(0))-0)+1); idx += 1)  { printf(((char*)((*(&((__insieme_type_1){"idx=%d"}))).data)), (((int)(0))-(idx))); };
		for(int idx = (((int)(0))-(*(&((*var_1).N)))); idx < (((int)(0))-0); idx += 1)  { printf(((char*)((*(&((__insieme_type_1){"idx=%d"}))).data)), (((int)(0))-(idx))); };
		{
			int idx = a;
			while(((*(&((*var_1).N)))>0)) {
				 { printf(((char*)((*(&((__insieme_type_1){"idx=%d"}))).data)), (a)); };
				((*(&((*var_1).N)))--);
			};
		};
		{
			for(int var_9 = (((int)(0))-15); var_9 < ((((int)(0))-0)+1); var_9 += 3)  { printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), (((int)(0))-(var_9))); };
			((a) = (15+(((int)(ceil((((double)((((((int)(0))-0)+1)-15)))/((double)(3))))))*3)));
		};
		{
			for(int var_10 = 1; var_10 < 15; var_10 += 3)  { printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), (var_10)); };
			((a) = (1+(((int)(ceil((((double)((15-1)))/((double)(3))))))*3)));
		};
		{
			((a) = 1);
			while((((a)<10)&&((a)>0))) {
				 { printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), (a)); };
				((a) = ((a)+2));
			};
		};
		{
			((a) = 0);
			while(((a)!=0))  { printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), (a)); };
		};
		printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), (a));
		func((a));
		func2(var_1);
	}
	// ----  end of actual code body  ----
	
}

