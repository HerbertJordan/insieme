// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<char,1> //
typedef struct ___insieme_type_1 { 
    char* data;
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<char,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
} __insieme_type_0;

// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    int N;
    int i;
};

// start code fragment :: global data //
struct __insieme_globals __GLOBAL__;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Prototype for external function: ceil ... type: ((real<8>)->real<8>) //
double ceil(double);
static double ceil_wrap(void* _closure, double var_30) { return ceil(var_30); }

// start code fragment :: Definition of func ... type: ((int<4>)->int<4>) //
int func(int k){
	int var_19 = k;
	{
		{
			for(int var_21 = (var_19); var_21 < 10; var_21 += 1)  { printf(((char*)((*(&((__insieme_type_1){"k=%d\n"}))).data)), var_21); };
			((var_19) = ((var_19)+(((int)(ceil((((double)((10-(var_19))))/((double)(1))))))*1)));
		};
		{
			for(int var_23 = (((int)(0))-10); var_23 < ((((int)(0))-0)+1); var_23 += 1)  { printf(((char*)((*(&((__insieme_type_1){"k=%d\n"}))).data)), (((int)(0))-var_23)); };
			((var_19) = (10+(((int)(ceil((((double)((((((int)(0))-0)+1)-10)))/((double)(1))))))*1)));
		};
	};
}
static int func_wrap(void* _closure, int k) { return func(k); }

// start code fragment :: Definition of func2 ... type: (()->unit) //
void func2() { {
	for(int var_27 = (((int)(0))-10); var_27 < ((((int)(0))-0)+1); var_27 += 1)  { printf(((char*)((*(&((__insieme_type_1){"k=%d\n"}))).data)), (((int)(0))-var_27)); };
	((*(&((__GLOBAL__).i))) = (10+(((int)(ceil((((double)((((((int)(0))-0)+1)-10)))/((double)(1))))))*1)));
}; }
static void func2_wrap(void* _closure) { func2(); }

// start code fragment :: main function //
int main(int __argc, char** __argv) {
	
	// encapsulating arguments within Insieme Types ...
	int argc = __argc;
	__insieme_type_0 argv = (__insieme_type_0){alloca(sizeof(__insieme_type_1) * argc)};
	for(int i=0; i<argc; ++i) {
		argv.data[i] = (__insieme_type_1){__argv[i]};
	}
	
	// ---- begin of actual code body ----
	{
		;
		((*(&((__GLOBAL__).N))) = 10);
		((*(&((__GLOBAL__).i))) = 0);
		int a = 10;
		for(int var_6 = 0; var_6 < (a); var_6 += 1)  { printf(((char*)((*(&((__insieme_type_1){"idx=%d"}))).data)), var_6); };
		for(int var_8 = (((int)(0))-(a)); var_8 < ((((int)(0))-0)+1); var_8 += 1)  { printf(((char*)((*(&((__insieme_type_1){"idx=%d"}))).data)), (((int)(0))-var_8)); };
		for(int var_10 = (((int)(0))-(*(&((__GLOBAL__).N)))); var_10 < (((int)(0))-0); var_10 += 1)  { printf(((char*)((*(&((__insieme_type_1){"idx=%d"}))).data)), (((int)(0))-var_10)); };
		{
			int idx = a;
			while(((*(&((__GLOBAL__).N)))>0)) {
				 { printf(((char*)((*(&((__insieme_type_1){"idx=%d"}))).data)), (a)); };
				((*(&((__GLOBAL__).N)))--);
			};
		};
		{
			for(int var_13 = (((int)(0))-15); var_13 < ((((int)(0))-0)+1); var_13 += 3)  { printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), (((int)(0))-var_13)); };
			((a) = (15+(((int)(ceil((((double)((((((int)(0))-0)+1)-15)))/((double)(3))))))*3)));
		};
		{
			for(int var_15 = 1; var_15 < 15; var_15 += 3)  { printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), var_15); };
			((a) = (1+(((int)(ceil((((double)((15-1)))/((double)(3))))))*3)));
		};
		{
			((a) = 1);
			while((((a)<10)&&((a)>0))) {
				 { printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), (a)); };
				((a) = ((a)+2));
			};
		};
		{
			((a) = 0);
			while(((a)!=0))  { printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), (a)); };
		};
		printf(((char*)((*(&((__insieme_type_1){"a=%d\n"}))).data)), (a));
		func((a));
		func2();
	}
	// ----  end of actual code body  ----
	
}

