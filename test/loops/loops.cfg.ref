digraph G {
0[shape=diamond,label="ENTRY"];
1[shape=diamond,label="EXIT"];
2[shape=diamond,label="ENTRY"];
3[shape=diamond,label="EXIT"];
4[shape=box,label="[B4]\l0: ref.assign(..., ...)\l"];
5[shape=box,label="[B5]\l"];
6[shape=box,label="[B6]\l0: composite.ref.elem(v9, i, type<int<4>>)\l"];
7[shape=box,label="[B7]\l0: int.add(10, ...)\l"];
8[shape=box,label="[B8]\l0: int.mul(..., 1)\l"];
9[shape=box,label="[B9]\l0: CAST<int<4>>(...)\l"];
10[shape=box,label="[B10]\l0: ceil(...)\l"];
11[shape=box,label="[B11]\l0: real.div(..., ...)\l"];
12[shape=box,label="[B12]\l0: CAST<real<8>>(...)\l"];
13[shape=box,label="[B13]\l0: int.sub(..., 10)\l"];
14[shape=box,label="[B14]\l0: int.add(..., 1)\l"];
15[shape=box,label="[B15]\l0: int.sub(..., 0)\l"];
16[shape=box,label="[B16]\l0: CAST<int<4>>\l"];
17[shape=box,label="[B17]\l0: CAST<real<8>>\l"];
18[shape=box,label="[B18]\l0: ((CAST<int<4>>(0)-0)+1) <CTRL>\lT: FOR( ... ; v11 < 0-0+1; ...)\l"];
19[shape=box,label="[B19]\l0: int.add(..., 1)\l"];
21[shape=box,label="[B21]\l0: int.sub(..., 0)\l"];
22[shape=box,label="[B22]\l0: CAST<int<4>>\l"];
23[shape=box,label="[B23]\l0: v11 += 1 <LOOP_INC>\l"];
24[shape=box,label="[B24]\l0: printf(..., ...)\l"];
25[shape=box,label="[B25]\l"];
26[shape=box,label="[B26]\l0: string.as.char.pointer(\"k=%d\n\")\l"];
27[shape=box,label="[B27]\l0: varlist.pack(((CAST<int<4>>(0)-v11)))\l"];
28[shape=box,label="[B28]\l0: decl int<4> v11 = (CAST<int<4>>(0)-10) <LOOP_INIT>\l"];
29[shape=box,label="CALL"];
30[shape=box,label="RET"];
32[shape=diamond,label="ENTRY"];
33[shape=diamond,label="EXIT"];
34[shape=box,label="[B34]\l0: ref.assign(v3, ...)\l"];
35[shape=box,label="[B35]\l"];
36[shape=box,label="[B36]\l0: int.add(10, ...)\l"];
37[shape=box,label="[B37]\l0: int.mul(..., 1)\l"];
38[shape=box,label="[B38]\l0: CAST<int<4>>(...)\l"];
39[shape=box,label="[B39]\l0: ceil(...)\l"];
40[shape=box,label="[B40]\l0: real.div(..., ...)\l"];
41[shape=box,label="[B41]\l0: CAST<real<8>>(...)\l"];
42[shape=box,label="[B42]\l0: int.sub(..., 10)\l"];
43[shape=box,label="[B43]\l0: int.add(..., 1)\l"];
44[shape=box,label="[B44]\l0: int.sub(..., 0)\l"];
45[shape=box,label="[B45]\l0: CAST<int<4>>\l"];
46[shape=box,label="[B46]\l0: CAST<real<8>>\l"];
47[shape=box,label="[B47]\l0: ((CAST<int<4>>(0)-0)+1) <CTRL>\lT: FOR( ... ; v7 < 0-0+1; ...)\l"];
48[shape=box,label="[B48]\l0: int.add(..., 1)\l"];
50[shape=box,label="[B50]\l0: int.sub(..., 0)\l"];
51[shape=box,label="[B51]\l0: CAST<int<4>>\l"];
52[shape=box,label="[B52]\l0: v7 += 1 <LOOP_INC>\l"];
53[shape=box,label="[B53]\l0: printf(..., ...)\l"];
54[shape=box,label="[B54]\l"];
55[shape=box,label="[B55]\l0: string.as.char.pointer(\"k=%d\n\")\l"];
56[shape=box,label="[B56]\l0: varlist.pack(((CAST<int<4>>(0)-v7)))\l"];
57[shape=box,label="[B57]\l0: decl int<4> v7 = (CAST<int<4>>(0)-10) <LOOP_INIT>\l"];
58[shape=box,label="[B58]\l0: ref.assign(v3, ...)\l"];
59[shape=box,label="[B59]\l"];
60[shape=box,label="[B60]\l0: int.add(..., ...)\l"];
61[shape=box,label="[B61]\l0: ref.deref(v3)\l"];
62[shape=box,label="[B62]\l0: int.mul(..., 1)\l"];
63[shape=box,label="[B63]\l0: CAST<int<4>>(...)\l"];
64[shape=box,label="[B64]\l0: ceil(...)\l"];
65[shape=box,label="[B65]\l0: real.div(..., ...)\l"];
66[shape=box,label="[B66]\l0: CAST<real<8>>(...)\l"];
67[shape=box,label="[B67]\l0: int.sub(10, ...)\l"];
68[shape=box,label="[B68]\l0: ref.deref(v3)\l"];
69[shape=box,label="[B69]\l0: CAST<real<8>>\l"];
70[shape=box,label="[B70]\l0: 10 <CTRL>\lT: FOR( ... ; v5 < 10; ...)\l"];
71[shape=box,label="[B71]\l0: v5 += 1 <LOOP_INC>\l"];
72[shape=box,label="[B72]\l0: printf(..., ...)\l"];
73[shape=box,label="[B73]\l"];
74[shape=box,label="[B74]\l0: string.as.char.pointer(\"k=%d\n\")\l"];
75[shape=box,label="[B75]\l0: varlist.pack((v5))\l"];
76[shape=box,label="[B76]\l0: decl int<4> v5 = ( *v3) <LOOP_INIT>\l"];
77[shape=box,label="[B77]\l0: decl v3 = ...\l"];
78[shape=box,label="[B78]\l0: ref.var(v2)\l"];
80[shape=box,label="CALL"];
81[shape=box,label="RET"];
83[shape=box,label="[B83]\l0: ref.deref(v15)\l"];
84[shape=box,label="[B84]\l0: printf(..., ...)\l"];
85[shape=box,label="[B85]\l"];
86[shape=box,label="[B86]\l0: string.as.char.pointer(\"a=%d\n\")\l"];
87[shape=box,label="[B87]\l0: varlist.pack((( *v15)))\l"];
88[shape=box,label="[B88]\l0: int.ne(( *v15), 0)\lT: WHILE(...)\l"];
89[shape=box,label="[B89]\l0: printf(..., ...)\l"];
90[shape=box,label="[B90]\l"];
91[shape=box,label="[B91]\l0: string.as.char.pointer(\"a=%d\n\")\l"];
92[shape=box,label="[B92]\l0: varlist.pack((( *v15)))\l"];
94[shape=box,label="[B94]\l0: ref.deref(v15)\l"];
95[shape=box,label="[B95]\l0: ref.assign(v15, 0)\l"];
97[shape=box,label="[B97]\l0: bool.and((( *v15)<10), bind(){fun{...}(v15)})\lT: WHILE(...)\l"];
98[shape=box,label="[B98]\l0: ref.assign(v15, ...)\l"];
100[shape=box,label="[B100]\l0: int.add(..., 2)\l"];
101[shape=box,label="[B101]\l0: ref.deref(v15)\l"];
102[shape=box,label="[B102]\l0: printf(..., ...)\l"];
103[shape=box,label="[B103]\l"];
104[shape=box,label="[B104]\l0: string.as.char.pointer(\"a=%d\n\")\l"];
105[shape=box,label="[B105]\l0: varlist.pack((( *v15)))\l"];
107[shape=box,label="[B107]\l0: int.lt(..., 10)\l"];
108[shape=box,label="[B108]\l0: ref.deref(v15)\l"];
109[shape=box,label="[B109]\l0: ref.assign(v15, 1)\l"];
111[shape=box,label="[B111]\l0: ref.assign(v15, ...)\l"];
112[shape=box,label="[B112]\l"];
113[shape=box,label="[B113]\l0: int.add(1, ...)\l"];
114[shape=box,label="[B114]\l0: int.mul(..., 3)\l"];
115[shape=box,label="[B115]\l0: CAST<int<4>>(...)\l"];
116[shape=box,label="[B116]\l0: ceil(...)\l"];
117[shape=box,label="[B117]\l0: real.div(..., ...)\l"];
118[shape=box,label="[B118]\l0: CAST<real<8>>(...)\l"];
119[shape=box,label="[B119]\l0: int.sub(15, 1)\l"];
120[shape=box,label="[B120]\l0: CAST<real<8>>\l"];
121[shape=box,label="[B121]\l0: 15 <CTRL>\lT: FOR( ... ; v26 < 15; ...)\l"];
122[shape=box,label="[B122]\l0: v26 += 3 <LOOP_INC>\l"];
123[shape=box,label="[B123]\l0: printf(..., ...)\l"];
124[shape=box,label="[B124]\l"];
125[shape=box,label="[B125]\l0: string.as.char.pointer(\"a=%d\n\")\l"];
126[shape=box,label="[B126]\l0: varlist.pack((v26))\l"];
127[shape=box,label="[B127]\l0: decl int<4> v26 = 1 <LOOP_INIT>\l"];
128[shape=box,label="[B128]\l0: ref.assign(v15, ...)\l"];
129[shape=box,label="[B129]\l"];
130[shape=box,label="[B130]\l0: int.add(15, ...)\l"];
131[shape=box,label="[B131]\l0: int.mul(..., 3)\l"];
132[shape=box,label="[B132]\l0: CAST<int<4>>(...)\l"];
133[shape=box,label="[B133]\l0: ceil(...)\l"];
134[shape=box,label="[B134]\l0: real.div(..., ...)\l"];
135[shape=box,label="[B135]\l0: CAST<real<8>>(...)\l"];
136[shape=box,label="[B136]\l0: int.sub(..., 15)\l"];
137[shape=box,label="[B137]\l0: int.add(..., 1)\l"];
138[shape=box,label="[B138]\l0: int.sub(..., 0)\l"];
139[shape=box,label="[B139]\l0: CAST<int<4>>\l"];
140[shape=box,label="[B140]\l0: CAST<real<8>>\l"];
141[shape=box,label="[B141]\l0: ((CAST<int<4>>(0)-0)+1) <CTRL>\lT: FOR( ... ; v24 < 0-0+1; ...)\l"];
142[shape=box,label="[B142]\l0: int.add(..., 1)\l"];
144[shape=box,label="[B144]\l0: int.sub(..., 0)\l"];
145[shape=box,label="[B145]\l0: CAST<int<4>>\l"];
146[shape=box,label="[B146]\l0: v24 += 3 <LOOP_INC>\l"];
147[shape=box,label="[B147]\l0: printf(..., ...)\l"];
148[shape=box,label="[B148]\l"];
149[shape=box,label="[B149]\l0: string.as.char.pointer(\"a=%d\n\")\l"];
150[shape=box,label="[B150]\l0: varlist.pack(((CAST<int<4>>(0)-v24)))\l"];
151[shape=box,label="[B151]\l0: decl int<4> v24 = (CAST<int<4>>(0)-15) <LOOP_INIT>\l"];
152[shape=box,label="[B152]\l0: int.gt(( *composite.ref.elem(v1, N, type<int<4>>)), 0)\lT: WHILE(...)\l"];
153[shape=box,label="[B153]\l0: int.postDec(...)\l"];
155[shape=box,label="[B155]\l0: composite.ref.elem(v1, N, type<int<4>>)\l"];
156[shape=box,label="[B156]\l0: printf(..., ...)\l"];
157[shape=box,label="[B157]\l"];
158[shape=box,label="[B158]\l0: string.as.char.pointer(\"idx=%d\")\l"];
159[shape=box,label="[B159]\l0: varlist.pack((( *v15)))\l"];
161[shape=box,label="[B161]\l0: ref.deref(...)\l"];
162[shape=box,label="[B162]\l0: composite.ref.elem(v1, N, type<int<4>>)\l"];
163[shape=box,label="[B163]\l0: decl v22 = ...\l"];
164[shape=box,label="[B164]\l0: ref.var(...)\l"];
166[shape=box,label="[B166]\l0: ref.deref(v15)\l"];
167[shape=box,label="[B167]\l0: (CAST<int<4>>(0)-0) <CTRL>\lT: FOR( ... ; v21 < 0-0; ...)\l"];
168[shape=box,label="[B168]\l0: int.sub(..., 0)\l"];
170[shape=box,label="[B170]\l0: CAST<int<4>>\l"];
171[shape=box,label="[B171]\l0: v21 += 1 <LOOP_INC>\l"];
172[shape=box,label="[B172]\l0: printf(..., ...)\l"];
173[shape=box,label="[B173]\l"];
174[shape=box,label="[B174]\l0: string.as.char.pointer(\"idx=%d\")\l"];
175[shape=box,label="[B175]\l0: varlist.pack(((CAST<int<4>>(0)-v21)))\l"];
176[shape=box,label="[B176]\l0: decl int<4> v21 = (CAST<int<4>>(0)-( *composite.ref.elem(v1, N, type<int<4>>))) <LOOP_INIT>\l"];
177[shape=box,label="[B177]\l0: ((CAST<int<4>>(0)-0)+1) <CTRL>\lT: FOR( ... ; v19 < 0-0+1; ...)\l"];
178[shape=box,label="[B178]\l0: int.add(..., 1)\l"];
180[shape=box,label="[B180]\l0: int.sub(..., 0)\l"];
181[shape=box,label="[B181]\l0: CAST<int<4>>\l"];
182[shape=box,label="[B182]\l0: v19 += 1 <LOOP_INC>\l"];
183[shape=box,label="[B183]\l0: printf(..., ...)\l"];
184[shape=box,label="[B184]\l"];
185[shape=box,label="[B185]\l0: string.as.char.pointer(\"idx=%d\")\l"];
186[shape=box,label="[B186]\l0: varlist.pack(((CAST<int<4>>(0)-v19)))\l"];
187[shape=box,label="[B187]\l0: decl int<4> v19 = (CAST<int<4>>(0)-( *v15)) <LOOP_INIT>\l"];
188[shape=box,label="[B188]\l0: ( *v15) <CTRL>\lT: FOR( ... ; v17 <  *v15; ...)\l"];
189[shape=box,label="[B189]\l0: ref.deref(v15)\l"];
191[shape=box,label="[B191]\l0: v17 += 1 <LOOP_INC>\l"];
192[shape=box,label="[B192]\l0: printf(..., ...)\l"];
193[shape=box,label="[B193]\l"];
194[shape=box,label="[B194]\l0: string.as.char.pointer(\"idx=%d\")\l"];
195[shape=box,label="[B195]\l0: varlist.pack((v17))\l"];
196[shape=box,label="[B196]\l0: decl int<4> v17 = 0 <LOOP_INIT>\l"];
197[shape=box,label="[B197]\l0: decl v15 = ...\l"];
198[shape=box,label="[B198]\l0: ref.var(10)\l"];
200[shape=box,label="[B200]\l0: decl v1 = ...\l"];
201[shape=box,label="[B201]\l0: ref.new(struct{N:=10, i:=0})\l"];
4->3 [label=""];
6->4 [label="0"];
5->6 [label=""];
7->4 [label="1"];
8->7 [label="1"];
9->8 [label="0"];
10->9 [label="0"];
11->10 [label="0"];
12->11 [label="0"];
13->12 [label="0"];
14->13 [label="0"];
15->14 [label="0"];
16->15 [label="0"];
5->16 [label=""];
17->11 [label="1"];
5->17 [label=""];
19->18 [label=""];
21->19 [label="0"];
22->21 [label="0"];
23->22 [label=""];
24->23 [label=""];
26->24 [label="0"];
25->26 [label=""];
27->24 [label="1"];
25->27 [label=""];
18->25 [label="true"];
18->5 [label="false"];
28->22 [label=""];
2->28 [label=""];
29->2 [label=""];
3->30 [label=""];
30->1 [label=""];
34->33 [label=""];
36->34 [label="1"];
37->36 [label="1"];
38->37 [label="0"];
39->38 [label="0"];
40->39 [label="0"];
41->40 [label="0"];
42->41 [label="0"];
43->42 [label="0"];
44->43 [label="0"];
45->44 [label="0"];
35->45 [label=""];
46->40 [label="1"];
35->46 [label=""];
48->47 [label=""];
50->48 [label="0"];
51->50 [label="0"];
52->51 [label=""];
53->52 [label=""];
55->53 [label="0"];
54->55 [label=""];
56->53 [label="1"];
54->56 [label=""];
47->54 [label="true"];
47->35 [label="false"];
57->51 [label=""];
58->57 [label=""];
60->58 [label="1"];
61->60 [label="0"];
59->61 [label=""];
62->60 [label="1"];
63->62 [label="0"];
64->63 [label="0"];
65->64 [label="0"];
66->65 [label="0"];
67->66 [label="0"];
68->67 [label="1"];
59->68 [label=""];
69->65 [label="1"];
59->69 [label=""];
71->70 [label=""];
72->71 [label=""];
74->72 [label="0"];
73->74 [label=""];
75->72 [label="1"];
73->75 [label=""];
70->73 [label="true"];
70->59 [label="false"];
76->70 [label=""];
77->76 [label=""];
78->77 [label=""];
32->78 [label=""];
80->32 [label=""];
33->81 [label=""];
81->29 [label=""];
83->80 [label="0"];
84->83 [label=""];
86->84 [label="0"];
85->86 [label=""];
87->84 [label="1"];
85->87 [label=""];
89->88 [label=""];
91->89 [label="0"];
90->91 [label=""];
92->89 [label="1"];
90->92 [label=""];
88->90 [label="true"];
88->85 [label="false"];
94->88 [label="0"];
95->94 [label=""];
98->97 [label=""];
100->98 [label="1"];
101->100 [label="0"];
102->101 [label=""];
104->102 [label="0"];
103->104 [label=""];
105->102 [label="1"];
103->105 [label=""];
97->103 [label="true"];
97->95 [label="false"];
107->97 [label="0"];
108->107 [label="0"];
109->108 [label=""];
111->109 [label=""];
113->111 [label="1"];
114->113 [label="1"];
115->114 [label="0"];
116->115 [label="0"];
117->116 [label="0"];
118->117 [label="0"];
119->118 [label="0"];
112->119 [label=""];
120->117 [label="1"];
112->120 [label=""];
122->121 [label=""];
123->122 [label=""];
125->123 [label="0"];
124->125 [label=""];
126->123 [label="1"];
124->126 [label=""];
121->124 [label="true"];
121->112 [label="false"];
127->121 [label=""];
128->127 [label=""];
130->128 [label="1"];
131->130 [label="1"];
132->131 [label="0"];
133->132 [label="0"];
134->133 [label="0"];
135->134 [label="0"];
136->135 [label="0"];
137->136 [label="0"];
138->137 [label="0"];
139->138 [label="0"];
129->139 [label=""];
140->134 [label="1"];
129->140 [label=""];
142->141 [label=""];
144->142 [label="0"];
145->144 [label="0"];
146->145 [label=""];
147->146 [label=""];
149->147 [label="0"];
148->149 [label=""];
150->147 [label="1"];
148->150 [label=""];
141->148 [label="true"];
141->129 [label="false"];
151->145 [label=""];
153->152 [label=""];
155->153 [label="0"];
156->155 [label=""];
158->156 [label="0"];
157->158 [label=""];
159->156 [label="1"];
157->159 [label=""];
152->157 [label="true"];
152->151 [label="false"];
161->152 [label="0"];
162->161 [label="0"];
163->162 [label=""];
164->163 [label=""];
166->164 [label="0"];
168->167 [label=""];
170->168 [label="0"];
171->170 [label=""];
172->171 [label=""];
174->172 [label="0"];
173->174 [label=""];
175->172 [label="1"];
173->175 [label=""];
167->173 [label="true"];
167->166 [label="false"];
176->170 [label=""];
178->177 [label=""];
180->178 [label="0"];
181->180 [label="0"];
182->181 [label=""];
183->182 [label=""];
185->183 [label="0"];
184->185 [label=""];
186->183 [label="1"];
184->186 [label=""];
177->184 [label="true"];
177->176 [label="false"];
187->181 [label=""];
189->188 [label=""];
191->189 [label=""];
192->191 [label=""];
194->192 [label="0"];
193->194 [label=""];
195->192 [label="1"];
193->195 [label=""];
188->193 [label="true"];
188->187 [label="false"];
196->189 [label=""];
197->196 [label=""];
198->197 [label=""];
200->198 [label=""];
201->200 [label=""];
0->201 [label=""];
}
