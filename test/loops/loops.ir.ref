// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v2, ref<array<array<char,1>,1>> v3){
        decl ref<struct<N:int<4>,i:int<4>>> v1 =  new(struct{N:=10, i:=0});
        decl ref<int<4>> v4 =  var(10);
        for(decl int<4> v6 = 0 .. v4 : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((v6)));
        };
        for(decl int<4> v8 = 0-v4 .. 0-0+1 : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((0-v8)));
        };
        for(decl int<4> v10 = 0-composite.ref.elem(v1, N, type<int<4>>) .. 0-0 : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((0-v10)));
        };
        {
            decl ref<int<4>> v11 = v4;
            while(composite.ref.elem(v1, N, type<int<4>>)>0) {
                {
                    printf(string.as.char.pointer("idx=%d"), varlist.pack((v4)));
                };
                int.postDec(composite.ref.elem(v1, N, type<int<4>>));
            };
        };
        {
            for(decl int<4> v13 = 0-15 .. 0-0+1 : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((0-v13)));
            };
            v4 := 15+ceil(0-0+1-15/3)*3;
        };
        {
            for(decl int<4> v15 = 1 .. 15 : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((v15)));
            };
            v4 := 1+ceil(15-1/3)*3;
        };
        {
            v4 := 1;
            while(v4<10&&bind(){fun(ref<int<4>> v16)return v16>0(v4)}) {
                {
                    printf(string.as.char.pointer("a=%d\n"), varlist.pack((v4)));
                };
                v4 := v4+2;
            };
        };
        {
            v4 := 0;
            while(int.ne(v4, 0)) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((v4)));
            };
        };
        printf(string.as.char.pointer("a=%d\n"), varlist.pack((v4)));
        fun(int<4> v18){
            decl ref<int<4>> v19 =  var(v18);
            {
                {
                    for(decl int<4> v21 = v19 .. 10 : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack((v21)));
                    };
                    v19 := v19+ceil(10-v19/1)*1;
                };
                {
                    for(decl int<4> v23 = 0-10 .. 0-0+1 : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack((0-v23)));
                    };
                    v19 := 10+ceil(0-0+1-10/1)*1;
                };
            };
        }(v4);
        fun(ref<struct<N:int<4>,i:int<4>>> v25){
            {
                for(decl int<4> v27 = 0-10 .. 0-0+1 : 1) {
                    printf(string.as.char.pointer("k=%d\n"), varlist.pack((0-v27)));
                };
                composite.ref.elem(v25, i, type<int<4>>) := 10+ceil(0-0+1-10/1)*1;
            };
        }(v1);
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v2, ref<array<array<char,1>,1>> v3){
        decl ref<struct<N:int<4>,i:int<4>>> v1 = ( new(struct{N:=10, i:=0}));
        decl ref<int<4>> v4 = ( var(10));
        for(decl int<4> v6 = 0 .. ( *v4) : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((v6)));
        };
        for(decl int<4> v8 = (CAST<int<4>>(0)-( *v4)) .. ((CAST<int<4>>(0)-0)+1) : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack(((CAST<int<4>>(0)-v8))));
        };
        for(decl int<4> v10 = (CAST<int<4>>(0)-( *composite.ref.elem(v1, N, type<int<4>>))) .. (CAST<int<4>>(0)-0) : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack(((CAST<int<4>>(0)-v10))));
        };
        {
            decl ref<int<4>> v11 = v4;
            while((( *composite.ref.elem(v1, N, type<int<4>>))>0)) {
                {
                    printf(string.as.char.pointer("idx=%d"), varlist.pack((( *v4))));
                };
                int.postDec(composite.ref.elem(v1, N, type<int<4>>));
            };
        };
        {
            for(decl int<4> v13 = (CAST<int<4>>(0)-15) .. ((CAST<int<4>>(0)-0)+1) : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack(((CAST<int<4>>(0)-v13))));
            };
            (v4 := (15+(CAST<int<4>>(ceil((CAST<real<8>>((((CAST<int<4>>(0)-0)+1)-15))/CAST<real<8>>(3))))*3)));
        };
        {
            for(decl int<4> v15 = 1 .. 15 : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((v15)));
            };
            (v4 := (1+(CAST<int<4>>(ceil((CAST<real<8>>((15-1))/CAST<real<8>>(3))))*3)));
        };
        {
            (v4 := 1);
            while(((( *v4)<10)&&bind(){fun(ref<int<4>> v16)return (( *v16)>0)(v4)})) {
                {
                    printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v4))));
                };
                (v4 := (( *v4)+2));
            };
        };
        {
            (v4 := 0);
            while(int.ne(( *v4), 0)) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v4))));
            };
        };
        printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v4))));
        fun(int<4> v18){
            decl ref<int<4>> v19 = ( var(v18));
            {
                {
                    for(decl int<4> v21 = ( *v19) .. 10 : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack((v21)));
                    };
                    (v19 := (( *v19)+(CAST<int<4>>(ceil((CAST<real<8>>((10-( *v19)))/CAST<real<8>>(1))))*1)));
                };
                {
                    for(decl int<4> v23 = (CAST<int<4>>(0)-10) .. ((CAST<int<4>>(0)-0)+1) : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack(((CAST<int<4>>(0)-v23))));
                    };
                    (v19 := (10+(CAST<int<4>>(ceil((CAST<real<8>>((((CAST<int<4>>(0)-0)+1)-10))/CAST<real<8>>(1))))*1)));
                };
            };
        }(( *v4));
        fun(ref<struct<N:int<4>,i:int<4>>> v25){
            {
                for(decl int<4> v27 = (CAST<int<4>>(0)-10) .. ((CAST<int<4>>(0)-0)+1) : 1) {
                    printf(string.as.char.pointer("k=%d\n"), varlist.pack(((CAST<int<4>>(0)-v27))));
                };
                (composite.ref.elem(v25, i, type<int<4>>) := (10+(CAST<int<4>>(ceil((CAST<real<8>>((((CAST<int<4>>(0)-0)+1)-10))/CAST<real<8>>(1))))*1)));
            };
        }(v1);
    }

