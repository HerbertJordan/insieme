// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v2, ref<array<array<char,1>,1>> v3){
        decl ref<struct<N:int<4>,i:int<4>>> v1 =  new(struct{N:=10, i:=0});
        decl ref<int<4>> v4 =  var(10);
        for(decl ref<int<4>> v5 =  var(0) .. v4 : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((v5)));
        };
        for(decl ref<int<4>> v6 =  var(0-v4) .. 0-0+1 : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((0-v6)));
        };
        for(decl ref<int<4>> v7 =  var(0-composite.ref.elem(v1, N, int<4>)) .. 0-0 : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((0-v7)));
        };
        {
            decl ref<int<4>> v8 =  var(v4);
            while(composite.ref.elem(v1, N, int<4>)>0) {
                {
                    printf(string.as.char.pointer("idx=%d"), varlist.pack((v4)));
                };
                int.postDec(composite.ref.elem(v1, N, int<4>));
            };
        };
        {
            for(decl ref<int<4>> v9 =  var(0-15) .. 0-0+1 : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((0-v9)));
            };
            v4 := 15+ceil(0-0+1-15/3)*3;
        };
        {
            for(decl ref<int<4>> v10 =  var(1) .. 15 : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((v10)));
            };
            v4 := 1+ceil(15-1/3)*3;
        };
        {
            v4 := 1;
            while(v4<10&&bind()->fun(ref<int<4>> v11)return v11>0(v4)) {
                {
                    printf(string.as.char.pointer("a=%d\n"), varlist.pack((v4)));
                };
                v4 := v4+2;
            };
        };
        {
            v4 := 0;
            while(int.ne(v4, 0)) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((v4)));
            };
        };
        printf(string.as.char.pointer("a=%d\n"), varlist.pack((v4)));
        fun(int<4> v13){
            decl ref<int<4>> v14 =  var(v13);
            {
                {
                    for(decl ref<int<4>> v15 =  var(v14) .. 10 : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack((v15)));
                    };
                    v14 := v14+ceil(10-v14/1)*1;
                };
                {
                    for(decl ref<int<4>> v16 =  var(0-10) .. 0-0+1 : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack((0-v16)));
                    };
                    v14 := 10+ceil(0-0+1-10/1)*1;
                };
            };
        }(v4);
        fun(ref<struct<N:int<4>,i:int<4>>> v18){
            {
                for(decl ref<int<4>> v19 =  var(0-10) .. 0-0+1 : 1) {
                    printf(string.as.char.pointer("k=%d\n"), varlist.pack((0-v19)));
                };
                composite.ref.elem(v18, i, int<4>) := 10+ceil(0-0+1-10/1)*1;
            };
        }(v1);
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v2, ref<array<array<char,1>,1>> v3){
        decl ref<struct<N:int<4>,i:int<4>>> v1 = ( new(struct{N:=10, i:=0}));
        decl ref<int<4>> v4 = ( var(10));
        for(decl ref<int<4>> v5 = ( var(0)) .. ( *v4) : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((( *v5))));
        };
        for(decl ref<int<4>> v6 = ( var((CAST<int<4>>(0)-( *v4)))) .. ((CAST<int<4>>(0)-0)+1) : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack(((CAST<int<4>>(0)-( *v6)))));
        };
        for(decl ref<int<4>> v7 = ( var((CAST<int<4>>(0)-( *composite.ref.elem(v1, N, int<4>))))) .. (CAST<int<4>>(0)-0) : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack(((CAST<int<4>>(0)-( *v7)))));
        };
        {
            decl ref<int<4>> v8 = ( var(( *v4)));
            while((( *composite.ref.elem(v1, N, int<4>))>0)) {
                {
                    printf(string.as.char.pointer("idx=%d"), varlist.pack((( *v4))));
                };
                int.postDec(composite.ref.elem(v1, N, int<4>));
            };
        };
        {
            for(decl ref<int<4>> v9 = ( var((CAST<int<4>>(0)-15))) .. ((CAST<int<4>>(0)-0)+1) : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack(((CAST<int<4>>(0)-( *v9)))));
            };
            (v4 := (15+(CAST<int<4>>(ceil((CAST<real<8>>((((CAST<int<4>>(0)-0)+1)-15))/CAST<real<8>>(3))))*3)));
        };
        {
            for(decl ref<int<4>> v10 = ( var(1)) .. 15 : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v10))));
            };
            (v4 := (1+(CAST<int<4>>(ceil((CAST<real<8>>((15-1))/CAST<real<8>>(3))))*3)));
        };
        {
            (v4 := 1);
            while(((( *v4)<10)&&bind()->fun(ref<int<4>> v11)return (( *v11)>0)(v4))) {
                {
                    printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v4))));
                };
                (v4 := (( *v4)+2));
            };
        };
        {
            (v4 := 0);
            while(int.ne(( *v4), 0)) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v4))));
            };
        };
        printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v4))));
        fun(int<4> v13){
            decl ref<int<4>> v14 = ( var(v13));
            {
                {
                    for(decl ref<int<4>> v15 = ( var(( *v14))) .. 10 : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack((( *v15))));
                    };
                    (v14 := (( *v14)+(CAST<int<4>>(ceil((CAST<real<8>>((10-( *v14)))/CAST<real<8>>(1))))*1)));
                };
                {
                    for(decl ref<int<4>> v16 = ( var((CAST<int<4>>(0)-10))) .. ((CAST<int<4>>(0)-0)+1) : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack(((CAST<int<4>>(0)-( *v16)))));
                    };
                    (v14 := (10+(CAST<int<4>>(ceil((CAST<real<8>>((((CAST<int<4>>(0)-0)+1)-10))/CAST<real<8>>(1))))*1)));
                };
            };
        }(( *v4));
        fun(ref<struct<N:int<4>,i:int<4>>> v18){
            {
                for(decl ref<int<4>> v19 = ( var((CAST<int<4>>(0)-10))) .. ((CAST<int<4>>(0)-0)+1) : 1) {
                    printf(string.as.char.pointer("k=%d\n"), varlist.pack(((CAST<int<4>>(0)-( *v19)))));
                };
                (composite.ref.elem(v18, i, int<4>) := (10+(CAST<int<4>>(ceil((CAST<real<8>>((((CAST<int<4>>(0)-0)+1)-10))/CAST<real<8>>(1))))*1)));
            };
        }(v1);
    }

