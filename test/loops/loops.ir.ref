// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v13, ref<array<ref<array<char,1>>,1>> v14){
        decl ref<struct<N:int<4>,i:int<4>>> v1 =  new(struct{N:=10, i:=0});
        decl ref<int<4>> v15 =  var(10);
        for(decl int<4> v17 = 0 .. v15 : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((v17)));
        };
        for(decl int<4> v19 = 0-v15 .. 0-0+1 : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((0-v19)));
        };
        for(decl int<4> v21 = 0-composite.ref.elem(v1, N, type<int<4>>) .. 0-0 : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((0-v21)));
        };
        {
            decl ref<int<4>> v22 =  var(v15);
            while(composite.ref.elem(v1, N, type<int<4>>)>0) {
                {
                    printf(string.as.char.pointer("idx=%d"), varlist.pack((v15)));
                };
                int.postDec(composite.ref.elem(v1, N, type<int<4>>));
            };
        };
        {
            for(decl int<4> v24 = 0-15 .. 0-0+1 : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((0-v24)));
            };
            v15 := 15+ceil(0-0+1-15/3)*3;
        };
        {
            for(decl int<4> v26 = 1 .. 15 : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((v26)));
            };
            v15 := 1+ceil(15-1/3)*3;
        };
        {
            v15 := 1;
            while(v15<10&&bind(){fun(ref<int<4>> v27)return v27>0(v15)}) {
                {
                    printf(string.as.char.pointer("a=%d\n"), varlist.pack((v15)));
                };
                v15 := v15+2;
            };
        };
        {
            v15 := 0;
            while(int.ne(v15, 0)) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((v15)));
            };
        };
        printf(string.as.char.pointer("a=%d\n"), varlist.pack((v15)));
        fun(int<4> v2){
            decl ref<int<4>> v3 =  var(v2);
            {
                {
                    for(decl int<4> v5 = v3 .. 10 : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack((v5)));
                    };
                    v3 := v3+ceil(10-v3/1)*1;
                };
                {
                    for(decl int<4> v7 = 0-10 .. 0-0+1 : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack((0-v7)));
                    };
                    v3 := 10+ceil(0-0+1-10/1)*1;
                };
            };
        }(v15);
        fun(ref<struct<N:int<4>,i:int<4>>> v9){
            {
                for(decl int<4> v11 = 0-10 .. 0-0+1 : 1) {
                    printf(string.as.char.pointer("k=%d\n"), varlist.pack((0-v11)));
                };
                composite.ref.elem(v9, i, type<int<4>>) := 10+ceil(0-0+1-10/1)*1;
            };
        }(v1);
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v13, ref<array<ref<array<char,1>>,1>> v14){
        decl ref<struct<N:int<4>,i:int<4>>> v1 = ( new(struct{N:=10, i:=0}));
        decl ref<int<4>> v15 = ( var(10));
        for(decl int<4> v17 = 0 .. ( *v15) : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack((v17)));
        };
        for(decl int<4> v19 = (CAST<int<4>>(0)-( *v15)) .. ((CAST<int<4>>(0)-0)+1) : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack(((CAST<int<4>>(0)-v19))));
        };
        for(decl int<4> v21 = (CAST<int<4>>(0)-( *composite.ref.elem(v1, N, type<int<4>>))) .. (CAST<int<4>>(0)-0) : 1) {
            printf(string.as.char.pointer("idx=%d"), varlist.pack(((CAST<int<4>>(0)-v21))));
        };
        {
            decl ref<int<4>> v22 = ( var(( *v15)));
            while((( *composite.ref.elem(v1, N, type<int<4>>))>0)) {
                {
                    printf(string.as.char.pointer("idx=%d"), varlist.pack((( *v15))));
                };
                int.postDec(composite.ref.elem(v1, N, type<int<4>>));
            };
        };
        {
            for(decl int<4> v24 = (CAST<int<4>>(0)-15) .. ((CAST<int<4>>(0)-0)+1) : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack(((CAST<int<4>>(0)-v24))));
            };
            (v15 := (15+(CAST<int<4>>(ceil((CAST<real<8>>((((CAST<int<4>>(0)-0)+1)-15))/CAST<real<8>>(3))))*3)));
        };
        {
            for(decl int<4> v26 = 1 .. 15 : 3) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((v26)));
            };
            (v15 := (1+(CAST<int<4>>(ceil((CAST<real<8>>((15-1))/CAST<real<8>>(3))))*3)));
        };
        {
            (v15 := 1);
            while(((( *v15)<10)&&bind(){fun(ref<int<4>> v27)return (( *v27)>0)(v15)})) {
                {
                    printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v15))));
                };
                (v15 := (( *v15)+2));
            };
        };
        {
            (v15 := 0);
            while(int.ne(( *v15), 0)) {
                printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v15))));
            };
        };
        printf(string.as.char.pointer("a=%d\n"), varlist.pack((( *v15))));
        fun(int<4> v2){
            decl ref<int<4>> v3 = ( var(v2));
            {
                {
                    for(decl int<4> v5 = ( *v3) .. 10 : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack((v5)));
                    };
                    (v3 := (( *v3)+(CAST<int<4>>(ceil((CAST<real<8>>((10-( *v3)))/CAST<real<8>>(1))))*1)));
                };
                {
                    for(decl int<4> v7 = (CAST<int<4>>(0)-10) .. ((CAST<int<4>>(0)-0)+1) : 1) {
                        printf(string.as.char.pointer("k=%d\n"), varlist.pack(((CAST<int<4>>(0)-v7))));
                    };
                    (v3 := (10+(CAST<int<4>>(ceil((CAST<real<8>>((((CAST<int<4>>(0)-0)+1)-10))/CAST<real<8>>(1))))*1)));
                };
            };
        }(( *v15));
        fun(ref<struct<N:int<4>,i:int<4>>> v9){
            {
                for(decl int<4> v11 = (CAST<int<4>>(0)-10) .. ((CAST<int<4>>(0)-0)+1) : 1) {
                    printf(string.as.char.pointer("k=%d\n"), varlist.pack(((CAST<int<4>>(0)-v11))));
                };
                (composite.ref.elem(v9, i, type<int<4>>) := (10+(CAST<int<4>>(ceil((CAST<real<8>>((((CAST<int<4>>(0)-0)+1)-10))/CAST<real<8>>(1))))*1)));
            };
        }(v1);
    }

