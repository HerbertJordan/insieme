// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: struct for job __insieme_job_1 //
struct __insieme_job_1 { 
	unsigned structSize;
	unsigned min, max;
	void (*fun)(isbr_JobArgs*);
	// ---- additional captured variables -----
};

// start code fragment :: Definitions for function type: __insieme_funType_2 //
//
// -------------------- Begin of constructs for function type (()->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_2 <-> (()->unit)
typedef struct ___insieme_funType_2 { 
    void(*call)(void*);
} __insieme_funType_2;

// Type safe function for invoking closures of type __insieme_funType_2
static inline void __insieme_funType_2_call(__insieme_funType_2* closure) {  closure->call(closure); }

// A constructor for closures wrapping pure functions of type (()->unit)
static inline __insieme_funType_2* __insieme_funType_2_ctr(__insieme_funType_2* target, void(*call)(void*)) {
	*target = (__insieme_funType_2){call};
	return target;
}
// ----------------------- end of constructs for function (()->unit)-----------------------

// start code fragment :: Definition of __insieme_closure_3 ... type: (()->unit) //
// -- Begin - Closure Constructs ------------------------------------------------------------
// struct definition a closure of type (()->unit)
typedef struct ___insieme_closure_3 {
    void(*call)(void*);
    __insieme_funType_2* nested;
} __insieme_closure_3;

static inline void __insieme_closure_3_bind(__insieme_closure_3* closure) {  closure->nested->call(closure->nested); }

static inline __insieme_closure_3* __insieme_closure_3_ctr(__insieme_closure_3* closure, __insieme_funType_2* nested) {
    *closure = (__insieme_closure_3){&__insieme_closure_3_bind, nested};
    return closure;
}
// -- End - Closure Constructs --------------------------------------------------------------

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_5_fun //
struct __insieme_pfor_body_5_fun_capture {
};

// start code fragment :: Definition of __insieme_supp_6 ... type: ((int<4>)->unit) //
void __insieme_supp_6(int var_3) { printf("single\n", 0); }
static void __insieme_supp_6_wrap(void* _closure, int var_3) { __insieme_supp_6(var_3); }

// start code fragment :: function for pfor-body __insieme_pfor_body_5_fun //
void __insieme_pfor_body_5_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_6(__it);
	}
	
}

// start code fragment :: Definition of __insieme_supp_4 ... type: (()->unit) //
void __insieme_supp_4(){
	printf("multiple\n", 0);
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1, 1, 0},&__insieme_pfor_body_5_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
}
static void __insieme_supp_4_wrap(void* _closure) { __insieme_supp_4(); }

// start code fragment :: function for job __insieme_job_1 //
void fun__insieme_job_1(isbr_JobArgs* args) {
	// ----------- Unpacking local scope variables ----------
	// ---------- Unpacking auto-captured variables ---------
	// ------------------ Processing Guards -----------------
	// ------------------ Default processing -----------------
	__insieme_funType_2_call((__insieme_funType_2*)__insieme_closure_3_ctr((__insieme_closure_3*)alloca(sizeof(__insieme_closure_3)),(__insieme_funType_2*)__insieme_funType_2_ctr((__insieme_funType_2*)alloca(sizeof(__insieme_funType_2)),&__insieme_supp_4_wrap)));
}

// start code fragment :: Definition of main ... type: (()->int<4>) //
int main() { isbr_merge(isbr_parallel(memcpy(malloc(sizeof(struct __insieme_job_1)),&((struct __insieme_job_1){sizeof(struct __insieme_job_1),1,isbr_getMaxThreads(),&fun__insieme_job_1}),sizeof(struct __insieme_job_1)))); }
static int main_wrap(void* _closure) { return main(); }
