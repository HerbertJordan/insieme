// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0
// --- Entry Point ---

// start code fragment :: struct for job __insieme_expr_0 //
struct __insieme_expr_0 { 
	unsigned structSize;
	unsigned min, max;
	void (*fun)(isbr_JobArgs*);
	// ---- additional captured variables -----
};

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: capture-struct for pfor-body __insieme_expr_2 //
struct capture__insieme_expr_2 {
};

// start code fragment :: function for pfor-body __insieme_expr_2 //
void __insieme_expr_2(const isbr_PForRange range) {
	// ----- captured variables -----
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		printf("single\n", 0);
	}
	
}

// start code fragment :: Definition of __insieme_supp_1 //
void __insieme_supp_1() {
	{
		printf("multiple\n", 0);
		{
			isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1, 1, 0},&__insieme_expr_2);
			isbr_barrier(isbr_getThreadGroup(0));
		};
	}
}


// start code fragment :: function for job __insieme_expr_0 //
void fun__insieme_expr_0(isbr_JobArgs* args) {
	// ----------- Unpacking local scope variables ----------
	// ---------- Unpacking auto-captured variables ---------
	// ------------------ Processing Guards -----------------
	// ------------------ Default processing -----------------
	__insieme_supp_1();
}

// start code fragment :: Definition of main //
int main() {
	{
		isbr_merge(isbr_parallel(memcpy(malloc(sizeof(struct __insieme_expr_0)),&((struct __insieme_expr_0){sizeof(struct __insieme_expr_0),1,isbr_getMaxThreads(),&fun__insieme_expr_0}),sizeof(struct __insieme_expr_0))));
	}
}

