// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    int a;
    int b;
};

// start code fragment :: array type definition of __insieme_type_1 <=> array<char,1> //
typedef struct ___insieme_type_1 { 
    char* data;
    unsigned size[1];
} __insieme_type_1;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: main function //
int main() {
	{
		struct __insieme_globals* var_1 = malloc(sizeof(struct __insieme_globals));
		((*(&((*var_1).a))) = 0);
		((*(&((*var_1).b))) = 0);
		((*(&((*var_1).a))) = 1);
		((*(&((*var_1).b))) = 2);
		printf(((char*)((*(&((__insieme_type_1){"Min: %d\n"}))).data)), ((((*(&((*var_1).a)))<(*(&((*var_1).b)))))?((*(&((*var_1).a)))):((*(&((*var_1).b))))));
		printf(((char*)((*(&((__insieme_type_1){"Max: %d\n"}))).data)), ((((*(&((*var_1).a)))>(*(&((*var_1).b)))))?((*(&((*var_1).a)))):((*(&((*var_1).b))))));
	}
}
