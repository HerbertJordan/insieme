// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<struct<a:int<4>,b:int<4>>> v1 =  new(struct{a:=0, b:=0});
        composite.ref.elem(v1, a, int<4>) := 1;
        composite.ref.elem(v1, b, int<4>) := 2;
        printf(string.as.char.pointer("Min: %d\n"), varlist.pack((ite(composite.ref.elem(v1, a, int<4>)<composite.ref.elem(v1, b, int<4>), bind()->fun(ref<struct<a:int<4>,b:int<4>>> v4)return composite.ref.elem(v4, a, int<4>)(v1), bind()->fun(ref<struct<a:int<4>,b:int<4>>> v2)return composite.ref.elem(v2, b, int<4>)(v1)))));
        printf(string.as.char.pointer("Max: %d\n"), varlist.pack((ite(composite.ref.elem(v1, a, int<4>)>composite.ref.elem(v1, b, int<4>), bind()->fun(ref<struct<a:int<4>,b:int<4>>> v8)return composite.ref.elem(v8, a, int<4>)(v1), bind()->fun(ref<struct<a:int<4>,b:int<4>>> v6)return composite.ref.elem(v6, b, int<4>)(v1)))));
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<struct<a:int<4>,b:int<4>>> v1 = ( new(struct{a:=0, b:=0}));
        (composite.ref.elem(v1, a, int<4>) := 1);
        (composite.ref.elem(v1, b, int<4>) := 2);
        printf(string.as.char.pointer("Min: %d\n"), varlist.pack((ite((( *composite.ref.elem(v1, a, int<4>))<( *composite.ref.elem(v1, b, int<4>))), bind()->fun(ref<struct<a:int<4>,b:int<4>>> v4)return ( *composite.ref.elem(v4, a, int<4>))(v1), bind()->fun(ref<struct<a:int<4>,b:int<4>>> v2)return ( *composite.ref.elem(v2, b, int<4>))(v1)))));
        printf(string.as.char.pointer("Max: %d\n"), varlist.pack((ite((( *composite.ref.elem(v1, a, int<4>))>( *composite.ref.elem(v1, b, int<4>))), bind()->fun(ref<struct<a:int<4>,b:int<4>>> v8)return ( *composite.ref.elem(v8, a, int<4>))(v1), bind()->fun(ref<struct<a:int<4>,b:int<4>>> v6)return ( *composite.ref.elem(v6, b, int<4>))(v1)))));
    }

