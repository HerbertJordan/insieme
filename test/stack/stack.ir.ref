// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<int<4>> v15 =  var(0);
        decl ref<ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>>> v16 =  var(undefined(type<ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>>>));
        v16 := fun(){
            decl ref<ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>>> v1 =  var( new(array.create.1D(type<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>>, sizeof(type<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>>)/sizeof(type<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>>))));
            composite.ref.elem(array.ref.elem.1D(v1, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := get.null(type<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>);
            return v1;
        }();
        {
            for(decl int<4> v18 = 0 .. 10 : 1) {
                printf(string.as.char.pointer("Pushing %d\n"), varlist.pack((v18)));
                fun(ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>> v7, int<4> v8){
                    decl ref<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>> v9 =  var( new(array.create.1D(type<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>}>, sizeof(type<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>}>)/sizeof(type<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>}>))));
                    composite.ref.elem(array.ref.elem.1D(v9, 0), value, type<int<4>>) := v8;
                    composite.ref.elem(array.ref.elem.1D(v9, 0), next, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := composite.ref.elem(array.ref.elem.1D(v7, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>);
                    composite.ref.elem(array.ref.elem.1D(v7, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := v9;
                }(v16, v18);
            };
            v15 := 0+ceil(10-0/1)*1;
        };
        {
            for(decl int<4> v20 = 0 .. 5 : 1) {
                printf(string.as.char.pointer("Poping  %d\n"), varlist.pack((fun(ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>> v11){
                    if(!!is.null(composite.ref.elem(array.ref.elem.1D(v11, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>))) {
                        return 0-1;
                    } else { };
                    decl ref<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>> v12 =  var(composite.ref.elem(array.ref.elem.1D(v11, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>));
                    decl ref<int<4>> v13 =  var(composite.ref.elem(array.ref.elem.1D(v12, 0), value, type<int<4>>));
                    composite.ref.elem(array.ref.elem.1D(v11, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := composite.ref.elem(array.ref.elem.1D(v12, 0), next, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>);
                     del(v12);
                    return v13;
                }(v16))));
            };
            v15 := 0+ceil(5-0/1)*1;
        };
        fun(ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>> v3){
            decl ref<ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>>> v5 =  var(v3);
            {
                while(!is.null(composite.ref.elem(array.ref.elem.1D(v5, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>))) {
                    decl ref<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>> v4 =  var(composite.ref.elem(array.ref.elem.1D(v5, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>));
                    composite.ref.elem(array.ref.elem.1D(v5, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := composite.ref.elem(array.ref.elem.1D(v4, 0), next, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>);
                     del(v4);
                };
                 del(v5);
            };
        }(v16);
        return 0;
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<int<4>> v15 = ( var(0));
        decl ref<ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>>> v16 = ( var(undefined(type<ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>>>)));
        (v16 := fun(){
            decl ref<ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>>> v1 = ( var(( new(array.create.1D(type<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>>, (sizeof(type<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>>)/sizeof(type<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>>)))))));
            (composite.ref.elem(array.ref.elem.1D(( *v1), 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := get.null(type<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>));
            return ( *v1);
        }());
        {
            for(decl int<4> v18 = 0 .. 10 : 1) {
                printf(string.as.char.pointer("Pushing %d\n"), varlist.pack((v18)));
                fun(ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>> v7, int<4> v8){
                    decl ref<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>> v9 = ( var(( new(array.create.1D(type<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>}>, (sizeof(type<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>}>)/sizeof(type<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>}>)))))));
                    (composite.ref.elem(array.ref.elem.1D(( *v9), 0), value, type<int<4>>) := v8);
                    (composite.ref.elem(array.ref.elem.1D(( *v9), 0), next, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := ( *composite.ref.elem(array.ref.elem.1D(v7, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>)));
                    (composite.ref.elem(array.ref.elem.1D(v7, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := ( *v9));
                }(( *v16), v18);
            };
            (v15 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((10-0))/CAST<real<8>>(1))))*1)));
        };
        {
            for(decl int<4> v20 = 0 .. 5 : 1) {
                printf(string.as.char.pointer("Poping  %d\n"), varlist.pack((fun(ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>> v11){
                    if((!(!is.null(( *composite.ref.elem(array.ref.elem.1D(v11, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>)))))) {
                        return (CAST<int<4>>(0)-1);
                    } else { };
                    decl ref<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>> v12 = ( var(( *composite.ref.elem(array.ref.elem.1D(v11, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>))));
                    decl ref<int<4>> v13 = ( var(( *composite.ref.elem(array.ref.elem.1D(( *v12), 0), value, type<int<4>>))));
                    (composite.ref.elem(array.ref.elem.1D(v11, 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := ( *composite.ref.elem(array.ref.elem.1D(( *v12), 0), next, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>)));
                    ( del(( *v12)));
                    return ( *v13);
                }(( *v16)))));
            };
            (v15 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
        };
        fun(ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>> v3){
            decl ref<ref<array<struct<top:ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>,1>>> v5 = ( var(v3));
            {
                while((!is.null(( *composite.ref.elem(array.ref.elem.1D(( *v5), 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>))))) {
                    decl ref<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>> v4 = ( var(( *composite.ref.elem(array.ref.elem.1D(( *v5), 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>))));
                    (composite.ref.elem(array.ref.elem.1D(( *v5), 0), top, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>) := ( *composite.ref.elem(array.ref.elem.1D(( *v4), 0), next, type<ref<array<rec 'elem{'elem=struct<value:int<4>,next:ref<array<'elem,1>>>},1>>>)));
                    ( del(( *v4)));
                };
                ( del(v5));
            };
        }(( *v16));
        return 0;
    }

