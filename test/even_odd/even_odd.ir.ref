// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v13, ref<array<ref<array<char,1>>,1>> v14){
        decl ref<int<4>> v15 =  var(10);
        printf(string.as.char.pointer("x=%d\n"), varlist.pack((v15)));
        printf(string.as.char.pointer("even(x)=%s\n"), varlist.pack((ite(int.ne(recFun v1 {
            v1 = fun(uint<4> v3){
                return ite(v3==0, bind(){fun()return 1()}, bind(){fun(uint<4> v4, (uint<4>) -> int<4> v5)return v5(v4-1)(v3, v2)});
            };
            v2 = fun(uint<4> v8){
                return ite(v8==0, bind(){fun()return 0()}, bind(){fun(uint<4> v9, (uint<4>) -> int<4> v10)return v10(v9-1)(v8, v1)});
            };
        }(v15), 0), bind(){fun()return vector.to.array(['t', 'r', 'u', 'e', '\0'])()}, bind(){fun()return vector.to.array(['f', 'a', 'l', 's', 'e', ...])()}))));
        printf(string.as.char.pointer("odd(x)=%s\n"), varlist.pack((ite(int.ne(recFun v2 {
            v1 = fun(uint<4> v3){
                return ite(v3==0, bind(){fun()return 1()}, bind(){fun(uint<4> v4, (uint<4>) -> int<4> v5)return v5(v4-1)(v3, v2)});
            };
            v2 = fun(uint<4> v8){
                return ite(v8==0, bind(){fun()return 0()}, bind(){fun(uint<4> v9, (uint<4>) -> int<4> v10)return v10(v9-1)(v8, v1)});
            };
        }(v15), 0), bind(){fun()return vector.to.array(['t', 'r', 'u', 'e', '\0'])()}, bind(){fun()return vector.to.array(['f', 'a', 'l', 's', 'e', ...])()}))));
        return 0;
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v13, ref<array<ref<array<char,1>>,1>> v14){
        decl ref<int<4>> v15 = ( var(10));
        printf(string.as.char.pointer("x=%d\n"), varlist.pack((( *v15))));
        printf(string.as.char.pointer("even(x)=%s\n"), varlist.pack((ite(int.ne(recFun v1 {
            v1 = fun(uint<4> v3){
                return ite((v3==CAST<uint<4>>(0)), bind(){fun()return 1()}, bind(){fun(uint<4> v4, (uint<4>) -> int<4> v5)return v5((v4-CAST<uint<4>>(1)))(v3, v2)});
            };
            v2 = fun(uint<4> v8){
                return ite((v8==CAST<uint<4>>(0)), bind(){fun()return 0()}, bind(){fun(uint<4> v9, (uint<4>) -> int<4> v10)return v10((v9-CAST<uint<4>>(1)))(v8, v1)});
            };
        }(CAST<uint<4>>(( *v15))), 0), bind(){fun()return vector.to.array(['t', 'r', 'u', 'e', '\0'])()}, bind(){fun()return vector.to.array(['f', 'a', 'l', 's', 'e', ...])()}))));
        printf(string.as.char.pointer("odd(x)=%s\n"), varlist.pack((ite(int.ne(recFun v2 {
            v1 = fun(uint<4> v3){
                return ite((v3==CAST<uint<4>>(0)), bind(){fun()return 1()}, bind(){fun(uint<4> v4, (uint<4>) -> int<4> v5)return v5((v4-CAST<uint<4>>(1)))(v3, v2)});
            };
            v2 = fun(uint<4> v8){
                return ite((v8==CAST<uint<4>>(0)), bind(){fun()return 0()}, bind(){fun(uint<4> v9, (uint<4>) -> int<4> v10)return v10((v9-CAST<uint<4>>(1)))(v8, v1)});
            };
        }(CAST<uint<4>>(( *v15))), 0), bind(){fun()return vector.to.array(['t', 'r', 'u', 'e', '\0'])()}, bind(){fun()return vector.to.array(['f', 'a', 'l', 's', 'e', ...])()}))));
        return 0;
    }

