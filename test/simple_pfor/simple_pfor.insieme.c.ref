// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0
// --- Entry Point ---

// start code fragment :: struct for job __insieme_expr_0 //
struct __insieme_expr_0 { 
	unsigned structSize;
	unsigned min, max;
	void (*fun)(isbr_JobArgs*);
	// ---- additional captured variables -----
	int* var_13;
	int(* var_14)[100];
};

// start code fragment :: Definitions for function type: __insieme_funType_type_1 //
// Abstract prototype for lambdas of type __insieme_funType_type_1
struct __insieme_funType_type_1 { 
    void(*fun)(void*);
    const size_t size;
};

// Type safe function for invoking lambdas of type __insieme_funType_type_1
void call__insieme_funType_type_1(struct __insieme_funType_type_1* lambda) {  lambda->fun(lambda); }

// start code fragment :: Definitions for function type: __insieme_funType_type_3 //
// Abstract prototype for lambdas of type __insieme_funType_type_3
struct __insieme_funType_type_3 { 
    void(*fun)(void*);
    const size_t size;
    int* p0;
    int(* p1)[100];
};

// start code fragment :: capture-struct for pfor-body __insieme_expr_4 //
struct capture__insieme_expr_4 {
	int(* var_6)[100];
};

// start code fragment :: function for pfor-body __insieme_expr_4 //
void __insieme_expr_4(const isbr_PForRange range) {
	// ----- captured variables -----
	int(* var_15)[100] = ((struct capture__insieme_expr_4*)(range.context))->var_6;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		{
			((((*var_15)[((unsigned int)(__it))])) = __it);
		};
	}
	
}

// start code fragment :: Prototype for external function: ceil ... type: ((real<8>)->real<8>) //
double ceil(double);

// start code fragment :: Definition of __insieme_supp_2 //
void __insieme_supp_2(void* _capture) {
	// --------- Captured Stuff - Begin -------------
	int* var_7 = ((struct __insieme_funType_type_3*)_capture)->p0;
	int(* var_6)[100] = ((struct __insieme_funType_type_3*)_capture)->p1;
	// --------- Captured Stuff -  End  -------------
	{
		{
			{
				isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 100, 1, &((struct capture__insieme_expr_4){var_6})},&__insieme_expr_4);
				isbr_barrier(isbr_getThreadGroup(0));
			};
			((*var_7) = (0+(((int)(ceil((((double)((100-0)))/((double)(1))))))*1)));
		};
	}
}


// start code fragment :: function for job __insieme_expr_0 //
void fun__insieme_expr_0(isbr_JobArgs* args) {
	// ----------- Unpacking local scope variables ----------
	// ---------- Unpacking auto-captured variables ---------
	int* var_13 = ((struct __insieme_expr_0*)args)->var_13;
	int(* var_14)[100] = ((struct __insieme_expr_0*)args)->var_14;
	// ------------------ Processing Guards -----------------
	// ------------------ Default processing -----------------
	__insieme_supp_2(((struct __insieme_funType_type_1*)(&((struct __insieme_funType_type_3){0, sizeof(struct __insieme_funType_type_3),var_13,var_14}))));
}

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->unit) //
void printf(char*, ...);

// start code fragment :: Definition of main //
int main() {
	{
		int i = 0;
		int a[100];
		isbr_merge(isbr_parallel(memcpy(malloc(sizeof(struct __insieme_expr_0)),&((struct __insieme_expr_0){sizeof(struct __insieme_expr_0),1,isbr_getMaxThreads(),&fun__insieme_expr_0,&i,&a}),sizeof(struct __insieme_expr_0))));
		printf("After Loop: %d\n", (i));
		{
			for(int var_4 = 0; var_4 < 100; var_4 += 1) {
				printf("a[%d]=%d\n", (var_4), ((a[((unsigned int)((var_4)))])));
			};
			((i) = (0+(((int)(ceil((((double)((100-0)))/((double)(1))))))*1)));
		};
	}
}

