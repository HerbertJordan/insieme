// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: vector_type_declaration of __insieme_type_1 <=> vector<int<4>,100> //
typedef struct ___insieme_type_1 { 
    int data[100];
} __insieme_type_1;

// A constructor initializing a vector of the type __insieme_type_1 uniformly
static inline __insieme_type_1 __insieme_type_1_init_uniform(int value) {
	__insieme_type_1 res;
	for (int i=0; i<100;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: struct for job __insieme_job_3 //
struct __insieme_job_3 { 
	unsigned structSize;
	unsigned min, max;
	void (*fun)(isbr_JobArgs*);
	// ---- additional captured variables -----
	int* var_13;
	__insieme_type_1* var_14;
};

// start code fragment :: Definitions for function type: __insieme_funType_4 //
//
// -------------------- Begin of constructs for function type (()->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_4 <-> (()->unit)
typedef struct ___insieme_funType_4 { 
    void(*call)(void*);
} __insieme_funType_4;

// Type safe function for invoking closures of type __insieme_funType_4
static inline void __insieme_funType_4_call(__insieme_funType_4* closure) {  closure->call(closure); }

// A constructor for closures wrapping pure functions of type (()->unit)
static inline __insieme_funType_4* __insieme_funType_4_ctr(__insieme_funType_4* target, void(*call)(void*)) {
	*target = (__insieme_funType_4){call};
	return target;
}
// ----------------------- end of constructs for function (()->unit)-----------------------

// start code fragment :: Definitions for function type: __insieme_funType_6 //
//
// -------------------- Begin of constructs for function type ((ref<int<4>>,ref<vector<int<4>,100>>)->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_6 <-> ((ref<int<4>>,ref<vector<int<4>,100>>)->unit)
typedef struct ___insieme_funType_6 { 
    void(*call)(void*, int*, __insieme_type_1*);
} __insieme_funType_6;

// Type safe function for invoking closures of type __insieme_funType_6
static inline void __insieme_funType_6_call(__insieme_funType_6* closure, int* p1, __insieme_type_1* p2) {  closure->call(closure, p1,p2); }

// A constructor for closures wrapping pure functions of type ((ref<int<4>>,ref<vector<int<4>,100>>)->unit)
static inline __insieme_funType_6* __insieme_funType_6_ctr(__insieme_funType_6* target, void(*call)(void*, int*, __insieme_type_1*)) {
	*target = (__insieme_funType_6){call};
	return target;
}
// ----------------------- end of constructs for function ((ref<int<4>>,ref<vector<int<4>,100>>)->unit)-----------------------

// start code fragment :: Definition of __insieme_closure_5 ... type: (()->unit) //
// -- Begin - Closure Constructs ------------------------------------------------------------
// struct definition a closure of type (()->unit)
typedef struct ___insieme_closure_5 {
    void(*call)(void*);
    __insieme_funType_6* nested;
    int* c1;
    __insieme_type_1* c2;
} __insieme_closure_5;

static inline void __insieme_closure_5_bind(__insieme_closure_5* closure) {  closure->nested->call(closure->nested, closure->c1,closure->c2); }

static inline __insieme_closure_5* __insieme_closure_5_ctr(__insieme_closure_5* closure, __insieme_funType_6* nested, int* c1, __insieme_type_1* c2) {
    *closure = (__insieme_closure_5){&__insieme_closure_5_bind, nested, c1, c2};
    return closure;
}
// -- End - Closure Constructs --------------------------------------------------------------

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_8_fun //
struct __insieme_pfor_body_8_fun_capture {
	__insieme_type_1* var_6;
};

// start code fragment :: Definition of __insieme_supp_9 ... type: ((ref<vector<int<4>,100>>,int<4>)->unit) //
void __insieme_supp_9(__insieme_type_1* var_11, int var_10) { ((((*var_11).data[((unsigned int)(var_10))])) = var_10); }
static void __insieme_supp_9_wrap(void* _closure, __insieme_type_1* var_11, int var_10) { __insieme_supp_9(var_11, var_10); }

// start code fragment :: function for pfor-body __insieme_pfor_body_8_fun //
void __insieme_pfor_body_8_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_1* var_15 = ((struct __insieme_pfor_body_8_fun_capture*)(range.context))->var_6;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_9(var_15, __it);
	}
	
}

// start code fragment :: Prototype for external function: ceil ... type: ((real<8>)->real<8>) //
double ceil(double);
static double ceil_wrap(void* _closure, double var_17) { return ceil(var_17); }

// start code fragment :: Definition of __insieme_supp_7 ... type: ((ref<int<4>>,ref<vector<int<4>,100>>)->unit) //
void __insieme_supp_7(int* var_7, __insieme_type_1* var_6) { {
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 100, 1, &((struct __insieme_pfor_body_8_fun_capture){var_6})},&__insieme_pfor_body_8_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
	((*var_7) = (0+(((int)(ceil((((double)((100-0)))/((double)(1))))))*1)));
}; }
static void __insieme_supp_7_wrap(void* _closure, int* var_7, __insieme_type_1* var_6) { __insieme_supp_7(var_7, var_6); }

// start code fragment :: function for job __insieme_job_3 //
void fun__insieme_job_3(isbr_JobArgs* args) {
	// ----------- Unpacking local scope variables ----------
	// ---------- Unpacking auto-captured variables ---------
	int* var_13 = ((struct __insieme_job_3*)args)->var_13;
	__insieme_type_1* var_14 = ((struct __insieme_job_3*)args)->var_14;
	// ------------------ Processing Guards -----------------
	// ------------------ Default processing -----------------
	__insieme_funType_4_call((__insieme_funType_4*)__insieme_closure_5_ctr((__insieme_closure_5*)alloca(sizeof(__insieme_closure_5)),(__insieme_funType_6*)__insieme_funType_6_ctr((__insieme_funType_6*)alloca(sizeof(__insieme_funType_6)),&__insieme_supp_7_wrap), var_13, var_14));
}

// start code fragment :: array type definition of __insieme_type_10 <=> array<char,1> //
typedef struct ___insieme_type_10 { 
    char* data;
    unsigned size[1];
} __insieme_type_10;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: main function //
int main() {
	{
		int i = 0;
		__insieme_type_1 a;
		isbr_merge(isbr_parallel(memcpy(malloc(sizeof(struct __insieme_job_3)),&((struct __insieme_job_3){sizeof(struct __insieme_job_3),1,isbr_getMaxThreads(),&fun__insieme_job_3,&i,&a}),sizeof(struct __insieme_job_3))));
		printf(((char*)((*(&((__insieme_type_10){"After Loop: %d\n"}))).data)), (i));
		{
			for(int var_4 = 0; var_4 < 100; var_4 += 1)  { printf(((char*)((*(&((__insieme_type_10){"a[%d]=%d\n"}))).data)), (var_4), (((a).data[((unsigned int)((var_4)))]))); };
			((i) = (0+(((int)(ceil((((double)((100-0)))/((double)(1))))))*1)));
		};
	}
}
