// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<char,1> //
typedef struct ___insieme_type_1 { 
    char* data;
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<char,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
} __insieme_type_0;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Prototype of __insieme_supp_3 ... type: ((uint<4>)->int<4>) //
int __insieme_supp_3(unsigned int);

// start code fragment :: Prototype of __insieme_supp_4 ... type: ((uint<4>)->int<4>) //
int __insieme_supp_4(unsigned int);

// start code fragment :: Definition of __insieme_supp_3 ... type: ((uint<4>)->int<4>) //
int __insieme_supp_3(unsigned int x) { return (((x==((unsigned int)(0))))?(1):(__insieme_supp_4((x-((unsigned int)(1)))))); }
static int __insieme_supp_3_wrap(void* _closure, unsigned int x) { return __insieme_supp_3(x); }

// start code fragment :: Definition of __insieme_supp_4 ... type: ((uint<4>)->int<4>) //
int __insieme_supp_4(unsigned int x) { return (((x==((unsigned int)(0))))?(0):(__insieme_supp_3((x-((unsigned int)(1)))))); }
static int __insieme_supp_4_wrap(void* _closure, unsigned int x) { return __insieme_supp_4(x); }

// start code fragment :: vector_type_declaration of __insieme_type_5 <=> vector<char,5> //
typedef struct ___insieme_type_5 { 
    char data[5];
} __insieme_type_5;

// A constructor initializing a vector of the type __insieme_type_5 uniformly
static inline __insieme_type_5 __insieme_type_5_init_uniform(char value) {
	__insieme_type_5 res;
	for (int i=0; i<5;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_6 <=> vector<char,6> //
typedef struct ___insieme_type_6 { 
    char data[6];
} __insieme_type_6;

// A constructor initializing a vector of the type __insieme_type_6 uniformly
static inline __insieme_type_6 __insieme_type_6_init_uniform(char value) {
	__insieme_type_6 res;
	for (int i=0; i<6;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: main function //
int main(int __argc, char** __argv) {
	
	// encapsulating arguments within Insieme Types ...
	int argc = __argc;
	__insieme_type_0 argv = (__insieme_type_0){alloca(sizeof(__insieme_type_1) * argc)};
	for(int i=0; i<argc; ++i) {
		argv.data[i] = (__insieme_type_1){__argv[i]};
	}
	
	// ---- begin of actual code body ----
	{
		printf(((char*)((*(&((__insieme_type_1){"even(%d)?: %s\n"}))).data)), 12, ((((__insieme_supp_3(((unsigned int)(12)))!=0))?((((__insieme_type_1){(((__insieme_type_5){{'t', 'r', 'u', 'e', '\0'}})).data}))):((((__insieme_type_1){(((__insieme_type_6){{'f', 'a', 'l', 's', 'e', '\0'}})).data}))))).data);
		printf(((char*)((*(&((__insieme_type_1){"odd(%d)?: %s\n"}))).data)), 12, ((((__insieme_supp_4(((unsigned int)(12)))!=0))?((((__insieme_type_1){(((__insieme_type_5){{'t', 'r', 'u', 'e', '\0'}})).data}))):((((__insieme_type_1){(((__insieme_type_6){{'f', 'a', 'l', 's', 'e', '\0'}})).data}))))).data);
	}
	// ----  end of actual code body  ----
	
}

