// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_0 <=> array<real<8>,1> //
typedef struct ___insieme_type_0 { 
    double* data;
} __insieme_type_0;

// start code fragment :: New operator for type ref<array<real<8>,1>> //
static inline __insieme_type_0* _ref_new___insieme_type_1(__insieme_type_0 value) {
    __insieme_type_0* res = malloc(sizeof(__insieme_type_0));
    *res = value;
    return res;
}


// start code fragment :: array type utils of __insieme_type_0 <=> array<real<8>,1> //
// A constructor for the array type __insieme_type_0
static inline __insieme_type_0 __insieme_type_0_ctr(unsigned s1) {
    return ((__insieme_type_0){malloc(sizeof(double)*s1)});
}

// start code fragment :: Definition of createMatrix ... type: ((uint<4>,uint<4>)->ref<array<real<8>,1>>) //
__insieme_type_0* createMatrix(unsigned int x, unsigned int y) { return _ref_new___insieme_type_1((__insieme_type_0_ctr(((((unsigned long)((x*y)))*sizeof(double))/sizeof(double))))); }
static __insieme_type_0* createMatrix_wrap(void* _closure, unsigned int x, unsigned int y) { return createMatrix(x, y); }

// start code fragment :: struct for job __insieme_job_2 //
struct __insieme_job_2 { 
	unsigned structSize;
	unsigned min, max;
	void (*fun)(isbr_JobArgs*);
	// ---- additional captured variables -----
	__insieme_type_0* var_51;
	__insieme_type_0* var_52;
	__insieme_type_0* var_53;
};

// start code fragment :: Definitions for function type: __insieme_funType_3 //
//
// -------------------- Begin of constructs for function type (()->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_3 <-> (()->unit)
typedef struct ___insieme_funType_3 { 
    void(*call)(void*);
} __insieme_funType_3;

// Type safe function for invoking closures of type __insieme_funType_3
static inline void __insieme_funType_3_call(__insieme_funType_3* closure) {  closure->call(closure); }

// A constructor for closures wrapping pure functions of type (()->unit)
static inline __insieme_funType_3* __insieme_funType_3_ctr(__insieme_funType_3* target, void(*call)(void*)) {
	*target = (__insieme_funType_3){call};
	return target;
}
// ----------------------- end of constructs for function (()->unit)-----------------------

// start code fragment :: Definitions for function type: __insieme_funType_5 //
//
// -------------------- Begin of constructs for function type ((ref<array<real<8>,1>>,ref<array<real<8>,1>>,ref<array<real<8>,1>>)->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_5 <-> ((ref<array<real<8>,1>>,ref<array<real<8>,1>>,ref<array<real<8>,1>>)->unit)
typedef struct ___insieme_funType_5 { 
    void(*call)(void*, __insieme_type_0*, __insieme_type_0*, __insieme_type_0*);
} __insieme_funType_5;

// Type safe function for invoking closures of type __insieme_funType_5
static inline void __insieme_funType_5_call(__insieme_funType_5* closure, __insieme_type_0* p1, __insieme_type_0* p2, __insieme_type_0* p3) {  closure->call(closure, p1,p2,p3); }

// A constructor for closures wrapping pure functions of type ((ref<array<real<8>,1>>,ref<array<real<8>,1>>,ref<array<real<8>,1>>)->unit)
static inline __insieme_funType_5* __insieme_funType_5_ctr(__insieme_funType_5* target, void(*call)(void*, __insieme_type_0*, __insieme_type_0*, __insieme_type_0*)) {
	*target = (__insieme_funType_5){call};
	return target;
}
// ----------------------- end of constructs for function ((ref<array<real<8>,1>>,ref<array<real<8>,1>>,ref<array<real<8>,1>>)->unit)-----------------------

// start code fragment :: Definition of __insieme_closure_4 ... type: (()->unit) //
// -- Begin - Closure Constructs ------------------------------------------------------------
// struct definition a closure of type (()->unit)
typedef struct ___insieme_closure_4 {
    void(*call)(void*);
    __insieme_funType_5* nested;
    __insieme_type_0* c1;
    __insieme_type_0* c2;
    __insieme_type_0* c3;
} __insieme_closure_4;

static inline void __insieme_closure_4_bind(__insieme_closure_4* closure) {  closure->nested->call(closure->nested, closure->c1,closure->c2,closure->c3); }

static inline __insieme_closure_4* __insieme_closure_4_ctr(__insieme_closure_4* closure, __insieme_funType_5* nested, __insieme_type_0* c1, __insieme_type_0* c2, __insieme_type_0* c3) {
    *closure = (__insieme_closure_4){&__insieme_closure_4_bind, nested, c1, c2, c3};
    return closure;
}
// -- End - Closure Constructs --------------------------------------------------------------

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_7_fun //
struct __insieme_pfor_body_7_fun_capture {
	__insieme_type_0* var_35;
};

// start code fragment :: Definition of __insieme_supp_8 ... type: ((ref<array<real<8>,1>>,int<4>)->unit) //
void __insieme_supp_8(__insieme_type_0* var_39, int var_38) { for(int j = 0; j < 1000; j += 1)  { ((((*var_39).data[((unsigned int)(((var_38*1000)+(j))))])) = ((double)((var_38*(j))))); }; }
static void __insieme_supp_8_wrap(void* _closure, __insieme_type_0* var_39, int var_38) { __insieme_supp_8(var_39, var_38); }

// start code fragment :: function for pfor-body __insieme_pfor_body_7_fun //
void __insieme_pfor_body_7_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_0* var_54 = ((struct __insieme_pfor_body_7_fun_capture*)(range.context))->var_35;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_8(var_54, __it);
	}
	
}

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_10_fun //
struct __insieme_pfor_body_10_fun_capture {
	__insieme_type_0* var_34;
};

// start code fragment :: Definition of __insieme_supp_11 ... type: ((ref<array<real<8>,1>>,int<4>)->unit) //
void __insieme_supp_11(__insieme_type_0* var_43, int var_42) { for(int j = 0; j < 1000; j += 1)  { ((((*var_43).data[((unsigned int)(((var_42*1000)+(j))))])) = ((double)((((var_42==(j)))?(1):(0))))); }; }
static void __insieme_supp_11_wrap(void* _closure, __insieme_type_0* var_43, int var_42) { __insieme_supp_11(var_43, var_42); }

// start code fragment :: function for pfor-body __insieme_pfor_body_10_fun //
void __insieme_pfor_body_10_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_0* var_56 = ((struct __insieme_pfor_body_10_fun_capture*)(range.context))->var_34;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_11(var_56, __it);
	}
	
}

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_12_fun //
struct __insieme_pfor_body_12_fun_capture {
	__insieme_type_0* var_33;
	__insieme_type_0* var_34;
	__insieme_type_0* var_35;
};

// start code fragment :: Definition of __insieme_supp_13 ... type: ((ref<array<real<8>,1>>,ref<array<real<8>,1>>,ref<array<real<8>,1>>,int<4>)->unit) //
void __insieme_supp_13(__insieme_type_0* var_49, __insieme_type_0* var_48, __insieme_type_0* var_47, int var_46) { for(int j = 0; j < 1000; j += 1) {
	double sum = ((double)(0));
	for(int k = 0; k < 1000; k += 1)  { ((sum) = ((sum)+((((*var_47).data[((unsigned int)(((var_46*1000)+(k))))]))*(((*var_48).data[((unsigned int)((((k)*1000)+(j))))]))))); };
	((((*var_49).data[((unsigned int)(((var_46*1000)+(j))))])) = (sum));
}; }
static void __insieme_supp_13_wrap(void* _closure, __insieme_type_0* var_49, __insieme_type_0* var_48, __insieme_type_0* var_47, int var_46) { __insieme_supp_13(var_49, var_48, var_47, var_46); }

// start code fragment :: function for pfor-body __insieme_pfor_body_12_fun //
void __insieme_pfor_body_12_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_0* var_58 = ((struct __insieme_pfor_body_12_fun_capture*)(range.context))->var_33;
	__insieme_type_0* var_59 = ((struct __insieme_pfor_body_12_fun_capture*)(range.context))->var_34;
	__insieme_type_0* var_60 = ((struct __insieme_pfor_body_12_fun_capture*)(range.context))->var_35;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_13(var_58, var_59, var_60, __it);
	}
	
}

// start code fragment :: Definition of __insieme_supp_6 ... type: ((ref<array<real<8>,1>>,ref<array<real<8>,1>>,ref<array<real<8>,1>>)->unit) //
void __insieme_supp_6(__insieme_type_0* var_35, __insieme_type_0* var_34, __insieme_type_0* var_33){
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_7_fun_capture){var_35})},&__insieme_pfor_body_7_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_10_fun_capture){var_34})},&__insieme_pfor_body_10_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_12_fun_capture){var_33, var_34, var_35})},&__insieme_pfor_body_12_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
}
static void __insieme_supp_6_wrap(void* _closure, __insieme_type_0* var_35, __insieme_type_0* var_34, __insieme_type_0* var_33) { __insieme_supp_6(var_35, var_34, var_33); }

// start code fragment :: function for job __insieme_job_2 //
void fun__insieme_job_2(isbr_JobArgs* args) {
	// ----------- Unpacking local scope variables ----------
	// ---------- Unpacking auto-captured variables ---------
	__insieme_type_0* var_51 = ((struct __insieme_job_2*)args)->var_51;
	__insieme_type_0* var_52 = ((struct __insieme_job_2*)args)->var_52;
	__insieme_type_0* var_53 = ((struct __insieme_job_2*)args)->var_53;
	// ------------------ Processing Guards -----------------
	// ------------------ Default processing -----------------
	__insieme_funType_3_call((__insieme_funType_3*)__insieme_closure_4_ctr((__insieme_closure_4*)alloca(sizeof(__insieme_closure_4)),(__insieme_funType_5*)__insieme_funType_5_ctr((__insieme_funType_5*)alloca(sizeof(__insieme_funType_5)),&__insieme_supp_6_wrap), var_51, var_52, var_53));
}

// start code fragment :: array type definition of __insieme_type_15 <=> array<char,1> //
typedef struct ___insieme_type_15 { 
    char* data;
} __insieme_type_15;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: vector_type_declaration of __insieme_type_17 <=> vector<char,3> //
typedef struct ___insieme_type_17 { 
    char data[3];
} __insieme_type_17;

// A constructor initializing a vector of the type __insieme_type_17 uniformly
static inline __insieme_type_17 __insieme_type_17_init_uniform(char value) {
	__insieme_type_17 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_18 <=> vector<char,4> //
typedef struct ___insieme_type_18 { 
    char data[4];
} __insieme_type_18;

// A constructor initializing a vector of the type __insieme_type_18 uniformly
static inline __insieme_type_18 __insieme_type_18_init_uniform(char value) {
	__insieme_type_18 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of freeMatrix ... type: ((ref<array<real<8>,1>>)->unit) //
void freeMatrix(__insieme_type_0* matrix){
	__insieme_type_0* var_30 = matrix;
	 { ; };
}
static void freeMatrix_wrap(void* _closure, __insieme_type_0* matrix) { freeMatrix(matrix); }

// start code fragment :: main function //
int main() {
	{
		__insieme_type_0 A = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		__insieme_type_0 B = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		__insieme_type_0 C = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		isbr_merge(isbr_parallel(memcpy(malloc(sizeof(struct __insieme_job_2)),&((struct __insieme_job_2){sizeof(struct __insieme_job_2),1,isbr_getMaxThreads(),&fun__insieme_job_2,&A,&B,&C}),sizeof(struct __insieme_job_2))));
		int success = 1;
		for(int i = 0; i < 1000; i += 1) {
			for(int j = 0; j < (((1000<1000))?(1000):(1000)); j += 1)  { if(((((A).data[((unsigned int)((((i)*1000)+(j))))]))!=(((C).data[((unsigned int)((((i)*1000)+(j))))])))) { ((success) = 0); }; };
			for(int j = (((1000<1000))?(1000):(1000)); j < (((1000>1000))?(1000):(1000)); j += 1)  { if(((((C).data[((unsigned int)((((i)*1000)+(j))))]))!=((double)(0)))) { ((success) = 0); }; };
		};
		printf(((char*)((*(&((__insieme_type_15){"Verification: %s\n"}))).data)), (((((success)!=0))?((((__insieme_type_15){(((__insieme_type_17){{'O', 'K', '\0'}})).data}))):((((__insieme_type_15){(((__insieme_type_18){{'E', 'R', 'R', '\0'}})).data}))))).data);
		freeMatrix(&A);
		freeMatrix(&B);
		freeMatrix(&C);
	}
}
