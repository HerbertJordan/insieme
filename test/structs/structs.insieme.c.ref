// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: vector_type_declaration of __insieme_type_1 <=> vector<char,30> //
typedef struct ___insieme_type_1 { 
    char data[30];
} __insieme_type_1;

// A constructor initializing a vector of the type __insieme_type_1 uniformly
static inline __insieme_type_1 __insieme_type_1_init_uniform(char value) {
	__insieme_type_1 res;
	for (int i=0; i<30;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: type_declaration_Person //
struct Person { 
    __insieme_type_1 name;
    unsigned int age;
};

// start code fragment :: Prototype for external function: strcpy ... type: ((ref<array<char,1>>,ref<array<char,1>>)->ref<array<char,1>>) //
char* strcpy(char*, char*);
static char* strcpy_wrap(void* _closure, char* var_11, char* var_12) { return strcpy(var_11, var_12); }

// start code fragment :: Definition of getPerson ... type: (()->struct<name:vector<char,30>,age:uint<4>>) //
struct Person getPerson(){
	struct Person res;
	strcpy((((char*){(*(&((res).name))).data})), "John Doe");
	((*(&((res).age))) = ((unsigned int)(101)));
}
static struct Person getPerson_wrap(void* _closure) { return getPerson(); }

// start code fragment :: Definition of isTeenager ... type: ((struct<name:vector<char,30>,age:uint<4>>)->int<4>) //
int isTeenager(struct Person person) { return ((int)(((((person.age)>=((unsigned int)(10)))&&((person.age)<((unsigned int)(20))))))); }
static int isTeenager_wrap(void* _closure, struct Person person) { return isTeenager(person); }

// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	struct Person mrX = getPerson();
	return isTeenager((mrX));
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
