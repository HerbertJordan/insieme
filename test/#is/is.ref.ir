// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v2, array<ref<array<ref<char>,1>>,1> v3) {
        decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v1 = ( var(struct{sec:=( var(0)), start:=( var(vector.initUniform(( var(0.0))))), elapsed:=( var(vector.initUniform(( var(0.0))))), key_buff_ptr_global:=( var(null)), passed_verification:=( var(0)), key_array:=( var(vector.initUniform(( var(0))))), key_buff1:=( var(vector.initUniform(( var(0))))), key_buff2:=( var(vector.initUniform(( var(0))))), partial_verify_vals:=( var(vector.initUniform(( var(0))))), test_index_array:=( var(vector.initUniform(( var(0))))), test_rank_array:=( var(vector.initUniform(( var(0))))), S_test_index_array:=( var([( var(48427)), ( var(17148)), ( var(23627)), ( var(62548)), ( var(4431))])), S_test_rank_array:=( var([( var(0)), ( var(18)), ( var(346)), ( var(64917)), ( var(65463))])), W_test_index_array:=( var([( var(357773)), ( var(934767)), ( var(875723)), ( var(898999)), ( var(404505))])), W_test_rank_array:=( var([( var(1249)), ( var(11698)), ( var(1039987)), ( var(1043896)), ( var(1048018))])), A_test_index_array:=( var([( var(2112377)), ( var(662041)), ( var(5336171)), ( var(3642833)), ( var(4250760))])), A_test_rank_array:=( var([( var(104)), ( var(17523)), ( var(123928)), ( var(8288932)), ( var(8388264))])), B_test_index_array:=( var([( var(41869)), ( var(812306)), ( var(5102857)), ( var(18232239)), ( var(26860214))])), B_test_rank_array:=( var([( var(33422937)), ( var(10244)), ( var(59149)), ( var(33135281)), ( var(99))])), C_test_index_array:=( var([( var(44172927)), ( var(72999161)), ( var(74326391)), ( var(129606274)), ( var(21736814))])), C_test_rank_array:=( var([( var(61147)), ( var(882988)), ( var(266290)), ( var(133997595)), ( var(133525895))])), KS:=( var(0)), R23:=( var(0.0)), R46:=( var(0.0)), T23:=( var(0.0)), T46:=( var(0.0))}));
        decl ref<int<4>> v4 = ( var(0));
        decl ref<int<4>> v5 = ( var(0));
        decl ref<int<4>> v6 = ( var(0));
        decl ref<int<4>> v7 = ( var(1));
        decl ref<real<8>> v8 = ( var(0.0));
        decl ref<real<8>> v9 = ( var(0.0));
        {
            for(decl ref<int<4>> v11 = ( var(0)) .. 5 : 1) {
                decl int<a> v10 = CAST<int<a>>('S');
                switch(v10) {
                    case 'S': {
                        ((( *( *v1).test_index_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).S_test_index_array)[CAST<uint<4>>(( *v11))])));
                        ((( *( *v1).test_rank_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).S_test_rank_array)[CAST<uint<4>>(( *v11))])));
                    }
                    case 'A': {
                        ((( *( *v1).test_index_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).A_test_index_array)[CAST<uint<4>>(( *v11))])));
                        ((( *( *v1).test_rank_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).A_test_rank_array)[CAST<uint<4>>(( *v11))])));
                    }
                    case 'W': {
                        ((( *( *v1).test_index_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).W_test_index_array)[CAST<uint<4>>(( *v11))])));
                        ((( *( *v1).test_rank_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).W_test_rank_array)[CAST<uint<4>>(( *v11))])));
                    }
                    case 'B': {
                        ((( *( *v1).test_index_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).B_test_index_array)[CAST<uint<4>>(( *v11))])));
                        ((( *( *v1).test_rank_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).B_test_rank_array)[CAST<uint<4>>(( *v11))])));
                    }
                    case 'C': {
                        ((( *( *v1).test_index_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).C_test_index_array)[CAST<uint<4>>(( *v11))])));
                        ((( *( *v1).test_rank_array)[CAST<uint<4>>(( *v11))]) := ( *(( *( *v1).C_test_rank_array)[CAST<uint<4>>(( *v11))])));
                    }
                    default: { }
                };
            };
            (v4 := 5);
        };
        { };
        printf(CAST<array<ref<char>,1>>("\n\n NAS Parallel Benchmarks 2.3 OpenMP C version"), pack(()));
        printf(CAST<array<ref<char>,1>>(" Size:  %d  (class %c)\n"), pack((int.shl(1, 16), 'S')));
        printf(CAST<array<ref<char>,1>>(" Iterations:   %d\n"), pack((10)));
        fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v13 = v1](int<4> v12) {
            ((( *( *v13).elapsed)[CAST<uint<4>>(v12)]) := 0.0);
        }(0);
        fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v16 = v1](real<8> v14, real<8> v15) {
            decl ref<real<8>> v17 = ( var(0.0));
            decl ref<int<4>> v18 = ( var(0));
            decl ref<int<4>> v19 = ( var(0));
            decl ref<int<4>> v20 = ( var(0));
            (v20 := (int.shl(1, 11)/4));
            {
                for(decl ref<int<4>> v37 = ( var(0)) .. int.shl(1, 16) : 1) {
                    (v17 := fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v23 = v16](array<ref<real<8>>,1> v21, array<ref<real<8>>,1> v22) {
                        decl ref<real<8>> v24 = ( var(0.0));
                        decl ref<real<8>> v25 = ( var(0.0));
                        decl ref<real<8>> v26 = ( var(0.0));
                        decl ref<real<8>> v27 = ( var(0.0));
                        decl ref<real<8>> v28 = ( var(0.0));
                        decl ref<real<8>> v29 = ( var(0.0));
                        decl ref<real<8>> v30 = ( var(0.0));
                        decl ref<real<8>> v31 = ( var(0.0));
                        decl ref<real<8>> v32 = ( var(0.0));
                        decl ref<int<4>> v33 = ( var(0));
                        decl ref<int<4>> v34 = ( var(0));
                        if((( *( *v23).KS)==0)) {
                            (( *v23).R23 := 1.0);
                            (( *v23).R46 := 1.0);
                            (( *v23).T23 := 1.0);
                            (( *v23).T46 := 1.0);
                            {
                                for(decl ref<int<4>> v35 = ( var(1)) .. 23 : 1) {
                                    (( *v23).R23 := (0.50*( *( *v23).R23)));
                                    (( *v23).T23 := (2.0*( *( *v23).T23)));
                                };
                                (v33 := 23);
                            };
                            {
                                for(decl ref<int<4>> v36 = ( var(1)) .. 46 : 1) {
                                    (( *v23).R46 := (0.50*( *( *v23).R46)));
                                    (( *v23).T46 := (2.0*( *( *v23).T46)));
                                };
                                (v33 := 46);
                            };
                            (( *v23).KS := 1);
                        } else { };
                        (v24 := (( *( *v23).R23)*( *(v22[0]))));
                        (v34 := CAST<int<4>>(( *v24)));
                        (v28 := CAST<real<8>>(( *v34)));
                        (v29 := (( *(v22[0]))-(( *( *v23).T23)*( *v28))));
                        (v24 := (( *( *v23).R23)*( *(v21[0]))));
                        (v34 := CAST<int<4>>(( *v24)));
                        (v30 := CAST<real<8>>(( *v34)));
                        (v31 := (( *(v21[0]))-(( *( *v23).T23)*( *v30))));
                        (v24 := ((( *v28)*( *v31))+(( *v29)*( *v30))));
                        (v34 := CAST<int<4>>((( *( *v23).R23)*( *v24))));
                        (v25 := CAST<real<8>>(( *v34)));
                        (v32 := (( *v24)-(( *( *v23).T23)*( *v25))));
                        (v26 := ((( *( *v23).T23)*( *v32))+(( *v29)*( *v31))));
                        (v34 := CAST<int<4>>((( *( *v23).R46)*( *v26))));
                        (v27 := CAST<real<8>>(( *v34)));
                        ((v21[0]) := (( *v26)-(( *( *v23).T46)*( *v27))));
                        return (( *( *v23).R46)*( *(v21[0])));
                    }(v14, v15));
                    (v17 := (( *v17)+fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v23 = v16](array<ref<real<8>>,1> v21, array<ref<real<8>>,1> v22) {
                        decl ref<real<8>> v24 = ( var(0.0));
                        decl ref<real<8>> v25 = ( var(0.0));
                        decl ref<real<8>> v26 = ( var(0.0));
                        decl ref<real<8>> v27 = ( var(0.0));
                        decl ref<real<8>> v28 = ( var(0.0));
                        decl ref<real<8>> v29 = ( var(0.0));
                        decl ref<real<8>> v30 = ( var(0.0));
                        decl ref<real<8>> v31 = ( var(0.0));
                        decl ref<real<8>> v32 = ( var(0.0));
                        decl ref<int<4>> v33 = ( var(0));
                        decl ref<int<4>> v34 = ( var(0));
                        if((( *( *v23).KS)==0)) {
                            (( *v23).R23 := 1.0);
                            (( *v23).R46 := 1.0);
                            (( *v23).T23 := 1.0);
                            (( *v23).T46 := 1.0);
                            {
                                for(decl ref<int<4>> v35 = ( var(1)) .. 23 : 1) {
                                    (( *v23).R23 := (0.50*( *( *v23).R23)));
                                    (( *v23).T23 := (2.0*( *( *v23).T23)));
                                };
                                (v33 := 23);
                            };
                            {
                                for(decl ref<int<4>> v36 = ( var(1)) .. 46 : 1) {
                                    (( *v23).R46 := (0.50*( *( *v23).R46)));
                                    (( *v23).T46 := (2.0*( *( *v23).T46)));
                                };
                                (v33 := 46);
                            };
                            (( *v23).KS := 1);
                        } else { };
                        (v24 := (( *( *v23).R23)*( *(v22[0]))));
                        (v34 := CAST<int<4>>(( *v24)));
                        (v28 := CAST<real<8>>(( *v34)));
                        (v29 := (( *(v22[0]))-(( *( *v23).T23)*( *v28))));
                        (v24 := (( *( *v23).R23)*( *(v21[0]))));
                        (v34 := CAST<int<4>>(( *v24)));
                        (v30 := CAST<real<8>>(( *v34)));
                        (v31 := (( *(v21[0]))-(( *( *v23).T23)*( *v30))));
                        (v24 := ((( *v28)*( *v31))+(( *v29)*( *v30))));
                        (v34 := CAST<int<4>>((( *( *v23).R23)*( *v24))));
                        (v25 := CAST<real<8>>(( *v34)));
                        (v32 := (( *v24)-(( *( *v23).T23)*( *v25))));
                        (v26 := ((( *( *v23).T23)*( *v32))+(( *v29)*( *v31))));
                        (v34 := CAST<int<4>>((( *( *v23).R46)*( *v26))));
                        (v27 := CAST<real<8>>(( *v34)));
                        ((v21[0]) := (( *v26)-(( *( *v23).T46)*( *v27))));
                        return (( *( *v23).R46)*( *(v21[0])));
                    }(v14, v15)));
                    (v17 := (( *v17)+fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v23 = v16](array<ref<real<8>>,1> v21, array<ref<real<8>>,1> v22) {
                        decl ref<real<8>> v24 = ( var(0.0));
                        decl ref<real<8>> v25 = ( var(0.0));
                        decl ref<real<8>> v26 = ( var(0.0));
                        decl ref<real<8>> v27 = ( var(0.0));
                        decl ref<real<8>> v28 = ( var(0.0));
                        decl ref<real<8>> v29 = ( var(0.0));
                        decl ref<real<8>> v30 = ( var(0.0));
                        decl ref<real<8>> v31 = ( var(0.0));
                        decl ref<real<8>> v32 = ( var(0.0));
                        decl ref<int<4>> v33 = ( var(0));
                        decl ref<int<4>> v34 = ( var(0));
                        if((( *( *v23).KS)==0)) {
                            (( *v23).R23 := 1.0);
                            (( *v23).R46 := 1.0);
                            (( *v23).T23 := 1.0);
                            (( *v23).T46 := 1.0);
                            {
                                for(decl ref<int<4>> v35 = ( var(1)) .. 23 : 1) {
                                    (( *v23).R23 := (0.50*( *( *v23).R23)));
                                    (( *v23).T23 := (2.0*( *( *v23).T23)));
                                };
                                (v33 := 23);
                            };
                            {
                                for(decl ref<int<4>> v36 = ( var(1)) .. 46 : 1) {
                                    (( *v23).R46 := (0.50*( *( *v23).R46)));
                                    (( *v23).T46 := (2.0*( *( *v23).T46)));
                                };
                                (v33 := 46);
                            };
                            (( *v23).KS := 1);
                        } else { };
                        (v24 := (( *( *v23).R23)*( *(v22[0]))));
                        (v34 := CAST<int<4>>(( *v24)));
                        (v28 := CAST<real<8>>(( *v34)));
                        (v29 := (( *(v22[0]))-(( *( *v23).T23)*( *v28))));
                        (v24 := (( *( *v23).R23)*( *(v21[0]))));
                        (v34 := CAST<int<4>>(( *v24)));
                        (v30 := CAST<real<8>>(( *v34)));
                        (v31 := (( *(v21[0]))-(( *( *v23).T23)*( *v30))));
                        (v24 := ((( *v28)*( *v31))+(( *v29)*( *v30))));
                        (v34 := CAST<int<4>>((( *( *v23).R23)*( *v24))));
                        (v25 := CAST<real<8>>(( *v34)));
                        (v32 := (( *v24)-(( *( *v23).T23)*( *v25))));
                        (v26 := ((( *( *v23).T23)*( *v32))+(( *v29)*( *v31))));
                        (v34 := CAST<int<4>>((( *( *v23).R46)*( *v26))));
                        (v27 := CAST<real<8>>(( *v34)));
                        ((v21[0]) := (( *v26)-(( *( *v23).T46)*( *v27))));
                        return (( *( *v23).R46)*( *(v21[0])));
                    }(v14, v15)));
                    (v17 := (( *v17)+fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v23 = v16](array<ref<real<8>>,1> v21, array<ref<real<8>>,1> v22) {
                        decl ref<real<8>> v24 = ( var(0.0));
                        decl ref<real<8>> v25 = ( var(0.0));
                        decl ref<real<8>> v26 = ( var(0.0));
                        decl ref<real<8>> v27 = ( var(0.0));
                        decl ref<real<8>> v28 = ( var(0.0));
                        decl ref<real<8>> v29 = ( var(0.0));
                        decl ref<real<8>> v30 = ( var(0.0));
                        decl ref<real<8>> v31 = ( var(0.0));
                        decl ref<real<8>> v32 = ( var(0.0));
                        decl ref<int<4>> v33 = ( var(0));
                        decl ref<int<4>> v34 = ( var(0));
                        if((( *( *v23).KS)==0)) {
                            (( *v23).R23 := 1.0);
                            (( *v23).R46 := 1.0);
                            (( *v23).T23 := 1.0);
                            (( *v23).T46 := 1.0);
                            {
                                for(decl ref<int<4>> v35 = ( var(1)) .. 23 : 1) {
                                    (( *v23).R23 := (0.50*( *( *v23).R23)));
                                    (( *v23).T23 := (2.0*( *( *v23).T23)));
                                };
                                (v33 := 23);
                            };
                            {
                                for(decl ref<int<4>> v36 = ( var(1)) .. 46 : 1) {
                                    (( *v23).R46 := (0.50*( *( *v23).R46)));
                                    (( *v23).T46 := (2.0*( *( *v23).T46)));
                                };
                                (v33 := 46);
                            };
                            (( *v23).KS := 1);
                        } else { };
                        (v24 := (( *( *v23).R23)*( *(v22[0]))));
                        (v34 := CAST<int<4>>(( *v24)));
                        (v28 := CAST<real<8>>(( *v34)));
                        (v29 := (( *(v22[0]))-(( *( *v23).T23)*( *v28))));
                        (v24 := (( *( *v23).R23)*( *(v21[0]))));
                        (v34 := CAST<int<4>>(( *v24)));
                        (v30 := CAST<real<8>>(( *v34)));
                        (v31 := (( *(v21[0]))-(( *( *v23).T23)*( *v30))));
                        (v24 := ((( *v28)*( *v31))+(( *v29)*( *v30))));
                        (v34 := CAST<int<4>>((( *( *v23).R23)*( *v24))));
                        (v25 := CAST<real<8>>(( *v34)));
                        (v32 := (( *v24)-(( *( *v23).T23)*( *v25))));
                        (v26 := ((( *( *v23).T23)*( *v32))+(( *v29)*( *v31))));
                        (v34 := CAST<int<4>>((( *( *v23).R46)*( *v26))));
                        (v27 := CAST<real<8>>(( *v34)));
                        ((v21[0]) := (( *v26)-(( *( *v23).T46)*( *v27))));
                        return (( *( *v23).R46)*( *(v21[0])));
                    }(v14, v15)));
                    ((( *( *v16).key_array)[CAST<uint<4>>(( *v37))]) := CAST<int<4>>((CAST<real<8>>(( *v20))*( *v17))));
                };
                (v18 := int.shl(1, 16));
            };
        }(314159265.00, 1220703125.00);
        fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v39 = v1](int<4> v38) {
            decl ref<int<4>> v40 = ( var(0));
            decl ref<int<4>> v41 = ( var(0));
            decl ref<int<4>> v42 = ( var(0));
            decl ref<int<4>> v43 = ( var(0));
            decl ref<int<4>> v44 = ( var(0));
            decl ref<int<4>> v45 = ( var((11-9)));
            decl ref<int<4>> v46 = ( var(0));
            decl ref<int<4>> v47 = ( var(0));
            decl ref<int<4>> v48 = ( var(0));
            decl ref<vector<ref<int<4>>,2048>> v49 = ( var(vector.initUniform(( var(0)))));
            {
                ((( *( *v39).key_array)[CAST<uint<4>>(v38)]) := v38);
                ((( *( *v39).key_array)[CAST<uint<4>>((v38+10))]) := (int.shl(1, 11)-v38));
                {
                    for(decl ref<int<4>> v50 = ( var(0)) .. 5 : 1) 
                        ((( *( *v39).partial_verify_vals)[CAST<uint<4>>(( *v50))]) := ( *(( *( *v39).key_array)[CAST<uint<4>>(( *(( *( *v39).test_index_array)[CAST<uint<4>>(( *v50))])))])))
                    ;
                    (v40 := 5);
                };
                {
                    for(decl ref<int<4>> v51 = ( var(0)) .. int.shl(1, 11) : 1) 
                        ((( *( *v39).key_buff1)[CAST<uint<4>>(( *v51))]) := 0)
                    ;
                    (v40 := int.shl(1, 11));
                };
            };
            {
                for(decl ref<int<4>> v52 = ( var(0)) .. int.shl(1, 11) : 1) 
                    ((( *v49)[CAST<uint<4>>(( *v52))]) := 0)
                ;
                (v40 := int.shl(1, 11));
            };
            {
                for(decl ref<int<4>> v57 = ( var(0)) .. int.shl(1, 16) : 1) {
                    ((( *( *v39).key_buff2)[CAST<uint<4>>(( *v57))]) := ( *(( *( *v39).key_array)[CAST<uint<4>>(( *v57))])));
                    fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v54, ref<int<4>> v55, ref<vector<ref<int<4>>,2048>> v56) {
                        decl int<4> v53 = ( *(( *v56)[CAST<uint<4>>(( *(( *( *v54).key_buff2)[CAST<uint<4>>(( *v55))])))]));
                        ((( *v56)[CAST<uint<4>>(( *(( *( *v54).key_buff2)[CAST<uint<4>>(( *v55))])))]) := (( *(( *v56)[CAST<uint<4>>(( *(( *( *v54).key_buff2)[CAST<uint<4>>(( *v55))])))]))+CAST<int<4>>(1)));
                        return v53;
                    }(v39, v57, v49);
                };
                (v40 := int.shl(1, 16));
            };
            {
                for(decl ref<int<4>> v58 = ( var(0)) .. (int.shl(1, 11)-1) : 1) 
                    ((( *v49)[CAST<uint<4>>((( *v58)+1))]) := (( *(( *v49)[CAST<uint<4>>((( *v58)+1))]))+( *(( *v49)[CAST<uint<4>>(( *v58))]))))
                ;
                (v40 := (int.shl(1, 11)-1));
            };
            {
                {
                    for(decl ref<int<4>> v59 = ( var(0)) .. int.shl(1, 11) : 1) 
                        ((( *( *v39).key_buff1)[CAST<uint<4>>(( *v59))]) := (( *(( *( *v39).key_buff1)[CAST<uint<4>>(( *v59))]))+( *(( *v49)[CAST<uint<4>>(( *v59))]))))
                    ;
                    (v40 := int.shl(1, 11));
                };
            };
            {
                {
                    for(decl ref<int<4>> v81 = ( var(0)) .. 5 : 1) {
                        (v42 := ( *(( *( *v39).partial_verify_vals)[CAST<uint<4>>(( *v81))])));
                        if(int.land((0<=( *v42)), (( *v42)<=(int.shl(1, 16)-1)))) {
                            decl int<a> v60 = CAST<int<a>>('S');
                            switch(v60) {
                                case 'S': if((( *v81)<=2)) {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+v38))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v62) {
                                        decl int<4> v61 = ( *( *v62).passed_verification);
                                        (( *v62).passed_verification := (( *( *v62).passed_verification)+CAST<int<4>>(1)));
                                        return v61;
                                    }(v39);
                                } else {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-v38))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v64) {
                                        decl int<4> v63 = ( *( *v64).passed_verification);
                                        (( *v64).passed_verification := (( *( *v64).passed_verification)+CAST<int<4>>(1)));
                                        return v63;
                                    }(v39);
                                }
                                case 'W': if((( *v81)<2)) {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+(v38-2)))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v66) {
                                        decl int<4> v65 = ( *( *v66).passed_verification);
                                        (( *v66).passed_verification := (( *( *v66).passed_verification)+CAST<int<4>>(1)));
                                        return v65;
                                    }(v39);
                                } else {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-v38))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v68) {
                                        decl int<4> v67 = ( *( *v68).passed_verification);
                                        (( *v68).passed_verification := (( *( *v68).passed_verification)+CAST<int<4>>(1)));
                                        return v67;
                                    }(v39);
                                }
                                case 'A': if((( *v81)<=2)) {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+(v38-1)))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v70) {
                                        decl int<4> v69 = ( *( *v70).passed_verification);
                                        (( *v70).passed_verification := (( *( *v70).passed_verification)+CAST<int<4>>(1)));
                                        return v69;
                                    }(v39);
                                } else {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-(v38-1)))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v72) {
                                        decl int<4> v71 = ( *( *v72).passed_verification);
                                        (( *v72).passed_verification := (( *( *v72).passed_verification)+CAST<int<4>>(1)));
                                        return v71;
                                    }(v39);
                                }
                                case 'B': if(int.lor(int.lor((( *v81)==1), (( *v81)==2)), (( *v81)==4))) {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+v38))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v74) {
                                        decl int<4> v73 = ( *( *v74).passed_verification);
                                        (( *v74).passed_verification := (( *( *v74).passed_verification)+CAST<int<4>>(1)));
                                        return v73;
                                    }(v39);
                                } else {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-v38))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v76) {
                                        decl int<4> v75 = ( *( *v76).passed_verification);
                                        (( *v76).passed_verification := (( *( *v76).passed_verification)+CAST<int<4>>(1)));
                                        return v75;
                                    }(v39);
                                }
                                case 'C': if((( *v81)<=2)) {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+v38))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v78) {
                                        decl int<4> v77 = ( *( *v78).passed_verification);
                                        (( *v78).passed_verification := (( *( *v78).passed_verification)+CAST<int<4>>(1)));
                                        return v77;
                                    }(v39);
                                } else {
                                    if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-v38))) {
                                        printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                    } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v80) {
                                        decl int<4> v79 = ( *( *v80).passed_verification);
                                        (( *v80).passed_verification := (( *( *v80).passed_verification)+CAST<int<4>>(1)));
                                        return v79;
                                    }(v39);
                                }
                                default: { }
                            };
                        } else { };
                    };
                    (v40 := 5);
                };
                if((v38==10)) (( *v39).key_buff_ptr_global := ( *( *v39).key_buff1)) else { };
            };
        }(1);
        (( *v1).passed_verification := 0);
        if(int.ne('S', 'S')) printf(CAST<array<ref<char>,1>>("\n   iteration\n"), pack(())) else { };
        fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v83 = v1](int<4> v82) {
            ((( *( *v83).start)[CAST<uint<4>>(v82)]) := fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v84 = v83]() {
                decl ref<real<8>> v85 = ( var(0.0));
                fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v87 = v84](array<ref<real<8>>,1> v86) {
                    decl ref<struct<tv_sec:ref<int<8>>,tv_usec:ref<int<8>>>> v88 = ( var(struct{tv_sec:=( var(0)), tv_usec:=( var(0))}));
                    gettimeofday(( *v88), CAST<array<ref<struct<tz_minuteswest:ref<int<4>>,tz_dsttime:ref<int<4>>>>,1>>(( *CAST<ref<'a>>(0))));
                    if((( *( *v87).sec)<0)) (( *v87).sec := CAST<int<4>>(( *( *v88).tv_sec))) else { };
                    ((v86[0]) := (CAST<real<8>>((( *( *v88).tv_sec)-CAST<int<8>>(( *( *v87).sec))))+(1.0e-6*CAST<real<8>>(( *( *v88).tv_usec)))));
                }(( *v85));
                return v85;
            }());
        }(0);
        {
            for(decl ref<int<4>> v89 = ( var(1)) .. 10 : 1) {
                if(int.ne('S', 'S')) printf(CAST<array<ref<char>,1>>("        %d\n"), pack((( *v89)))) else { };
                fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v39 = v1](int<4> v38) {
                    decl ref<int<4>> v40 = ( var(0));
                    decl ref<int<4>> v41 = ( var(0));
                    decl ref<int<4>> v42 = ( var(0));
                    decl ref<int<4>> v43 = ( var(0));
                    decl ref<int<4>> v44 = ( var(0));
                    decl ref<int<4>> v45 = ( var((11-9)));
                    decl ref<int<4>> v46 = ( var(0));
                    decl ref<int<4>> v47 = ( var(0));
                    decl ref<int<4>> v48 = ( var(0));
                    decl ref<vector<ref<int<4>>,2048>> v49 = ( var(vector.initUniform(( var(0)))));
                    {
                        ((( *( *v39).key_array)[CAST<uint<4>>(v38)]) := v38);
                        ((( *( *v39).key_array)[CAST<uint<4>>((v38+10))]) := (int.shl(1, 11)-v38));
                        {
                            for(decl ref<int<4>> v50 = ( var(0)) .. 5 : 1) 
                                ((( *( *v39).partial_verify_vals)[CAST<uint<4>>(( *v50))]) := ( *(( *( *v39).key_array)[CAST<uint<4>>(( *(( *( *v39).test_index_array)[CAST<uint<4>>(( *v50))])))])))
                            ;
                            (v40 := 5);
                        };
                        {
                            for(decl ref<int<4>> v51 = ( var(0)) .. int.shl(1, 11) : 1) 
                                ((( *( *v39).key_buff1)[CAST<uint<4>>(( *v51))]) := 0)
                            ;
                            (v40 := int.shl(1, 11));
                        };
                    };
                    {
                        for(decl ref<int<4>> v52 = ( var(0)) .. int.shl(1, 11) : 1) 
                            ((( *v49)[CAST<uint<4>>(( *v52))]) := 0)
                        ;
                        (v40 := int.shl(1, 11));
                    };
                    {
                        for(decl ref<int<4>> v57 = ( var(0)) .. int.shl(1, 16) : 1) {
                            ((( *( *v39).key_buff2)[CAST<uint<4>>(( *v57))]) := ( *(( *( *v39).key_array)[CAST<uint<4>>(( *v57))])));
                            fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v54, ref<int<4>> v55, ref<vector<ref<int<4>>,2048>> v56) {
                                decl int<4> v53 = ( *(( *v56)[CAST<uint<4>>(( *(( *( *v54).key_buff2)[CAST<uint<4>>(( *v55))])))]));
                                ((( *v56)[CAST<uint<4>>(( *(( *( *v54).key_buff2)[CAST<uint<4>>(( *v55))])))]) := (( *(( *v56)[CAST<uint<4>>(( *(( *( *v54).key_buff2)[CAST<uint<4>>(( *v55))])))]))+CAST<int<4>>(1)));
                                return v53;
                            }(v39, v57, v49);
                        };
                        (v40 := int.shl(1, 16));
                    };
                    {
                        for(decl ref<int<4>> v58 = ( var(0)) .. (int.shl(1, 11)-1) : 1) 
                            ((( *v49)[CAST<uint<4>>((( *v58)+1))]) := (( *(( *v49)[CAST<uint<4>>((( *v58)+1))]))+( *(( *v49)[CAST<uint<4>>(( *v58))]))))
                        ;
                        (v40 := (int.shl(1, 11)-1));
                    };
                    {
                        {
                            for(decl ref<int<4>> v59 = ( var(0)) .. int.shl(1, 11) : 1) 
                                ((( *( *v39).key_buff1)[CAST<uint<4>>(( *v59))]) := (( *(( *( *v39).key_buff1)[CAST<uint<4>>(( *v59))]))+( *(( *v49)[CAST<uint<4>>(( *v59))]))))
                            ;
                            (v40 := int.shl(1, 11));
                        };
                    };
                    {
                        {
                            for(decl ref<int<4>> v81 = ( var(0)) .. 5 : 1) {
                                (v42 := ( *(( *( *v39).partial_verify_vals)[CAST<uint<4>>(( *v81))])));
                                if(int.land((0<=( *v42)), (( *v42)<=(int.shl(1, 16)-1)))) {
                                    decl int<a> v60 = CAST<int<a>>('S');
                                    switch(v60) {
                                        case 'S': if((( *v81)<=2)) {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+v38))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v62) {
                                                decl int<4> v61 = ( *( *v62).passed_verification);
                                                (( *v62).passed_verification := (( *( *v62).passed_verification)+CAST<int<4>>(1)));
                                                return v61;
                                            }(v39);
                                        } else {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-v38))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v64) {
                                                decl int<4> v63 = ( *( *v64).passed_verification);
                                                (( *v64).passed_verification := (( *( *v64).passed_verification)+CAST<int<4>>(1)));
                                                return v63;
                                            }(v39);
                                        }
                                        case 'W': if((( *v81)<2)) {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+(v38-2)))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v66) {
                                                decl int<4> v65 = ( *( *v66).passed_verification);
                                                (( *v66).passed_verification := (( *( *v66).passed_verification)+CAST<int<4>>(1)));
                                                return v65;
                                            }(v39);
                                        } else {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-v38))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v68) {
                                                decl int<4> v67 = ( *( *v68).passed_verification);
                                                (( *v68).passed_verification := (( *( *v68).passed_verification)+CAST<int<4>>(1)));
                                                return v67;
                                            }(v39);
                                        }
                                        case 'A': if((( *v81)<=2)) {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+(v38-1)))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v70) {
                                                decl int<4> v69 = ( *( *v70).passed_verification);
                                                (( *v70).passed_verification := (( *( *v70).passed_verification)+CAST<int<4>>(1)));
                                                return v69;
                                            }(v39);
                                        } else {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-(v38-1)))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v72) {
                                                decl int<4> v71 = ( *( *v72).passed_verification);
                                                (( *v72).passed_verification := (( *( *v72).passed_verification)+CAST<int<4>>(1)));
                                                return v71;
                                            }(v39);
                                        }
                                        case 'B': if(int.lor(int.lor((( *v81)==1), (( *v81)==2)), (( *v81)==4))) {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+v38))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v74) {
                                                decl int<4> v73 = ( *( *v74).passed_verification);
                                                (( *v74).passed_verification := (( *( *v74).passed_verification)+CAST<int<4>>(1)));
                                                return v73;
                                            }(v39);
                                        } else {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-v38))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v76) {
                                                decl int<4> v75 = ( *( *v76).passed_verification);
                                                (( *v76).passed_verification := (( *( *v76).passed_verification)+CAST<int<4>>(1)));
                                                return v75;
                                            }(v39);
                                        }
                                        case 'C': if((( *v81)<=2)) {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))+v38))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v78) {
                                                decl int<4> v77 = ( *( *v78).passed_verification);
                                                (( *v78).passed_verification := (( *( *v78).passed_verification)+CAST<int<4>>(1)));
                                                return v77;
                                            }(v39);
                                        } else {
                                            if(int.ne(( *(( *( *v39).key_buff1)[CAST<uint<4>>((( *v42)-1))])), (( *(( *( *v39).test_rank_array)[CAST<uint<4>>(( *v81))]))-v38))) {
                                                printf(CAST<array<ref<char>,1>>("Failed partial verification: "), pack((v38, ( *v81))));
                                            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v80) {
                                                decl int<4> v79 = ( *( *v80).passed_verification);
                                                (( *v80).passed_verification := (( *( *v80).passed_verification)+CAST<int<4>>(1)));
                                                return v79;
                                            }(v39);
                                        }
                                        default: { }
                                    };
                                } else { };
                            };
                            (v40 := 5);
                        };
                        if((v38==10)) (( *v39).key_buff_ptr_global := ( *( *v39).key_buff1)) else { };
                    };
                }(( *v89));
            };
            (v5 := 10);
        };
        fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v91 = v1](int<4> v90) {
            decl ref<real<8>> v92 = ( var(0.0));
            decl ref<real<8>> v93 = ( var(0.0));
            (v93 := fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v84 = v83]() {
                decl ref<real<8>> v85 = ( var(0.0));
                fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v87 = v84](array<ref<real<8>>,1> v86) {
                    decl ref<struct<tv_sec:ref<int<8>>,tv_usec:ref<int<8>>>> v88 = ( var(struct{tv_sec:=( var(0)), tv_usec:=( var(0))}));
                    gettimeofday(( *v88), CAST<array<ref<struct<tz_minuteswest:ref<int<4>>,tz_dsttime:ref<int<4>>>>,1>>(( *CAST<ref<'a>>(0))));
                    if((( *( *v87).sec)<0)) (( *v87).sec := CAST<int<4>>(( *( *v88).tv_sec))) else { };
                    ((v86[0]) := (CAST<real<8>>((( *( *v88).tv_sec)-CAST<int<8>>(( *( *v87).sec))))+(1.0e-6*CAST<real<8>>(( *( *v88).tv_usec)))));
                }(( *v85));
                return v85;
            }());
            (v92 := (( *v93)-( *(( *( *v91).start)[CAST<uint<4>>(v90)]))));
            ((( *( *v91).elapsed)[CAST<uint<4>>(v90)]) := (( *(( *( *v91).elapsed)[CAST<uint<4>>(v90)]))+( *v92)));
        }(0);
        (v8 := fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v95 = v1](int<4> v94) {
            return (( *( *v95).elapsed)[CAST<uint<4>>(v94)]);
        }(0));
        fun[decl ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v96 = v1]() {
            decl ref<int<4>> v97 = ( var(0));
            decl ref<int<4>> v98 = ( var(0));
            decl ref<int<4>> v99 = ( var(0));
            decl ref<int<4>> v100 = ( var(0));
            decl ref<int<4>> v101 = ( var(0));
            {
                for(decl ref<int<4>> v104 = ( var(0)) .. int.shl(1, 16) : 1) 
                    ((( *( *v96).key_array)[CAST<uint<4>>(fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v102, ref<int<4>> v103) {
                        ((( *( *v102).key_buff_ptr_global)[CAST<uint<4>>(( *(( *( *v102).key_buff2)[CAST<uint<4>>(( *v103))])))]) := (( *(( *( *v102).key_buff_ptr_global)[CAST<uint<4>>(( *(( *( *v102).key_buff2)[CAST<uint<4>>(( *v103))])))]))-CAST<int<4>>(1)));
                        ( *(( *( *v102).key_buff_ptr_global)[CAST<uint<4>>(( *(( *( *v102).key_buff2)[CAST<uint<4>>(( *v103))])))]));
                    }(v96, v104))]) := ( *(( *( *v96).key_buff2)[CAST<uint<4>>(( *v104))])))
                ;
                (v97 := int.shl(1, 16));
            };
            (v98 := 0);
            {
                for(decl ref<int<4>> v107 = ( var(1)) .. int.shl(1, 16) : 1) 
                    if((( *(( *( *v96).key_array)[CAST<uint<4>>((( *v107)-1))]))>( *(( *( *v96).key_array)[CAST<uint<4>>(( *v107))])))) fun(ref<int<4>> v106) {
                        decl int<4> v105 = ( *v106);
                        (v106 := (( *v106)+CAST<int<4>>(1)));
                        return v105;
                    }(v98) else { }
                ;
                (v97 := int.shl(1, 16));
            };
            if(int.ne(( *v98), 0)) {
                printf(CAST<array<ref<char>,1>>("Full_verify: number of keys out of sort: %d\n"), pack((( *v98))));
            } else fun(ref<struct<sec:ref<int<4>>,start:ref<vector<ref<real<8>>,64>>,elapsed:ref<vector<ref<real<8>>,64>>,key_buff_ptr_global:ref<array<ref<int<4>>,1>>,passed_verification:ref<int<4>>,key_array:ref<vector<ref<int<4>>,65536>>,key_buff1:ref<vector<ref<int<4>>,65536>>,key_buff2:ref<vector<ref<int<4>>,65536>>,partial_verify_vals:ref<vector<ref<int<4>>,5>>,test_index_array:ref<vector<ref<int<4>>,5>>,test_rank_array:ref<vector<ref<int<4>>,5>>,S_test_index_array:ref<vector<ref<int<4>>,5>>,S_test_rank_array:ref<vector<ref<int<4>>,5>>,W_test_index_array:ref<vector<ref<int<4>>,5>>,W_test_rank_array:ref<vector<ref<int<4>>,5>>,A_test_index_array:ref<vector<ref<int<4>>,5>>,A_test_rank_array:ref<vector<ref<int<4>>,5>>,B_test_index_array:ref<vector<ref<int<4>>,5>>,B_test_rank_array:ref<vector<ref<int<4>>,5>>,C_test_index_array:ref<vector<ref<int<4>>,5>>,C_test_rank_array:ref<vector<ref<int<4>>,5>>,KS:ref<int<4>>,R23:ref<real<8>>,R46:ref<real<8>>,T23:ref<real<8>>,T46:ref<real<8>>>> v109) {
                decl int<4> v108 = ( *( *v109).passed_verification);
                (( *v109).passed_verification := (( *( *v109).passed_verification)+CAST<int<4>>(1)));
                return v108;
            }(v96);
        }();
        if(int.ne(( *( *v1).passed_verification), ((5*10)+1))) (( *v1).passed_verification := 0) else { };
        fun(array<ref<char>,1> v110, char v111, int<4> v112, int<4> v113, int<4> v114, int<4> v115, int<4> v116, real<8> v117, real<8> v118, array<ref<char>,1> v119, int<4> v120, array<ref<char>,1> v121, array<ref<char>,1> v122, array<ref<char>,1> v123, array<ref<char>,1> v124, array<ref<char>,1> v125, array<ref<char>,1> v126, array<ref<char>,1> v127, array<ref<char>,1> v128, array<ref<char>,1> v129) {
            decl ref<array<ref<char>,1>> v130 = ( var(CAST<array<ref<char>,1>>("1000")));
            printf(CAST<array<ref<char>,1>>("\n\n %s Benchmark Completed\n"), pack((v110)));
            printf(CAST<array<ref<char>,1>>(" Class           =                        %c\n"), pack((CAST<int<4>>(v111))));
            if(int.land((v113==0), (v114==0))) printf(CAST<array<ref<char>,1>>(" Size            =             %12d\n"), pack((v112))) else printf(CAST<array<ref<char>,1>>(" Size            =              %3dx%3dx%3d\n"), pack((v112, v113, v114)));
            printf(CAST<array<ref<char>,1>>(" Iterations      =             %12d\n"), pack((v115)));
            printf(CAST<array<ref<char>,1>>(" Threads         =             %12d\n"), pack((v116)));
            printf(CAST<array<ref<char>,1>>(" Time in seconds =             %12.2f\n"), pack((v117)));
            printf(CAST<array<ref<char>,1>>(" Mop/s total     =             %12.2f\n"), pack((v118)));
            printf(CAST<array<ref<char>,1>>(" Operation type  = %24s\n"), pack((v119)));
            if(CAST<bool>(v120)) printf(CAST<array<ref<char>,1>>(" Verification    =               SUCCESSFUL\n"), pack(())) else printf(CAST<array<ref<char>,1>>(" Verification    =             UNSUCCESSFUL\n"), pack(()));
            printf(CAST<array<ref<char>,1>>(" Version         =             %12s\n"), pack((v121)));
            printf(CAST<array<ref<char>,1>>(" Compile date    =             %12s\n"), pack((v122)));
            printf(CAST<array<ref<char>,1>>("\n Compile options:\n"), pack(()));
            printf(CAST<array<ref<char>,1>>("    CC           = %s\n"), pack((v123)));
            printf(CAST<array<ref<char>,1>>("    CLINK        = %s\n"), pack((v124)));
            printf(CAST<array<ref<char>,1>>("    C_LIB        = %s\n"), pack((v125)));
            printf(CAST<array<ref<char>,1>>("    C_INC        = %s\n"), pack((v126)));
            printf(CAST<array<ref<char>,1>>("    CFLAGS       = %s\n"), pack((v127)));
            printf(CAST<array<ref<char>,1>>("    CLINKFLAGS   = %s\n"), pack((v128)));
            printf(CAST<array<ref<char>,1>>("    RAND         = %s\n"), pack((v129)));
        }(CAST<array<ref<char>,1>>("IS"), CAST<char>('S'), int.shl(1, 16), 0, 0, 10, ( *v7), ( *v8), ((CAST<real<8>>((10*int.shl(1, 16)))/( *v8))/1000000.), CAST<array<ref<char>,1>>("keys ranked"), ( *( *v1).passed_verification), CAST<array<ref<char>,1>>("2.3"), CAST<array<ref<char>,1>>("03 Nov 2010"), CAST<array<ref<char>,1>>("cc"), CAST<array<ref<char>,1>>("cc"), CAST<array<ref<char>,1>>("-lm"), CAST<array<ref<char>,1>>("-I../common"), CAST<array<ref<char>,1>>("-O3 "), CAST<array<ref<char>,1>>("-lm"), CAST<array<ref<char>,1>>("randlc"));
    }

