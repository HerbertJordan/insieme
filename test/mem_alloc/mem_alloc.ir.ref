// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v1, ref<array<array<char,1>,1>> v2){
        decl ref<vector<int<4>,4>> v3 =  var([1, 2, 3, 4]);
        printf(string.as.char.pointer("%d\n"), varlist.pack((4*sizeof(type<int<4>>))));
        decl ref<array<int<4>,1>> v4 =  new(array.create.1D(type<int<4>>, 4*sizeof(type<int<4>>)/sizeof(type<int<4>>)));
        memcpy(ref.to.anyref(v4), ref.to.anyref(v3), 4*sizeof(type<int<4>>));
        for(decl ref<int<4>> v5 =  var(0) .. 4*sizeof(type<int<4>>)/sizeof(type<int<4>>) : 1) {
            printf(string.as.char.pointer("%d, "), varlist.pack((array.ref.elem.1D(v4, v5))));
        };
        printf(string.as.char.pointer("\n"), varlist.pack(()));
         del(v4);
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v1, ref<array<array<char,1>,1>> v2){
        decl ref<vector<int<4>,4>> v3 = ( var([1, 2, 3, 4]));
        printf(string.as.char.pointer("%d\n"), varlist.pack(((4*sizeof(type<int<4>>)))));
        decl ref<array<int<4>,1>> v4 = ( new(array.create.1D(type<int<4>>, ((4*sizeof(type<int<4>>))/sizeof(type<int<4>>)))));
        memcpy(ref.to.anyref(v4), ref.to.anyref(v3), (4*sizeof(type<int<4>>)));
        for(decl ref<int<4>> v5 = ( var(0)) .. ((4*sizeof(type<int<4>>))/sizeof(type<int<4>>)) : 1) {
            printf(string.as.char.pointer("%d, "), varlist.pack((( *array.ref.elem.1D(v4, CAST<uint<4>>(( *v5)))))));
        };
        printf(string.as.char.pointer("\n"), varlist.pack(()));
        ( del(v4));
    }

