// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: vector_type_declaration of __insieme_type_1 <=> vector<int<4>,4> //
typedef struct ___insieme_type_1 { 
    int data[4];
} __insieme_type_1;

// A constructor initializing a vector of the type __insieme_type_1 uniformly
static inline __insieme_type_1 __insieme_type_1_init_uniform(int value) {
	__insieme_type_1 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Prototype for external function: memcpy ... type: ((anyRef,anyRef,uint<8>)->anyRef) //
void* memcpy(void*, void*, unsigned long);
static void* memcpy_wrap(void* _closure, void* var_8, void* var_9, unsigned long var_10) { return memcpy(var_8, var_9, var_10); }

// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	__insieme_type_1 src_array = ((__insieme_type_1){{1, 2, 3, 4}});
	printf("%d\n", (4*sizeof(int)));
	int* dest_array = (((int*){malloc(sizeof(int*)*((4*sizeof(int))/sizeof(int)))}));
	memcpy((void*)(dest_array), (void*)((int*)((*(&src_array)).data)), (4*sizeof(int)));
	for(int var_6 = 0; var_6 < ((4*sizeof(int))/sizeof(int)); var_6 += 1)  { printf("%d, ", (((dest_array)[((unsigned int)(var_6))]))); };
	printf("\n", 0);
	free((dest_array));
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
