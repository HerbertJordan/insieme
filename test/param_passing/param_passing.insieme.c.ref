// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    int i;
};

// start code fragment :: type_declaration_data //
struct data { 
    int x;
    int y;
};

// start code fragment :: Definition of f1 ... type: ((int<4>)->int<4>) //
int f1(int x) { return x; }
static int f1_wrap(void* _closure, int x) { return f1(x); }

// start code fragment :: Definition of f2 ... type: ((ref<array<int<4>,1>>)->int<4>) //
int f2(int* x) { return ((x[0])); }
static int f2_wrap(void* _closure, int* x) { return f2(x); }

// start code fragment :: Definition of f3 ... type: ((ref<struct<i:int<4>>>,ref<array<int<4>,1>>)->int<4>) //
int f3(struct __insieme_globals* var_6, int* x) { return ((*(&((*var_6).i)))++); }
static int f3_wrap(void* _closure, struct __insieme_globals* var_6, int* x) { return f3(var_6, x); }

// start code fragment :: Definition of f4 ... type: ((struct<x:int<4>,y:int<4>>)->int<4>) //
int f4(struct data data) { return (data.x); }
static int f4_wrap(void* _closure, struct data data) { return f4(data); }

// start code fragment :: Definition of f5 ... type: ((ref<array<struct<x:int<4>,y:int<4>>,1>>)->int<4>) //
int f5(struct data* data) { return (*(&(((data[0])).x))); }
static int f5_wrap(void* _closure, struct data* data) { return f5(data); }

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	struct __insieme_globals* var_1 = malloc(sizeof(struct __insieme_globals));
	((*(&((*var_1).i))) = 0);
	int a = 10;
	struct data data = ((struct data){1,
		1
	});
	f1((a));
	f2((&a));
	f3(var_1, (&a));
	f4((data));
	f5((&data));
	printf("a=%d\n", (a));
	return 0;
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
