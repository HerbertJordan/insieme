// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v1, ref<array<array<char,1>,1>> v2){
        decl ref<array<int<4>,1>> v3 =  new(array.create.1D(type<int<4>>, 20000*sizeof(type<int<4>>)/sizeof(type<int<4>>)));
        for(decl int<4> v27 = 0 .. 10 : 1) {
            for(decl int<4> v5 = 0 .. 20000 : 1) 
                array.ref.elem.1D(v3, v5) := rand()%20000
            ;
            recFun v6 {
                v6 = fun(ref<array<int<4>,1>> v7, int<4> v8, int<4> v9){
                    if(v9>v8+1) {
                        decl ref<int<4>> v10 = array.ref.elem.1D(v7, v8);
                        decl ref<int<4>> v11 =  var(v8+1);
                        decl ref<int<4>> v12 =  var(v9);
                        while(v11<v12) {
                            if(array.ref.elem.1D(v7, v11)<=v10) int.postInc(v11) else fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                                decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                                array.ref.elem.1D(v13, 0) := array.ref.elem.1D(v14, 0);
                                array.ref.elem.1D(v14, 0) := v15;
                            }(scalar.to.array(array.ref.elem.1D(v7, v11)), scalar.to.array(array.ref.elem.1D(v7, int.preDec(v12))));
                        };
                        fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                            decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                            array.ref.elem.1D(v13, 0) := array.ref.elem.1D(v14, 0);
                            array.ref.elem.1D(v14, 0) := v15;
                        }(scalar.to.array(array.ref.elem.1D(v7, int.preDec(v11))), scalar.to.array(array.ref.elem.1D(v7, v8)));
                        v6(v7, v8, v11);
                        v6(v7, v12, v9);
                    } else { };
                };
            }(v3, 0, 20000);
            fun(ref<array<int<4>,1>> v20, int<4> v21, int<4> v22){
                for(decl int<4> v24 = 0 .. v22-v21/2 : 1) 
                    fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                        decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                        array.ref.elem.1D(v13, 0) := array.ref.elem.1D(v14, 0);
                        array.ref.elem.1D(v14, 0) := v15;
                    }(scalar.to.array(array.ref.elem.1D(v20, v21+v24)), scalar.to.array(array.ref.elem.1D(v20, v22-v24-1)))
                ;
            }(v3, 0, 20000);
            recFun v6 {
                v6 = fun(ref<array<int<4>,1>> v7, int<4> v8, int<4> v9){
                    if(v9>v8+1) {
                        decl ref<int<4>> v10 = array.ref.elem.1D(v7, v8);
                        decl ref<int<4>> v11 =  var(v8+1);
                        decl ref<int<4>> v12 =  var(v9);
                        while(v11<v12) {
                            if(array.ref.elem.1D(v7, v11)<=v10) int.postInc(v11) else fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                                decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                                array.ref.elem.1D(v13, 0) := array.ref.elem.1D(v14, 0);
                                array.ref.elem.1D(v14, 0) := v15;
                            }(scalar.to.array(array.ref.elem.1D(v7, v11)), scalar.to.array(array.ref.elem.1D(v7, int.preDec(v12))));
                        };
                        fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                            decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                            array.ref.elem.1D(v13, 0) := array.ref.elem.1D(v14, 0);
                            array.ref.elem.1D(v14, 0) := v15;
                        }(scalar.to.array(array.ref.elem.1D(v7, int.preDec(v11))), scalar.to.array(array.ref.elem.1D(v7, v8)));
                        v6(v7, v8, v11);
                        v6(v7, v12, v9);
                    } else { };
                };
            }(v3, 0, 20000);
            printf(string.as.char.pointer("a[N/2] == %d\n"), varlist.pack((array.ref.elem.1D(v3, 20000/2))));
        };
         del(v3);
        return 0;
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v1, ref<array<array<char,1>,1>> v2){
        decl ref<array<int<4>,1>> v3 = ( new(array.create.1D(type<int<4>>, ((CAST<uint<8>>(20000)*sizeof(type<int<4>>))/sizeof(type<int<4>>)))));
        for(decl int<4> v27 = 0 .. 10 : 1) {
            for(decl int<4> v5 = 0 .. 20000 : 1) 
                (array.ref.elem.1D(v3, CAST<uint<4>>(v5)) := (rand()%20000))
            ;
            recFun v6 {
                v6 = fun(ref<array<int<4>,1>> v7, int<4> v8, int<4> v9){
                    if((v9>(v8+1))) {
                        decl ref<int<4>> v10 = array.ref.elem.1D(v7, CAST<uint<4>>(v8));
                        decl ref<int<4>> v11 = ( var((v8+1)));
                        decl ref<int<4>> v12 = ( var(v9));
                        while((( *v11)<( *v12))) {
                            if((( *array.ref.elem.1D(v7, CAST<uint<4>>(( *v11))))<=( *v10))) int.postInc(v11) else fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                                decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                                (array.ref.elem.1D(v13, 0) := ( *array.ref.elem.1D(v14, 0)));
                                (array.ref.elem.1D(v14, 0) := ( *v15));
                            }(scalar.to.array(array.ref.elem.1D(v7, CAST<uint<4>>(( *v11)))), scalar.to.array(array.ref.elem.1D(v7, CAST<uint<4>>(int.preDec(v12)))));
                        };
                        fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                            decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                            (array.ref.elem.1D(v13, 0) := ( *array.ref.elem.1D(v14, 0)));
                            (array.ref.elem.1D(v14, 0) := ( *v15));
                        }(scalar.to.array(array.ref.elem.1D(v7, CAST<uint<4>>(int.preDec(v11)))), scalar.to.array(array.ref.elem.1D(v7, CAST<uint<4>>(v8))));
                        v6(v7, v8, ( *v11));
                        v6(v7, ( *v12), v9);
                    } else { };
                };
            }(v3, 0, 20000);
            fun(ref<array<int<4>,1>> v20, int<4> v21, int<4> v22){
                for(decl int<4> v24 = 0 .. ((v22-v21)/2) : 1) 
                    fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                        decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                        (array.ref.elem.1D(v13, 0) := ( *array.ref.elem.1D(v14, 0)));
                        (array.ref.elem.1D(v14, 0) := ( *v15));
                    }(scalar.to.array(array.ref.elem.1D(v20, CAST<uint<4>>((v21+v24)))), scalar.to.array(array.ref.elem.1D(v20, CAST<uint<4>>(((v22-v24)-1)))))
                ;
            }(v3, 0, 20000);
            recFun v6 {
                v6 = fun(ref<array<int<4>,1>> v7, int<4> v8, int<4> v9){
                    if((v9>(v8+1))) {
                        decl ref<int<4>> v10 = array.ref.elem.1D(v7, CAST<uint<4>>(v8));
                        decl ref<int<4>> v11 = ( var((v8+1)));
                        decl ref<int<4>> v12 = ( var(v9));
                        while((( *v11)<( *v12))) {
                            if((( *array.ref.elem.1D(v7, CAST<uint<4>>(( *v11))))<=( *v10))) int.postInc(v11) else fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                                decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                                (array.ref.elem.1D(v13, 0) := ( *array.ref.elem.1D(v14, 0)));
                                (array.ref.elem.1D(v14, 0) := ( *v15));
                            }(scalar.to.array(array.ref.elem.1D(v7, CAST<uint<4>>(( *v11)))), scalar.to.array(array.ref.elem.1D(v7, CAST<uint<4>>(int.preDec(v12)))));
                        };
                        fun(ref<array<int<4>,1>> v13, ref<array<int<4>,1>> v14){
                            decl ref<int<4>> v15 = array.ref.elem.1D(v13, 0);
                            (array.ref.elem.1D(v13, 0) := ( *array.ref.elem.1D(v14, 0)));
                            (array.ref.elem.1D(v14, 0) := ( *v15));
                        }(scalar.to.array(array.ref.elem.1D(v7, CAST<uint<4>>(int.preDec(v11)))), scalar.to.array(array.ref.elem.1D(v7, CAST<uint<4>>(v8))));
                        v6(v7, v8, ( *v11));
                        v6(v7, ( *v12), v9);
                    } else { };
                };
            }(v3, 0, 20000);
            printf(string.as.char.pointer("a[N/2] == %d\n"), varlist.pack((( *array.ref.elem.1D(v3, CAST<uint<4>>((20000/2)))))));
        };
        ( del(v3));
        return 0;
    }

