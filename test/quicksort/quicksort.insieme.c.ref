// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: Prototype for external function: rand ... type: (()->int<4>) //
int rand();
static int rand_wrap(void* _closure) { return rand(); }

// start code fragment :: Prototype of sortIt ... type: ((ref<array<int<4>,1>>,int<4>,int<4>)->unit) //
void sortIt(int*, int, int);

// start code fragment :: Definition of swapIt ... type: ((ref<array<int<4>,1>>,ref<array<int<4>,1>>)->unit) //
void swapIt(int* a, int* b){
	int t = ((a[0]));
	(((a[0])) = ((b[0])));
	(((b[0])) = (t));
}
static void swapIt_wrap(void* _closure, int* a, int* b) { swapIt(a, b); }

// start code fragment :: Definition of sortIt ... type: ((ref<array<int<4>,1>>,int<4>,int<4>)->unit) //
void sortIt(int* arr, int beg, int end) { if((end>(beg+1))){
	int piv = ((arr[((unsigned int)(beg))]));
	int l = (beg+1);
	int r = end;
	while(((l)<(r)))  { if((((arr[((unsigned int)((l)))]))<=(piv))) { ((l)++); } else  { swapIt((&(arr[((unsigned int)((l)))])), (&(arr[((unsigned int)((--(r))))]))); }; };
	swapIt((&(arr[((unsigned int)((--(l))))])), (&(arr[((unsigned int)(beg))])));
	sortIt(arr, beg, (l));
	sortIt(arr, (r), end);
}; }
static void sortIt_wrap(void* _closure, int* arr, int beg, int end) { sortIt(arr, beg, end); }

// start code fragment :: Definition of reverseIt ... type: ((ref<array<int<4>,1>>,int<4>,int<4>)->unit) //
void reverseIt(int* a, int S, int E) { for(int var_16 = 0; var_16 < ((E-S)/2); var_16 += 1)  { swapIt((&(a[((unsigned int)((S+var_16)))])), (&(a[((unsigned int)(((E-var_16)-1)))]))); }; }
static void reverseIt_wrap(void* _closure, int* a, int S, int E) { reverseIt(a, S, E); }

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	int* a = (((int*){malloc(sizeof(int*)*((((unsigned long)(20000))*sizeof(int))/sizeof(int)))}));
	for(int var_24 = 0; var_24 < 10; var_24 += 1) {
		for(int var_22 = 0; var_22 < 20000; var_22 += 1)  { ((((a)[((unsigned int)(var_22))])) = (rand()%20000)); };
		sortIt((a), 0, 20000);
		reverseIt((a), 0, 20000);
		sortIt((a), 0, 20000);
		printf("a[N/2] == %d\n", (((a)[((unsigned int)((20000/2)))])));
	};
	free((a));
	return 0;
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
