// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0
// --- Entry Point ---

// start code fragment :: Prototype for external function: clock //
long clock();

// start code fragment :: Prototype for external function: atoi //
int atoi();

// start code fragment :: Prototype for external function: printf //
int printf(char*, ...);

// start code fragment :: Prototype for external function: memset //
void* memset(void*, int, unsigned long);

// start code fragment :: Prototype for external function: sin //
double sin(double);

// start code fragment :: Definition of init_func //
double init_func(int x, int y) {
	{
		return (((double)(40))*sin(((double)(((16*((2*x)-1))*y)))));;
	}
}


// start code fragment :: Prototype for external function: pow //
double pow(double, double);

// start code fragment :: struct for job __insieme_expr_0 //
struct __insieme_expr_0 { 
	unsigned structSize;
	unsigned min, max;
	void (*fun)(isbr_JobArgs*);
	// ---- additional captured variables -----
	double* var_59;	 // Variable: v59
	float** var_60;	 // Variable: v60
	float** var_61;	 // Variable: v61
	int* var_62;	 // Variable: v62
	float** var_63;	 // Variable: v63
};

// start code fragment :: Definitions for function type: __insieme_funType_type_1 //
// Abstract prototype for lambdas of type __insieme_funType_type_1
struct __insieme_funType_type_1 { 
    void(*fun)(void*);
    const size_t size;
};

// Type safe function for invoking lambdas of type __insieme_funType_type_1
void call__insieme_funType_type_1(struct __insieme_funType_type_1* lambda) { return lambda->fun(lambda); }

// start code fragment :: Definitions for function type: __insieme_funType_type_2 //
// Abstract prototype for lambdas of type __insieme_funType_type_2
struct __insieme_funType_type_2 { 
    void(*fun)(void*);
    const size_t size;
    double* p0;
    float** p1;
    float** p2;
    int* p3;
    float** p4;
};

// start code fragment :: capture-struct for pfor-body __insieme_expr_4 //
struct capture__insieme_expr_4 {
	int* var_49;
	double* var_45;
	float** var_48;
	float** var_47;
	float** var_46;
};

// start code fragment :: Definitions for function type: __insieme_funType_type_5 //
// Abstract prototype for lambdas of type __insieme_funType_type_5
struct __insieme_funType_type_5 { 
    void(*fun)(void*, int);
    const size_t size;
};

// Type safe function for invoking lambdas of type __insieme_funType_type_5
void call__insieme_funType_type_5(struct __insieme_funType_type_5* lambda, int p1) { return lambda->fun(lambda, p1); }

// start code fragment :: Definitions for function type: __insieme_funType_type_6 //
// Abstract prototype for lambdas of type __insieme_funType_type_6
struct __insieme_funType_type_6 { 
    void(*fun)(void*, int);
    const size_t size;
    int* p0;
    double* p1;
    float** p2;
    float** p3;
    float** p4;
};

// start code fragment :: Definition of __insieme_supp_7 //
void __insieme_supp_7(void* _capture, int var_52) {
	// --------- Captured Stuff - Begin -------------
	int* var_53 = ((struct __insieme_funType_type_6*)_capture)->p0;
	double* var_57 = ((struct __insieme_funType_type_6*)_capture)->p1;
	float** var_54 = ((struct __insieme_funType_type_6*)_capture)->p2;
	float** var_55 = ((struct __insieme_funType_type_6*)_capture)->p3;
	float** var_56 = ((struct __insieme_funType_type_6*)_capture)->p4;
	// --------- Captured Stuff -  End  -------------
	{
		for(int j = 1; j < ((*var_53)-1); j += 1) {
			((((*var_55)[((unsigned int)(((var_52*(*var_53))+(j))))])) = ((float)(((((double)(1))/((double)(4)))*(((double)(((((((*var_54)[((unsigned int)((((var_52-1)*(*var_53))+(j))))]))+(((*var_54)[((unsigned int)((((var_52*(*var_53))+(j))+1)))])))+(((*var_54)[((unsigned int)((((var_52*(*var_53))+(j))-1)))])))+(((*var_54)[((unsigned int)((((var_52+1)*(*var_53))+(j))))])))))-((*var_57)*((double)((((*var_56)[((unsigned int)(((var_52*(*var_53))+(j))))]))))))))));
		};
	}
}


// start code fragment :: function for pfor-body __insieme_expr_4 //
void __insieme_expr_4(const isbr_PForRange range) {
	// ----- captured variables -----
	int* var_49 = ((struct capture__insieme_expr_4*)(range.context))->var_49;
	double* var_45 = ((struct capture__insieme_expr_4*)(range.context))->var_45;
	float** var_48 = ((struct capture__insieme_expr_4*)(range.context))->var_48;
	float** var_47 = ((struct capture__insieme_expr_4*)(range.context))->var_47;
	float** var_46 = ((struct capture__insieme_expr_4*)(range.context))->var_46;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		call__insieme_funType_type_5(((struct __insieme_funType_type_5*)(&((struct __insieme_funType_type_6){&__insieme_supp_7, 0, var_49, var_45, var_48, var_47, var_46}))), __it);
	}
	
}

// start code fragment :: Definition of __insieme_supp_3 //
void __insieme_supp_3(void* _capture) {
	// --------- Captured Stuff - Begin -------------
	double* var_45 = ((struct __insieme_funType_type_2*)_capture)->p0;
	float** var_46 = ((struct __insieme_funType_type_2*)_capture)->p1;
	float** var_47 = ((struct __insieme_funType_type_2*)_capture)->p2;
	int* var_49 = ((struct __insieme_funType_type_2*)_capture)->p3;
	float** var_48 = ((struct __insieme_funType_type_2*)_capture)->p4;
	// --------- Captured Stuff -  End  -------------
	{
		{
			isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){1, ((*var_49)-1), 1, &((struct capture__insieme_expr_4){var_49, var_45, var_48, var_47, var_46})},&__insieme_expr_4);
			isbr_barrier(isbr_getThreadGroup(0));
		};
	}
}


// start code fragment :: function for job __insieme_expr_0 //
void fun__insieme_expr_0(isbr_JobArgs* args) {
	// ----------- Unpacking local scope variables ----------
	// ---------- Unpacking auto-captured variables ---------
	double* var_59 = ((struct __insieme_expr_0*)args)->var_59;
	float** var_60 = ((struct __insieme_expr_0*)args)->var_60;
	float** var_61 = ((struct __insieme_expr_0*)args)->var_61;
	int* var_62 = ((struct __insieme_expr_0*)args)->var_62;
	float** var_63 = ((struct __insieme_expr_0*)args)->var_63;
	// ------------------ Processing Guards -----------------
	// ------------------ Default processing -----------------
	call__insieme_funType_type_1(((struct __insieme_funType_type_1*)(&((struct __insieme_funType_type_2){&__insieme_supp_3, 0, var_59, var_60, var_61, var_62, var_63}))));
}

// start code fragment :: Prototype for external function: memcpy //
void* memcpy(void*, void*, unsigned long);

// start code fragment :: Prototype for external function: sqrt //
double sqrt(double);

// start code fragment :: Definition of main //
int main(int argc, char** argv) {
	{
		long start_t = 0;
		long end_t = 0;
		double setup_time = 0.0;
		double elapsed_time = 0.0;
		((start_t) = clock());
		int N = 650;
		if((argc>1)) {
			((N) = atoi(((argv[((unsigned int)(1))]))));
		};
		int numIter = 100;
		if((argc>2)) {
			((numIter) = atoi(((argv[((unsigned int)(1))]))));
		};
		float* u;
		float* tmp;
		float* f;
		float* res;
		((u) = (malloc(sizeof(float)*((((unsigned long)(((N)*(N))))*sizeof(float))/sizeof(float)))));
		((tmp) = (malloc(sizeof(float)*((((unsigned long)(((N)*(N))))*sizeof(float))/sizeof(float)))));
		((f) = (malloc(sizeof(float)*((((unsigned long)(((N)*(N))))*sizeof(float))/sizeof(float)))));
		((res) = (malloc(sizeof(float)*((((unsigned long)(((N)*(N))))*sizeof(float))/sizeof(float)))));
		if((!(((((bool)(&u))&&((bool)((tmp))))&&((bool)((f))))&&((bool)((res)))))) {
			printf("Error allocating arrays\n", 0);
		};
		memset((u), 0, (((unsigned long)(((N)*(N))))*sizeof(float)));
		memset((f), 0, (((unsigned long)(((N)*(N))))*sizeof(float)));
		for(int i = 0; i < (N); i += 1) for(int j = 0; j < (N); j += 1) {
			((((f)[((unsigned int)((((i)*(N))+(j))))])) = ((float)(init_func((i), (j)))));
		};
		double comm_time = ((double)(0));
		double comp_time = ((double)(0));
		double timer = ((double)(0));
		double resv = 0.0;
		double factor = pow((((double)(1))/((double)((N)))), ((double)(2)));
		((end_t) = clock());
		((setup_time) = (((double)(((end_t)-(start_t))))/((double)(1000000l))));
		((start_t) = clock());
		for(int it = 0; it < (numIter); it += 1) {
			isbr_merge(isbr_parallel(memcpy(malloc(sizeof(struct __insieme_expr_0)),&((struct __insieme_expr_0){sizeof(struct __insieme_expr_0),1,isbr_getMaxThreads(),&fun__insieme_expr_0,&factor,&f,&tmp,&N,&u}),sizeof(struct __insieme_expr_0))));
			memcpy((u), (tmp), (((unsigned long)(((N)*(N))))*sizeof(float)));
			for(int i = 1; i < ((N)-1); i += 1) {
				for(int j = 1; j < ((N)-1); j += 1) {
					((((res)[((unsigned int)((((i)*(N))+(j))))])) = ((((((((f)[((unsigned int)((((i)*(N))+(j))))]))-(((float)(4))*(((u)[((unsigned int)((((i)*(N))+(j))))]))))+(((u)[((unsigned int)(((((i)-1)*(N))+(j))))])))+(((u)[((unsigned int)(((((i)+1)*(N))+(j))))])))+(((u)[((unsigned int)(((((i)*(N))+(j))-1)))])))+(((u)[((unsigned int)(((((i)*(N))+(j))+1)))]))));
				};
			};
			double norm = ((double)(0));
			for(int i = 1; i < ((N)-1); i += 1) {
				for(int j = 1; j < ((N)-1); j += 1) {
					((norm) = ((norm)+pow(((double)((((res)[((unsigned int)((((i)*(N))+(j))))])))), ((double)(2)))));
				};
			};
			((resv) = (sqrt((norm))/((double)(((N)-1)))));
		};
		((end_t) = clock());
		((elapsed_time) = (((double)(((end_t)-(start_t))))/((double)(1000000l))));
		( free(u));
		( free(tmp));
		( free(f));
		( free(res));
		printf("Job Done! - residuo: %lf\n", (resv));
	}
}

