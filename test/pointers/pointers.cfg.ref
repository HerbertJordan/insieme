digraph G {
0[shape=diamond,label="ENTRY"];
1[shape=diamond,label="EXIT"];
2[shape=box,label="[B2]\l0: bool.and(..., bind(){fun{...}(v5)})\lT: IF(...)\l"];
3[shape=box,label="[B3]\l0: printf(..., ...)\l"];
4[shape=box,label="[B4]\l"];
5[shape=box,label="[B5]\l0: string.as.char.pointer(\"SUPER AWESOME\n\")\l"];
6[shape=box,label="[B6]\l0: varlist.pack(())\l"];
8[shape=box,label="[B8]\l0: int.eq(..., 0)\l"];
9[shape=box,label="[B9]\l0: ref.deref(...)\l"];
10[shape=box,label="[B10]\l0: array.ref.elem.1D(..., 0)\l"];
11[shape=box,label="[B11]\l0: ref.deref(v6)\l"];
12[shape=box,label="[B12]\l0: ref.assign(..., 0)\l"];
14[shape=box,label="[B14]\l0: array.ref.elem.1D(..., 0)\l"];
15[shape=box,label="[B15]\l0: ref.deref(v4)\l"];
16[shape=box,label="[B16]\l0: bool.and(..., bind(){fun{...}(v4, v6)})\lT: IF(...)\l"];
17[shape=box,label="[B17]\l0: printf(..., ...)\l"];
18[shape=box,label="[B18]\l"];
19[shape=box,label="[B19]\l0: string.as.char.pointer(\"AWESOME\n\")\l"];
20[shape=box,label="[B20]\l0: varlist.pack(())\l"];
21[shape=box,label="[B21]\l"];
22[shape=box,label="[B22]\l0: ptr.eq(..., ...)\l"];
23[shape=box,label="[B23]\l0: ref.deref(v4)\l"];
24[shape=box,label="[B24]\l0: ref.deref(...)\l"];
25[shape=box,label="[B25]\l0: array.ref.elem.1D(..., 0)\l"];
26[shape=box,label="[B26]\l0: ref.deref(v5)\l"];
27[shape=box,label="[B27]\l0: int.ne(..., ...)\lT: IF(...)\l"];
28[shape=box,label="[B28]\l0: printf(..., ...)\l"];
29[shape=box,label="[B29]\l"];
30[shape=box,label="[B30]\l0: string.as.char.pointer(\"DOES NOT WORK!\n\")\l"];
31[shape=box,label="[B31]\l0: varlist.pack(())\l"];
32[shape=box,label="[B32]\l"];
33[shape=box,label="[B33]\l0: ref.deref(...)\l"];
34[shape=box,label="[B34]\l0: array.ref.elem.1D(..., 0)\l"];
35[shape=box,label="[B35]\l0: ref.deref(...)\l"];
36[shape=box,label="[B36]\l0: array.ref.elem.1D(..., 0)\l"];
37[shape=box,label="[B37]\l0: scalar.to.array(v4)\l"];
38[shape=box,label="[B38]\l0: ref.deref(v3)\l"];
39[shape=box,label="[B39]\l0: bool.or(..., bind(){fun{...}(v4)})\lT: IF(...)\l"];
40[shape=box,label="[B40]\l0: printf(..., ...)\l"];
41[shape=box,label="[B41]\l"];
42[shape=box,label="[B42]\l0: string.as.char.pointer(\"WORKS!\n\")\l"];
43[shape=box,label="[B43]\l0: varlist.pack(())\l"];
44[shape=box,label="[B44]\l"];
45[shape=box,label="[B45]\l0: int.eq(..., ...)\l"];
46[shape=box,label="[B46]\l0: ref.deref(...)\l"];
47[shape=box,label="[B47]\l0: array.ref.elem.1D(..., 0)\l"];
48[shape=box,label="[B48]\l0: ref.deref(v4)\l"];
49[shape=box,label="[B49]\l0: ref.deref(v3)\l"];
50[shape=box,label="[B50]\l0: bool.or(..., bind(){fun{...}(v4)})\lT: IF(...)\l"];
51[shape=box,label="[B51]\l0: printf(..., ...)\l"];
52[shape=box,label="[B52]\l"];
53[shape=box,label="[B53]\l0: string.as.char.pointer(\"DOES NOT CHECK\n\")\l"];
54[shape=box,label="[B54]\l0: varlist.pack(())\l"];
56[shape=box,label="[B56]\l0: bool.not(...)\l"];
57[shape=box,label="[B57]\l0: bool.not(...)\l"];
58[shape=box,label="[B58]\l0: is.null(...)\l"];
59[shape=box,label="[B59]\l0: ref.deref(v4)\l"];
60[shape=box,label="[B60]\l0: bool.and(..., bind(){fun{...}(v4)})\lT: IF(...)\l"];
61[shape=box,label="[B61]\l0: printf(..., ...)\l"];
62[shape=box,label="[B62]\l"];
63[shape=box,label="[B63]\l0: string.as.char.pointer(\"CHECK!\n\")\l"];
64[shape=box,label="[B64]\l0: varlist.pack(())\l"];
66[shape=box,label="[B66]\l0: bool.not(...)\l"];
67[shape=box,label="[B67]\l0: is.null(...)\l"];
68[shape=box,label="[B68]\l0: ref.deref(v4)\l"];
69[shape=box,label="[B69]\l0: ref.assign(v4, ...)\l"];
71[shape=box,label="[B71]\l0: scalar.to.array(v3)\l"];
72[shape=box,label="[B72]\l0: decl v6 = ...\l"];
73[shape=box,label="[B73]\l0: ref.var(...)\l"];
75[shape=box,label="[B75]\l0: ref.deref(...)\l"];
76[shape=box,label="[B76]\l0: array.ref.elem.1D(..., 0)\l"];
77[shape=box,label="[B77]\l0: ref.deref(v5)\l"];
78[shape=box,label="[B78]\l0: decl v5 = ...\l"];
79[shape=box,label="[B79]\l0: ref.var(...)\l"];
81[shape=box,label="[B81]\l0: scalar.to.array(v4)\l"];
82[shape=box,label="[B82]\l0: decl v4 = ...\l"];
83[shape=box,label="[B83]\l0: ref.var(...)\l"];
85[shape=box,label="[B85]\l0: scalar.to.array(v3)\l"];
86[shape=box,label="[B86]\l0: decl v3 = ...\l"];
87[shape=box,label="[B87]\l0: ref.var(666)\l"];
3->1 [label=""];
5->3 [label="0"];
4->5 [label=""];
6->3 [label="1"];
4->6 [label=""];
2->4 [label="true"];
2->1 [label="false"];
8->2 [label="0"];
9->8 [label="0"];
10->9 [label="0"];
11->10 [label="0"];
12->11 [label=""];
14->12 [label="0"];
15->14 [label="0"];
17->15 [label=""];
19->17 [label="0"];
18->19 [label=""];
20->17 [label="1"];
18->20 [label=""];
16->18 [label="true"];
16->15 [label="false"];
22->16 [label="0"];
23->22 [label="0"];
21->23 [label=""];
24->22 [label="1"];
25->24 [label="0"];
26->25 [label="0"];
21->26 [label=""];
28->21 [label=""];
30->28 [label="0"];
29->30 [label=""];
31->28 [label="1"];
29->31 [label=""];
27->29 [label="true"];
27->21 [label="false"];
33->27 [label="0"];
34->33 [label="0"];
35->34 [label="0"];
36->35 [label="0"];
37->36 [label="0"];
32->37 [label=""];
38->27 [label="1"];
32->38 [label=""];
40->32 [label=""];
42->40 [label="0"];
41->42 [label=""];
43->40 [label="1"];
41->43 [label=""];
39->41 [label="true"];
39->32 [label="false"];
45->39 [label="0"];
46->45 [label="0"];
47->46 [label="0"];
48->47 [label="0"];
44->48 [label=""];
49->45 [label="1"];
44->49 [label=""];
51->44 [label=""];
53->51 [label="0"];
52->53 [label=""];
54->51 [label="1"];
52->54 [label=""];
50->52 [label="true"];
50->44 [label="false"];
56->50 [label="0"];
57->56 [label="0"];
58->57 [label="0"];
59->58 [label="0"];
61->59 [label=""];
63->61 [label="0"];
62->63 [label=""];
64->61 [label="1"];
62->64 [label=""];
60->62 [label="true"];
60->59 [label="false"];
66->60 [label="0"];
67->66 [label="0"];
68->67 [label="0"];
69->68 [label=""];
71->69 [label="1"];
72->71 [label=""];
73->72 [label=""];
75->73 [label="0"];
76->75 [label="0"];
77->76 [label="0"];
78->77 [label=""];
79->78 [label=""];
81->79 [label="0"];
82->81 [label=""];
83->82 [label=""];
85->83 [label="0"];
86->85 [label=""];
87->86 [label=""];
0->87 [label=""];
}
