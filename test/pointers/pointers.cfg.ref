digraph G {
0[shape=diamond,label="ENTRY"];
1[shape=diamond,label="EXIT"];
2[shape=box,label="[B2]\l0: bool.and(..., bind(){fun{...}(v5)})\lT: IF(...)\l"];
3[shape=box,label="[B3]\l0: printf(..., ...)\l"];
4[shape=box,label="[B4]\l"];
5[shape=box,label="[B5]\l0: string.as.char.pointer(\"SUPER AWESOME\n\")\l"];
6[shape=box,label="[B6]\l0: varlist.pack(())\l"];
8[shape=box,label="[B8]\l0: int.eq(..., 0)\l"];
9[shape=box,label="[B9]\l0: ref.deref(...)\l"];
10[shape=box,label="[B10]\l0: array.ref.elem.1D(v6, 0)\l"];
11[shape=box,label="[B11]\l0: ref.assign(..., 0)\l"];
13[shape=box,label="[B13]\l0: array.ref.elem.1D(v4, 0)\l"];
14[shape=box,label="[B14]\l0: bool.and(..., bind(){fun{...}(v4, v6)})\lT: IF(...)\l"];
15[shape=box,label="[B15]\l0: printf(..., ...)\l"];
16[shape=box,label="[B16]\l"];
17[shape=box,label="[B17]\l0: string.as.char.pointer(\"AWESOME\n\")\l"];
18[shape=box,label="[B18]\l0: varlist.pack(())\l"];
19[shape=box,label="[B19]\l"];
20[shape=box,label="[B20]\l0: ptr.eq(..., ...)\l"];
21[shape=box,label="[B21]\l0: ref.deref(v4)\l"];
22[shape=box,label="[B22]\l0: ref.deref(...)\l"];
23[shape=box,label="[B23]\l0: array.ref.elem.1D(v5, 0)\l"];
24[shape=box,label="[B24]\l0: int.ne(..., ...)\lT: IF(...)\l"];
25[shape=box,label="[B25]\l0: printf(..., ...)\l"];
26[shape=box,label="[B26]\l"];
27[shape=box,label="[B27]\l0: string.as.char.pointer(\"DOES NOT WORK!\n\")\l"];
28[shape=box,label="[B28]\l0: varlist.pack(())\l"];
29[shape=box,label="[B29]\l"];
30[shape=box,label="[B30]\l0: ref.deref(...)\l"];
31[shape=box,label="[B31]\l0: array.ref.elem.1D(..., 0)\l"];
32[shape=box,label="[B32]\l0: array.ref.elem.1D(..., 0)\l"];
33[shape=box,label="[B33]\l0: scalar.to.array(v4)\l"];
34[shape=box,label="[B34]\l0: ref.deref(v3)\l"];
35[shape=box,label="[B35]\l0: bool.or(..., bind(){fun{...}(v4)})\lT: IF(...)\l"];
36[shape=box,label="[B36]\l0: printf(..., ...)\l"];
37[shape=box,label="[B37]\l"];
38[shape=box,label="[B38]\l0: string.as.char.pointer(\"WORKS!\n\")\l"];
39[shape=box,label="[B39]\l0: varlist.pack(())\l"];
40[shape=box,label="[B40]\l"];
41[shape=box,label="[B41]\l0: int.eq(..., ...)\l"];
42[shape=box,label="[B42]\l0: ref.deref(...)\l"];
43[shape=box,label="[B43]\l0: array.ref.elem.1D(v4, 0)\l"];
44[shape=box,label="[B44]\l0: ref.deref(v3)\l"];
45[shape=box,label="[B45]\l0: bool.or(..., bind(){fun{...}(v4)})\lT: IF(...)\l"];
46[shape=box,label="[B46]\l0: printf(..., ...)\l"];
47[shape=box,label="[B47]\l"];
48[shape=box,label="[B48]\l0: string.as.char.pointer(\"DOES NOT CHECK\n\")\l"];
49[shape=box,label="[B49]\l0: varlist.pack(())\l"];
51[shape=box,label="[B51]\l0: bool.not(...)\l"];
52[shape=box,label="[B52]\l0: bool.not(...)\l"];
53[shape=box,label="[B53]\l0: is.null(...)\l"];
54[shape=box,label="[B54]\l0: ref.deref(v4)\l"];
55[shape=box,label="[B55]\l0: bool.and(..., bind(){fun{...}(v4)})\lT: IF(...)\l"];
56[shape=box,label="[B56]\l0: printf(..., ...)\l"];
57[shape=box,label="[B57]\l"];
58[shape=box,label="[B58]\l0: string.as.char.pointer(\"CHECK!\n\")\l"];
59[shape=box,label="[B59]\l0: varlist.pack(())\l"];
61[shape=box,label="[B61]\l0: bool.not(...)\l"];
62[shape=box,label="[B62]\l0: is.null(...)\l"];
63[shape=box,label="[B63]\l0: ref.deref(v4)\l"];
64[shape=box,label="[B64]\l0: ref.assign(v4, ...)\l"];
66[shape=box,label="[B66]\l0: ref.deref(...)\l"];
67[shape=box,label="[B67]\l0: scalar.to.array(v3)\l"];
68[shape=box,label="[B68]\l0: decl v6 = ...\l"];
69[shape=box,label="[B69]\l0: array.ref.elem.1D(v5, 0)\l"];
71[shape=box,label="[B71]\l0: decl v5 = ...\l"];
72[shape=box,label="[B72]\l0: scalar.to.array(v4)\l"];
74[shape=box,label="[B74]\l0: decl v4 = ...\l"];
75[shape=box,label="[B75]\l0: scalar.to.array(v3)\l"];
77[shape=box,label="[B77]\l0: decl v3 = ...\l"];
78[shape=box,label="[B78]\l0: ref.var(666)\l"];
3->1 [label=""];
5->3 [label="0"];
4->5 [label=""];
6->3 [label="1"];
4->6 [label=""];
2->4 [label="true"];
2->1 [label="false"];
8->2 [label="0"];
9->8 [label="0"];
10->9 [label="0"];
11->10 [label=""];
13->11 [label="0"];
15->13 [label=""];
17->15 [label="0"];
16->17 [label=""];
18->15 [label="1"];
16->18 [label=""];
14->16 [label="true"];
14->13 [label="false"];
20->14 [label="0"];
21->20 [label="0"];
19->21 [label=""];
22->20 [label="1"];
23->22 [label="0"];
19->23 [label=""];
25->19 [label=""];
27->25 [label="0"];
26->27 [label=""];
28->25 [label="1"];
26->28 [label=""];
24->26 [label="true"];
24->19 [label="false"];
30->24 [label="0"];
31->30 [label="0"];
32->31 [label="0"];
33->32 [label="0"];
29->33 [label=""];
34->24 [label="1"];
29->34 [label=""];
36->29 [label=""];
38->36 [label="0"];
37->38 [label=""];
39->36 [label="1"];
37->39 [label=""];
35->37 [label="true"];
35->29 [label="false"];
41->35 [label="0"];
42->41 [label="0"];
43->42 [label="0"];
40->43 [label=""];
44->41 [label="1"];
40->44 [label=""];
46->40 [label=""];
48->46 [label="0"];
47->48 [label=""];
49->46 [label="1"];
47->49 [label=""];
45->47 [label="true"];
45->40 [label="false"];
51->45 [label="0"];
52->51 [label="0"];
53->52 [label="0"];
54->53 [label="0"];
56->54 [label=""];
58->56 [label="0"];
57->58 [label=""];
59->56 [label="1"];
57->59 [label=""];
55->57 [label="true"];
55->54 [label="false"];
61->55 [label="0"];
62->61 [label="0"];
63->62 [label="0"];
64->63 [label=""];
66->64 [label="1"];
67->66 [label="0"];
68->67 [label=""];
69->68 [label=""];
71->69 [label=""];
72->71 [label=""];
74->72 [label=""];
75->74 [label=""];
77->75 [label=""];
78->77 [label=""];
0->78 [label=""];
}
