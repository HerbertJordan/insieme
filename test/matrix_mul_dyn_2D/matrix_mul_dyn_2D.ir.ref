// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<ref<array<ref<array<real<8>,1>>,1>>> v11 =  var(fun(uint<4> v1, uint<4> v2){
            decl ref<ref<array<real<8>,1>>> v3 =  var( new(array.create.1D(type<real<8>>, v1*v2*sizeof(type<real<8>>)/sizeof(type<real<8>>))));
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v4 =  var( new(array.create.1D(type<ref<array<real<8>,1>>>, v1*sizeof(type<array<real<8>,1>>)/sizeof(type<array<real<8>,1>>))));
            array.ref.elem.1D(v4, 0) := v3;
            for(decl uint<4> v6 = 1 .. v1 : 1) {
                array.ref.elem.1D(v4, v6) := scalar.to.array(array.ref.elem.1D(v3, v6*v2));
            };
            return v4;
        }(1000, 1000));
        decl ref<ref<array<ref<array<real<8>,1>>,1>>> v12 =  var(fun(uint<4> v1, uint<4> v2){
            decl ref<ref<array<real<8>,1>>> v3 =  var( new(array.create.1D(type<real<8>>, v1*v2*sizeof(type<real<8>>)/sizeof(type<real<8>>))));
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v4 =  var( new(array.create.1D(type<ref<array<real<8>,1>>>, v1*sizeof(type<array<real<8>,1>>)/sizeof(type<array<real<8>,1>>))));
            array.ref.elem.1D(v4, 0) := v3;
            for(decl uint<4> v6 = 1 .. v1 : 1) {
                array.ref.elem.1D(v4, v6) := scalar.to.array(array.ref.elem.1D(v3, v6*v2));
            };
            return v4;
        }(1000, 1000));
        decl ref<ref<array<ref<array<real<8>,1>>,1>>> v13 =  var(fun(uint<4> v1, uint<4> v2){
            decl ref<ref<array<real<8>,1>>> v3 =  var( new(array.create.1D(type<real<8>>, v1*v2*sizeof(type<real<8>>)/sizeof(type<real<8>>))));
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v4 =  var( new(array.create.1D(type<ref<array<real<8>,1>>>, v1*sizeof(type<array<real<8>,1>>)/sizeof(type<array<real<8>,1>>))));
            array.ref.elem.1D(v4, 0) := v3;
            for(decl uint<4> v6 = 1 .. v1 : 1) {
                array.ref.elem.1D(v4, v6) := scalar.to.array(array.ref.elem.1D(v3, v6*v2));
            };
            return v4;
        }(1000, 1000));
        {
            for(decl int<4> v17 = 0 .. 1000 : 1) {
                for(decl int<4> v16 = 0 .. 1000 : 1) {
                    array.ref.elem.1D(array.ref.elem.1D(v11, v17), v16) := v17*v16;
                };
            };
            for(decl int<4> v25 = 0 .. 1000 : 1) {
                for(decl int<4> v24 = 0 .. 1000 : 1) {
                    array.ref.elem.1D(array.ref.elem.1D(v12, v25), v24) := ite(v25==v24, bind(){fun()return 1()}, bind(){fun()return 0()});
                };
            };
            for(decl int<4> v32 = 0 .. 1000 : 1) {
                for(decl int<4> v31 = 0 .. 1000 : 1) {
                    decl ref<real<8>> v26 =  var(0);
                    for(decl int<4> v30 = 0 .. 1000 : 1) {
                        v26 := v26+array.ref.elem.1D(array.ref.elem.1D(v11, v32), v30)*array.ref.elem.1D(array.ref.elem.1D(v12, v30), v31);
                    };
                    array.ref.elem.1D(array.ref.elem.1D(v13, v32), v31) := v26;
                };
            };
        };
        decl ref<int<4>> v33 =  var(1);
        for(decl int<4> v45 = 0 .. 1000 : 1) {
            for(decl int<4> v38 = 0 .. ite(1000<1000, bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(array.ref.elem.1D(array.ref.elem.1D(v11, v45), v38), array.ref.elem.1D(array.ref.elem.1D(v13, v45), v38))) {
                    v33 := 0;
                } else { };
            };
            for(decl int<4> v44 = ite(1000<1000, bind(){fun()return 1000()}, bind(){fun()return 1000()}) .. ite(1000>1000, bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(array.ref.elem.1D(array.ref.elem.1D(v13, v45), v44), 0)) {
                    v33 := 0;
                } else { };
            };
        };
        printf(string.as.char.pointer("Verification: %s\n"), varlist.pack((ite(int.ne(v33, 0), bind(){fun()return vector.to.array(['O', 'K', '\0'])()}, bind(){fun()return vector.to.array(['E', 'R', 'R', '\0'])()}))));
        fun(ref<array<ref<array<real<8>,1>>,1>> v8){
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v9 =  var(v8);
            {
                 del(array.ref.elem.1D(v9, 0));
                 del(v9);
            };
        }(v11);
        fun(ref<array<ref<array<real<8>,1>>,1>> v8){
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v9 =  var(v8);
            {
                 del(array.ref.elem.1D(v9, 0));
                 del(v9);
            };
        }(v12);
        fun(ref<array<ref<array<real<8>,1>>,1>> v8){
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v9 =  var(v8);
            {
                 del(array.ref.elem.1D(v9, 0));
                 del(v9);
            };
        }(v13);
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<ref<array<ref<array<real<8>,1>>,1>>> v11 = ( var(fun(uint<4> v1, uint<4> v2){
            decl ref<ref<array<real<8>,1>>> v3 = ( var(( new(array.create.1D(type<real<8>>, ((CAST<uint<8>>((v1*v2))*sizeof(type<real<8>>))/sizeof(type<real<8>>)))))));
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v4 = ( var(( new(array.create.1D(type<ref<array<real<8>,1>>>, ((CAST<uint<8>>(v1)*sizeof(type<array<real<8>,1>>))/sizeof(type<array<real<8>,1>>)))))));
            (array.ref.elem.1D(( *v4), CAST<uint<4>>(0)) := ( *v3));
            for(decl uint<4> v6 = CAST<uint<4>>(1) .. v1 : 1) {
                (array.ref.elem.1D(( *v4), v6) := scalar.to.array(array.ref.elem.1D(( *v3), (v6*v2))));
            };
            return ( *v4);
        }(CAST<uint<4>>(1000), CAST<uint<4>>(1000))));
        decl ref<ref<array<ref<array<real<8>,1>>,1>>> v12 = ( var(fun(uint<4> v1, uint<4> v2){
            decl ref<ref<array<real<8>,1>>> v3 = ( var(( new(array.create.1D(type<real<8>>, ((CAST<uint<8>>((v1*v2))*sizeof(type<real<8>>))/sizeof(type<real<8>>)))))));
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v4 = ( var(( new(array.create.1D(type<ref<array<real<8>,1>>>, ((CAST<uint<8>>(v1)*sizeof(type<array<real<8>,1>>))/sizeof(type<array<real<8>,1>>)))))));
            (array.ref.elem.1D(( *v4), CAST<uint<4>>(0)) := ( *v3));
            for(decl uint<4> v6 = CAST<uint<4>>(1) .. v1 : 1) {
                (array.ref.elem.1D(( *v4), v6) := scalar.to.array(array.ref.elem.1D(( *v3), (v6*v2))));
            };
            return ( *v4);
        }(CAST<uint<4>>(1000), CAST<uint<4>>(1000))));
        decl ref<ref<array<ref<array<real<8>,1>>,1>>> v13 = ( var(fun(uint<4> v1, uint<4> v2){
            decl ref<ref<array<real<8>,1>>> v3 = ( var(( new(array.create.1D(type<real<8>>, ((CAST<uint<8>>((v1*v2))*sizeof(type<real<8>>))/sizeof(type<real<8>>)))))));
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v4 = ( var(( new(array.create.1D(type<ref<array<real<8>,1>>>, ((CAST<uint<8>>(v1)*sizeof(type<array<real<8>,1>>))/sizeof(type<array<real<8>,1>>)))))));
            (array.ref.elem.1D(( *v4), CAST<uint<4>>(0)) := ( *v3));
            for(decl uint<4> v6 = CAST<uint<4>>(1) .. v1 : 1) {
                (array.ref.elem.1D(( *v4), v6) := scalar.to.array(array.ref.elem.1D(( *v3), (v6*v2))));
            };
            return ( *v4);
        }(CAST<uint<4>>(1000), CAST<uint<4>>(1000))));
        <m id=4>{
            <m id=1>for(decl int<4> v17 = 0 .. 1000 : 1) {
                for(decl int<4> v16 = 0 .. 1000 : 1) {
                    (array.ref.elem.1D(( *array.ref.elem.1D(( *v11), CAST<uint<4>>(v17))), CAST<uint<4>>(v16)) := CAST<real<8>>((v17*v16)));
                };
            }</m>;
            <m id=2>for(decl int<4> v25 = 0 .. 1000 : 1) {
                for(decl int<4> v24 = 0 .. 1000 : 1) {
                    (array.ref.elem.1D(( *array.ref.elem.1D(( *v12), CAST<uint<4>>(v25))), CAST<uint<4>>(v24)) := CAST<real<8>>(ite((v25==v24), bind(){fun()return 1()}, bind(){fun()return 0()})));
                };
            }</m>;
            <m id=3>for(decl int<4> v32 = 0 .. 1000 : 1) {
                for(decl int<4> v31 = 0 .. 1000 : 1) {
                    decl ref<real<8>> v26 = ( var(CAST<real<8>>(0)));
                    for(decl int<4> v30 = 0 .. 1000 : 1) {
                        (v26 := (( *v26)+(( *array.ref.elem.1D(( *array.ref.elem.1D(( *v11), CAST<uint<4>>(v32))), CAST<uint<4>>(v30)))*( *array.ref.elem.1D(( *array.ref.elem.1D(( *v12), CAST<uint<4>>(v30))), CAST<uint<4>>(v31))))));
                    };
                    (array.ref.elem.1D(( *array.ref.elem.1D(( *v13), CAST<uint<4>>(v32))), CAST<uint<4>>(v31)) := ( *v26));
                };
            }</m>;
        }</m>;
        decl ref<int<4>> v33 = ( var(1));
        for(decl int<4> v45 = 0 .. 1000 : 1) {
            for(decl int<4> v38 = 0 .. ite((1000<1000), bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(( *array.ref.elem.1D(( *array.ref.elem.1D(( *v11), CAST<uint<4>>(v45))), CAST<uint<4>>(v38))), ( *array.ref.elem.1D(( *array.ref.elem.1D(( *v13), CAST<uint<4>>(v45))), CAST<uint<4>>(v38))))) {
                    (v33 := 0);
                } else { };
            };
            for(decl int<4> v44 = ite((1000<1000), bind(){fun()return 1000()}, bind(){fun()return 1000()}) .. ite((1000>1000), bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(( *array.ref.elem.1D(( *array.ref.elem.1D(( *v13), CAST<uint<4>>(v45))), CAST<uint<4>>(v44))), CAST<real<8>>(0))) {
                    (v33 := 0);
                } else { };
            };
        };
        printf(string.as.char.pointer("Verification: %s\n"), varlist.pack((ite(int.ne(( *v33), 0), bind(){fun()return vector.to.array(['O', 'K', '\0'])()}, bind(){fun()return vector.to.array(['E', 'R', 'R', '\0'])()}))));
        fun(ref<array<ref<array<real<8>,1>>,1>> v8){
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v9 = ( var(v8));
            {
                ( del(( *array.ref.elem.1D(( *v9), CAST<uint<4>>(0)))));
                ( del(v9));
            };
        }(( *v11));
        fun(ref<array<ref<array<real<8>,1>>,1>> v8){
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v9 = ( var(v8));
            {
                ( del(( *array.ref.elem.1D(( *v9), CAST<uint<4>>(0)))));
                ( del(v9));
            };
        }(( *v12));
        fun(ref<array<ref<array<real<8>,1>>,1>> v8){
            decl ref<ref<array<ref<array<real<8>,1>>,1>>> v9 = ( var(v8));
            {
                ( del(( *array.ref.elem.1D(( *v9), CAST<uint<4>>(0)))));
                ( del(v9));
            };
        }(( *v13));
    }

