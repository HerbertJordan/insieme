// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v1, array<ref<array<ref<char>,1>>,1> v2){
        decl ref<char> v3 =  var('a');
        decl vector<ref<char>,5> v4 = "Hallo";
        decl vector<vector<ref<char>,3>,5> v5 = [ var("X"),  var("Y"),  var("Z")];
        decl vector<vector<vector<ref<char>,2>,3>,5> v6 = undefined(vector<vector<vector<ref<char>,2>,3>,5>);
        decl ref<array<ref<char>,1>> v7 =  var(v4);
        decl ref<array<ref<array<ref<char>,1>>,1>> v8 =  var(0);
        decl ref<array<ref<array<ref<array<ref<char>,1>>,1>>,1>> v9 =  var(0);
        decl ref<array<ref<vector<ref<char>,3>>,1>> v10 =  var(undefined(array<ref<vector<ref<char>,3>>,1>));
        decl ref<array<ref<array<ref<vector<vector<ref<char>,2>,3>>,1>>,1>> v11 =  var(undefined(array<ref<array<ref<vector<vector<ref<char>,2>,3>>,1>>,1>));
        decl ref<array<ref<array<ref<array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>>,1>>,1>> v12 =  var(undefined(array<ref<array<ref<array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>>,1>>,1>));
        decl ref<array<ref<array<ref<array<ref<vector<ref<char>,3>>,1>>,1>>,1>> v13 =  var(undefined(array<ref<array<ref<array<ref<vector<ref<char>,3>>,1>>,1>>,1>));
        decl ref<array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>> v14 =  var(undefined(array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>));
        decl ref<struct<s1:ref<char>,s2:ref<array<ref<char>,1>>,s3:vector<ref<char>,5>,s4:vector<vector<ref<char>,3>,5>,s5:ref<array<ref<char>,1>>,s6:ref<array<ref<array<ref<char>,1>>,1>>,s7:ref<array<ref<vector<ref<char>,4>>,1>>,s8:ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,s9:ref<array<ref<array<ref<vector<ref<char>,4>>,1>>,1>>,s10:ref<array<ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,1>>>> v15 =  var(undefined(struct<s1:ref<char>,s2:ref<array<ref<char>,1>>,s3:vector<ref<char>,5>,s4:vector<vector<ref<char>,3>,5>,s5:ref<array<ref<char>,1>>,s6:ref<array<ref<array<ref<char>,1>>,1>>,s7:ref<array<ref<vector<ref<char>,4>>,1>>,s8:ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,s9:ref<array<ref<array<ref<vector<ref<char>,4>>,1>>,1>>,s10:ref<array<ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,1>>>));
        v15.s1 := '#';
        printf("size of s %d\n", varlist.pack((sizeof(struct<s1:ref<char>,s2:ref<array<ref<char>,1>>,s3:vector<ref<char>,5>,s4:vector<vector<ref<char>,3>,5>,s5:ref<array<ref<char>,1>>,s6:ref<array<ref<array<ref<char>,1>>,1>>,s7:ref<array<ref<vector<ref<char>,4>>,1>>,s8:ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,s9:ref<array<ref<array<ref<vector<ref<char>,4>>,1>>,1>>,s10:ref<array<ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,1>>>))));
        printf("size of b1 %d\n", varlist.pack((5*sizeof(char))));
        printf("size of b2 %d\n", varlist.pack((5*3*sizeof(char))));
        printf("size of b3 %d\n", varlist.pack((5*3*2*sizeof(char))));
        printf("size of c1 %d\n", varlist.pack((sizeof(array<ref<char>,1>))));
        printf("size of c2 %d\n", varlist.pack((sizeof(array<ref<array<ref<char>,1>>,1>))));
        printf("size of c3 %d\n", varlist.pack((sizeof(array<ref<array<ref<array<ref<char>,1>>,1>>,1>))));
        printf("size of d1 %d\n", varlist.pack((sizeof(array<ref<vector<ref<char>,3>>,1>))));
        printf("size of d2 %d\n", varlist.pack((sizeof(array<ref<array<ref<vector<vector<ref<char>,2>,3>>,1>>,1>))));
        printf("size of d3 %d\n", varlist.pack((sizeof(array<ref<array<ref<array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>>,1>>,1>))));
        printf("size of d4 %d\n", varlist.pack((sizeof(array<ref<array<ref<array<ref<vector<ref<char>,3>>,1>>,1>>,1>))));
        printf("size of d5 %d\n", varlist.pack((sizeof(array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>))));
        printf("Letter Array:   %c\n", varlist.pack((fun(char v16, array<ref<char>,1> v17, array<ref<vector<ref<char>,3>>,1> v18, array<ref<vector<vector<ref<char>,2>,3>>,1> v19){
            return v17[3];
        }(v3, v4, v5, v6))));
        printf("Letter Pointer: %c\n", varlist.pack((fun(char v21, array<ref<char>,1> v22, array<ref<array<ref<char>,1>>,1> v23, array<ref<array<ref<array<ref<char>,1>>,1>>,1> v24){
            return v22[3];
        }(v3, v7, v8, v9))));
        printf("Letter Struct:  %c\n", varlist.pack((fun(struct<s1:ref<char>,s2:ref<array<ref<char>,1>>,s3:vector<ref<char>,5>,s4:vector<vector<ref<char>,3>,5>,s5:ref<array<ref<char>,1>>,s6:ref<array<ref<array<ref<char>,1>>,1>>,s7:ref<array<ref<vector<ref<char>,4>>,1>>,s8:ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,s9:ref<array<ref<array<ref<vector<ref<char>,4>>,1>>,1>>,s10:ref<array<ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,1>>> v26){
            return v26.s1;
        }(v15))));
        decl vector<array<ref<char>,1>,5> v28 = [ var("This"),  var("is"),  var("a"),  var("little"),  var("test")];
        printf("String:  %s\n", varlist.pack((v28[0])));
        printf("String:  %s\n", varlist.pack((v28[1])));
        printf("String:  %s\n", varlist.pack((v28[2])));
        printf("String:  %s\n", varlist.pack((v28[3])));
        printf("String:  %s\n", varlist.pack((v28[4])));
        return 0;
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v1, array<ref<array<ref<char>,1>>,1> v2){
        decl ref<char> v3 = ( var(CAST<char>('a')));
        decl vector<ref<char>,5> v4 = "Hallo";
        decl vector<vector<ref<char>,3>,5> v5 = [( var("X")), ( var("Y")), ( var("Z"))];
        decl vector<vector<vector<ref<char>,2>,3>,5> v6 = undefined(vector<vector<vector<ref<char>,2>,3>,5>);
        decl ref<array<ref<char>,1>> v7 = ( var(v4));
        decl ref<array<ref<array<ref<char>,1>>,1>> v8 = ( var(CAST<array<ref<array<ref<char>,1>>,1>>(0)));
        decl ref<array<ref<array<ref<array<ref<char>,1>>,1>>,1>> v9 = ( var(CAST<array<ref<array<ref<array<ref<char>,1>>,1>>,1>>(0)));
        decl ref<array<ref<vector<ref<char>,3>>,1>> v10 = ( var(undefined(array<ref<vector<ref<char>,3>>,1>)));
        decl ref<array<ref<array<ref<vector<vector<ref<char>,2>,3>>,1>>,1>> v11 = ( var(undefined(array<ref<array<ref<vector<vector<ref<char>,2>,3>>,1>>,1>)));
        decl ref<array<ref<array<ref<array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>>,1>>,1>> v12 = ( var(undefined(array<ref<array<ref<array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>>,1>>,1>)));
        decl ref<array<ref<array<ref<array<ref<vector<ref<char>,3>>,1>>,1>>,1>> v13 = ( var(undefined(array<ref<array<ref<array<ref<vector<ref<char>,3>>,1>>,1>>,1>)));
        decl ref<array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>> v14 = ( var(undefined(array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>)));
        decl ref<struct<s1:ref<char>,s2:ref<array<ref<char>,1>>,s3:vector<ref<char>,5>,s4:vector<vector<ref<char>,3>,5>,s5:ref<array<ref<char>,1>>,s6:ref<array<ref<array<ref<char>,1>>,1>>,s7:ref<array<ref<vector<ref<char>,4>>,1>>,s8:ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,s9:ref<array<ref<array<ref<vector<ref<char>,4>>,1>>,1>>,s10:ref<array<ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,1>>>> v15 = ( var(undefined(struct<s1:ref<char>,s2:ref<array<ref<char>,1>>,s3:vector<ref<char>,5>,s4:vector<vector<ref<char>,3>,5>,s5:ref<array<ref<char>,1>>,s6:ref<array<ref<array<ref<char>,1>>,1>>,s7:ref<array<ref<vector<ref<char>,4>>,1>>,s8:ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,s9:ref<array<ref<array<ref<vector<ref<char>,4>>,1>>,1>>,s10:ref<array<ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,1>>>)));
        (( *v15).s1 := CAST<char>('#'));
        printf("size of s %d\n", varlist.pack((sizeof(struct<s1:ref<char>,s2:ref<array<ref<char>,1>>,s3:vector<ref<char>,5>,s4:vector<vector<ref<char>,3>,5>,s5:ref<array<ref<char>,1>>,s6:ref<array<ref<array<ref<char>,1>>,1>>,s7:ref<array<ref<vector<ref<char>,4>>,1>>,s8:ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,s9:ref<array<ref<array<ref<vector<ref<char>,4>>,1>>,1>>,s10:ref<array<ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,1>>>))));
        printf("size of b1 %d\n", varlist.pack(((5*sizeof(char)))));
        printf("size of b2 %d\n", varlist.pack(((5*(3*sizeof(char))))));
        printf("size of b3 %d\n", varlist.pack(((5*(3*(2*sizeof(char)))))));
        printf("size of c1 %d\n", varlist.pack((sizeof(array<ref<char>,1>))));
        printf("size of c2 %d\n", varlist.pack((sizeof(array<ref<array<ref<char>,1>>,1>))));
        printf("size of c3 %d\n", varlist.pack((sizeof(array<ref<array<ref<array<ref<char>,1>>,1>>,1>))));
        printf("size of d1 %d\n", varlist.pack((sizeof(array<ref<vector<ref<char>,3>>,1>))));
        printf("size of d2 %d\n", varlist.pack((sizeof(array<ref<array<ref<vector<vector<ref<char>,2>,3>>,1>>,1>))));
        printf("size of d3 %d\n", varlist.pack((sizeof(array<ref<array<ref<array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>>,1>>,1>))));
        printf("size of d4 %d\n", varlist.pack((sizeof(array<ref<array<ref<array<ref<vector<ref<char>,3>>,1>>,1>>,1>))));
        printf("size of d5 %d\n", varlist.pack((sizeof(array<ref<vector<vector<vector<ref<char>,1>,2>,3>>,1>))));
        printf("Letter Array:   %c\n", varlist.pack((CAST<int<4>>(fun(char v16, array<ref<char>,1> v17, array<ref<vector<ref<char>,3>>,1> v18, array<ref<vector<vector<ref<char>,2>,3>>,1> v19){
            return ( *(v17[CAST<uint<4>>(3)]));
        }(( *v3), v4, v5, v6)))));
        printf("Letter Pointer: %c\n", varlist.pack((CAST<int<4>>(fun(char v21, array<ref<char>,1> v22, array<ref<array<ref<char>,1>>,1> v23, array<ref<array<ref<array<ref<char>,1>>,1>>,1> v24){
            return ( *(v22[CAST<uint<4>>(3)]));
        }(( *v3), ( *v7), ( *v8), ( *v9))))));
        printf("Letter Struct:  %c\n", varlist.pack((CAST<int<4>>(fun(struct<s1:ref<char>,s2:ref<array<ref<char>,1>>,s3:vector<ref<char>,5>,s4:vector<vector<ref<char>,3>,5>,s5:ref<array<ref<char>,1>>,s6:ref<array<ref<array<ref<char>,1>>,1>>,s7:ref<array<ref<vector<ref<char>,4>>,1>>,s8:ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,s9:ref<array<ref<array<ref<vector<ref<char>,4>>,1>>,1>>,s10:ref<array<ref<array<ref<vector<vector<ref<char>,3>,4>>,1>>,1>>> v26){
            return ( *v26.s1);
        }(( *v15))))));
        decl vector<array<ref<char>,1>,5> v28 = [( var("This")), ( var("is")), ( var("a")), ( var("little")), ( var("test"))];
        printf("String:  %s\n", varlist.pack(((v28[CAST<uint<4>>(0)]))));
        printf("String:  %s\n", varlist.pack(((v28[CAST<uint<4>>(1)]))));
        printf("String:  %s\n", varlist.pack(((v28[CAST<uint<4>>(2)]))));
        printf("String:  %s\n", varlist.pack(((v28[CAST<uint<4>>(3)]))));
        printf("String:  %s\n", varlist.pack(((v28[CAST<uint<4>>(4)]))));
        return 0;
    }

