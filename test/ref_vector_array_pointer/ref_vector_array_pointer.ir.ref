// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v13, ref<array<ref<array<char,1>>,1>> v14){
        decl ref<char> v15 =  var('a');
        decl ref<vector<char,6>> v16 =  var(['H', 'a', 'l', 'l', 'o', ...]);
        decl ref<vector<vector<char,2>,3>> v17 =  var([['X', '\0'], ['Y', '\0'], ['Z', '\0']]);
        decl ref<vector<vector<vector<char,2>,3>,5>> v18 =  var(undefined(type<vector<vector<vector<char,2>,3>,5>>));
        decl ref<ref<array<char,1>>> v19 =  var(ref.vector.to.ref.array(v16));
        decl ref<ref<array<ref<array<char,1>>,1>>> v20 =  var(get.null(type<array<ref<array<char,1>>,1>>));
        decl ref<ref<array<ref<array<ref<array<char,1>>,1>>,1>>> v21 =  var(get.null(type<array<ref<array<ref<array<char,1>>,1>>,1>>));
        decl ref<ref<array<vector<char,3>,1>>> v22 =  var(undefined(type<ref<array<vector<char,3>,1>>>));
        decl ref<ref<array<ref<array<vector<vector<char,2>,3>,1>>,1>>> v23 =  var(undefined(type<ref<array<ref<array<vector<vector<char,2>,3>,1>>,1>>>));
        decl ref<ref<array<ref<array<ref<array<vector<vector<vector<char,1>,2>,3>,1>>,1>>,1>>> v24 =  var(undefined(type<ref<array<ref<array<ref<array<vector<vector<vector<char,1>,2>,3>,1>>,1>>,1>>>));
        decl ref<ref<array<ref<array<ref<array<vector<char,3>,1>>,1>>,1>>> v25 =  var(undefined(type<ref<array<ref<array<ref<array<vector<char,3>,1>>,1>>,1>>>));
        decl ref<ref<array<vector<vector<vector<char,1>,2>,3>,1>>> v26 =  var(undefined(type<ref<array<vector<vector<vector<char,1>,2>,3>,1>>>));
        decl ref<vector<ref<array<char,1>>,3>> v27 =  var(undefined(type<vector<ref<array<char,1>>,3>>));
        decl ref<vector<vector<ref<array<ref<array<char,1>>,1>>,3>,2>> v28 =  var(undefined(type<vector<vector<ref<array<ref<array<char,1>>,1>>,3>,2>>));
        decl ref<vector<vector<vector<ref<array<ref<array<ref<array<char,1>>,1>>,1>>,3>,2>,1>> v29 =  var(undefined(type<vector<vector<vector<ref<array<ref<array<ref<array<char,1>>,1>>,1>>,3>,2>,1>>));
        decl ref<struct<s1:char,s2:ref<array<char,1>>,s3:vector<char,5>,s4:vector<vector<char,3>,5>,s5:ref<array<char,1>>,s6:ref<array<ref<array<char,1>>,1>>,s7:ref<array<vector<char,4>,1>>,s8:ref<array<vector<vector<char,3>,4>,1>>,s9:ref<array<ref<array<vector<char,4>,1>>,1>>,s10:ref<array<ref<array<vector<vector<char,3>,4>,1>>,1>>>> v30 =  var(undefined(type<struct<s1:char,s2:ref<array<char,1>>,s3:vector<char,5>,s4:vector<vector<char,3>,5>,s5:ref<array<char,1>>,s6:ref<array<ref<array<char,1>>,1>>,s7:ref<array<vector<char,4>,1>>,s8:ref<array<vector<vector<char,3>,4>,1>>,s9:ref<array<ref<array<vector<char,4>,1>>,1>>,s10:ref<array<ref<array<vector<vector<char,3>,4>,1>>,1>>>>));
        composite.ref.elem(v30, s1, type<char>) := '#';
        printf(string.as.char.pointer("size of b1 %d\n"), varlist.pack((6*sizeof(type<char>))));
        printf(string.as.char.pointer("size of b2 %d\n"), varlist.pack((3*2*sizeof(type<char>))));
        printf(string.as.char.pointer("size of b3 %d\n"), varlist.pack((5*3*2*sizeof(type<char>))));
        printf(string.as.char.pointer("Letter Array:   %c\n"), varlist.pack((fun(char v1, ref<array<char,1>> v2, ref<array<vector<char,2>,1>> v3, ref<array<vector<vector<char,2>,3>,1>> v4){
            return array.ref.elem.1D(v2, 3);
        }(v15, ref.vector.to.ref.array(v16), ref.vector.to.ref.array(v17), ref.vector.to.ref.array(v18)))));
        printf(string.as.char.pointer("Letter Pointer: %c\n"), varlist.pack((fun(char v6, ref<array<char,1>> v7, ref<array<ref<array<char,1>>,1>> v8, ref<array<ref<array<ref<array<char,1>>,1>>,1>> v9){
            return array.ref.elem.1D(v7, 3);
        }(v15, v19, v20, v21))));
        printf(string.as.char.pointer("Letter Struct:  %c\n"), varlist.pack((fun(struct<s1:char,s2:ref<array<char,1>>,s3:vector<char,5>,s4:vector<vector<char,3>,5>,s5:ref<array<char,1>>,s6:ref<array<ref<array<char,1>>,1>>,s7:ref<array<vector<char,4>,1>>,s8:ref<array<vector<vector<char,3>,4>,1>>,s9:ref<array<ref<array<vector<char,4>,1>>,1>>,s10:ref<array<ref<array<vector<vector<char,3>,4>,1>>,1>>> v11){
            return composite.member.access(v11, s1, type<char>);
        }(v30))));
        decl ref<vector<ref<array<char,1>>,5>> v31 =  var([ var(vector.to.array(['T', 'h', 'i', 's', '\0'])),  var(vector.to.array(['i', 's', '\0'])),  var(vector.to.array(['a', '\0'])),  var(vector.to.array(['l', 'i', 't', 't', 'l', ...])),  var(vector.to.array(['t', 'e', 's', 't', '\0']))]);
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((vector.ref.elem(v31, 0))));
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((vector.ref.elem(v31, 1))));
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((vector.ref.elem(v31, 2))));
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((vector.ref.elem(v31, 3))));
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((vector.ref.elem(v31, 4))));
        return 0;
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v13, ref<array<ref<array<char,1>>,1>> v14){
        decl ref<char> v15 = ( var('a'));
        decl ref<vector<char,6>> v16 = ( var(['H', 'a', 'l', 'l', 'o', ...]));
        decl ref<vector<vector<char,2>,3>> v17 = ( var([['X', '\0'], ['Y', '\0'], ['Z', '\0']]));
        decl ref<vector<vector<vector<char,2>,3>,5>> v18 = ( var(undefined(type<vector<vector<vector<char,2>,3>,5>>)));
        decl ref<ref<array<char,1>>> v19 = ( var(ref.vector.to.ref.array(v16)));
        decl ref<ref<array<ref<array<char,1>>,1>>> v20 = ( var(get.null(type<array<ref<array<char,1>>,1>>)));
        decl ref<ref<array<ref<array<ref<array<char,1>>,1>>,1>>> v21 = ( var(get.null(type<array<ref<array<ref<array<char,1>>,1>>,1>>)));
        decl ref<ref<array<vector<char,3>,1>>> v22 = ( var(undefined(type<ref<array<vector<char,3>,1>>>)));
        decl ref<ref<array<ref<array<vector<vector<char,2>,3>,1>>,1>>> v23 = ( var(undefined(type<ref<array<ref<array<vector<vector<char,2>,3>,1>>,1>>>)));
        decl ref<ref<array<ref<array<ref<array<vector<vector<vector<char,1>,2>,3>,1>>,1>>,1>>> v24 = ( var(undefined(type<ref<array<ref<array<ref<array<vector<vector<vector<char,1>,2>,3>,1>>,1>>,1>>>)));
        decl ref<ref<array<ref<array<ref<array<vector<char,3>,1>>,1>>,1>>> v25 = ( var(undefined(type<ref<array<ref<array<ref<array<vector<char,3>,1>>,1>>,1>>>)));
        decl ref<ref<array<vector<vector<vector<char,1>,2>,3>,1>>> v26 = ( var(undefined(type<ref<array<vector<vector<vector<char,1>,2>,3>,1>>>)));
        decl ref<vector<ref<array<char,1>>,3>> v27 = ( var(undefined(type<vector<ref<array<char,1>>,3>>)));
        decl ref<vector<vector<ref<array<ref<array<char,1>>,1>>,3>,2>> v28 = ( var(undefined(type<vector<vector<ref<array<ref<array<char,1>>,1>>,3>,2>>)));
        decl ref<vector<vector<vector<ref<array<ref<array<ref<array<char,1>>,1>>,1>>,3>,2>,1>> v29 = ( var(undefined(type<vector<vector<vector<ref<array<ref<array<ref<array<char,1>>,1>>,1>>,3>,2>,1>>)));
        decl ref<struct<s1:char,s2:ref<array<char,1>>,s3:vector<char,5>,s4:vector<vector<char,3>,5>,s5:ref<array<char,1>>,s6:ref<array<ref<array<char,1>>,1>>,s7:ref<array<vector<char,4>,1>>,s8:ref<array<vector<vector<char,3>,4>,1>>,s9:ref<array<ref<array<vector<char,4>,1>>,1>>,s10:ref<array<ref<array<vector<vector<char,3>,4>,1>>,1>>>> v30 = ( var(undefined(type<struct<s1:char,s2:ref<array<char,1>>,s3:vector<char,5>,s4:vector<vector<char,3>,5>,s5:ref<array<char,1>>,s6:ref<array<ref<array<char,1>>,1>>,s7:ref<array<vector<char,4>,1>>,s8:ref<array<vector<vector<char,3>,4>,1>>,s9:ref<array<ref<array<vector<char,4>,1>>,1>>,s10:ref<array<ref<array<vector<vector<char,3>,4>,1>>,1>>>>)));
        (composite.ref.elem(v30, s1, type<char>) := '#');
        printf(string.as.char.pointer("size of b1 %d\n"), varlist.pack(((6*sizeof(type<char>)))));
        printf(string.as.char.pointer("size of b2 %d\n"), varlist.pack(((3*(2*sizeof(type<char>))))));
        printf(string.as.char.pointer("size of b3 %d\n"), varlist.pack(((5*(3*(2*sizeof(type<char>)))))));
        printf(string.as.char.pointer("Letter Array:   %c\n"), varlist.pack((CAST<int<4>>(fun(char v1, ref<array<char,1>> v2, ref<array<vector<char,2>,1>> v3, ref<array<vector<vector<char,2>,3>,1>> v4){
            return ( *array.ref.elem.1D(v2, CAST<uint<4>>(3)));
        }(( *v15), ref.vector.to.ref.array(v16), ref.vector.to.ref.array(v17), ref.vector.to.ref.array(v18))))));
        printf(string.as.char.pointer("Letter Pointer: %c\n"), varlist.pack((CAST<int<4>>(fun(char v6, ref<array<char,1>> v7, ref<array<ref<array<char,1>>,1>> v8, ref<array<ref<array<ref<array<char,1>>,1>>,1>> v9){
            return ( *array.ref.elem.1D(v7, CAST<uint<4>>(3)));
        }(( *v15), ( *v19), ( *v20), ( *v21))))));
        printf(string.as.char.pointer("Letter Struct:  %c\n"), varlist.pack((CAST<int<4>>(fun(struct<s1:char,s2:ref<array<char,1>>,s3:vector<char,5>,s4:vector<vector<char,3>,5>,s5:ref<array<char,1>>,s6:ref<array<ref<array<char,1>>,1>>,s7:ref<array<vector<char,4>,1>>,s8:ref<array<vector<vector<char,3>,4>,1>>,s9:ref<array<ref<array<vector<char,4>,1>>,1>>,s10:ref<array<ref<array<vector<vector<char,3>,4>,1>>,1>>> v11){
            return composite.member.access(v11, s1, type<char>);
        }(( *v30))))));
        decl ref<vector<ref<array<char,1>>,5>> v31 = ( var([( var(vector.to.array(['T', 'h', 'i', 's', '\0']))), ( var(vector.to.array(['i', 's', '\0']))), ( var(vector.to.array(['a', '\0']))), ( var(vector.to.array(['l', 'i', 't', 't', 'l', ...]))), ( var(vector.to.array(['t', 'e', 's', 't', '\0'])))]));
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((( *vector.ref.elem(v31, CAST<uint<4>>(0))))));
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((( *vector.ref.elem(v31, CAST<uint<4>>(1))))));
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((( *vector.ref.elem(v31, CAST<uint<4>>(2))))));
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((( *vector.ref.elem(v31, CAST<uint<4>>(3))))));
        printf(string.as.char.pointer("String:  %s\n"), varlist.pack((( *vector.ref.elem(v31, CAST<uint<4>>(4))))));
        return 0;
    }

