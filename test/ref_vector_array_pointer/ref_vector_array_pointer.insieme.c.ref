// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: vector_type_declaration of __insieme_type_1 <=> vector<char,6> //
typedef struct ___insieme_type_1 { 
    char data[6];
} __insieme_type_1;

// A constructor initializing a vector of the type __insieme_type_1 uniformly
static inline __insieme_type_1 __insieme_type_1_init_uniform(char value) {
	__insieme_type_1 res;
	for (int i=0; i<6;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_3 <=> vector<char,2> //
typedef struct ___insieme_type_3 { 
    char data[2];
} __insieme_type_3;

// A constructor initializing a vector of the type __insieme_type_3 uniformly
static inline __insieme_type_3 __insieme_type_3_init_uniform(char value) {
	__insieme_type_3 res;
	for (int i=0; i<2;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_2 <=> vector<vector<char,2>,3> //
typedef struct ___insieme_type_2 { 
    __insieme_type_3 data[3];
} __insieme_type_2;

// A constructor initializing a vector of the type __insieme_type_2 uniformly
static inline __insieme_type_2 __insieme_type_2_init_uniform(__insieme_type_3 value) {
	__insieme_type_2 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_4 <=> vector<vector<vector<char,2>,3>,5> //
typedef struct ___insieme_type_4 { 
    __insieme_type_2 data[5];
} __insieme_type_4;

// A constructor initializing a vector of the type __insieme_type_4 uniformly
static inline __insieme_type_4 __insieme_type_4_init_uniform(__insieme_type_2 value) {
	__insieme_type_4 res;
	for (int i=0; i<5;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_5 <=> vector<char,3> //
typedef struct ___insieme_type_5 { 
    char data[3];
} __insieme_type_5;

// A constructor initializing a vector of the type __insieme_type_5 uniformly
static inline __insieme_type_5 __insieme_type_5_init_uniform(char value) {
	__insieme_type_5 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_8 <=> vector<char,1> //
typedef struct ___insieme_type_8 { 
    char data[1];
} __insieme_type_8;

// A constructor initializing a vector of the type __insieme_type_8 uniformly
static inline __insieme_type_8 __insieme_type_8_init_uniform(char value) {
	__insieme_type_8 res;
	for (int i=0; i<1;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_7 <=> vector<vector<char,1>,2> //
typedef struct ___insieme_type_7 { 
    __insieme_type_8 data[2];
} __insieme_type_7;

// A constructor initializing a vector of the type __insieme_type_7 uniformly
static inline __insieme_type_7 __insieme_type_7_init_uniform(__insieme_type_8 value) {
	__insieme_type_7 res;
	for (int i=0; i<2;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_6 <=> vector<vector<vector<char,1>,2>,3> //
typedef struct ___insieme_type_6 { 
    __insieme_type_7 data[3];
} __insieme_type_6;

// A constructor initializing a vector of the type __insieme_type_6 uniformly
static inline __insieme_type_6 __insieme_type_6_init_uniform(__insieme_type_7 value) {
	__insieme_type_6 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_9 <=> vector<ref<array<char,1>>,3> //
typedef struct ___insieme_type_9 { 
    char* data[3];
} __insieme_type_9;

// A constructor initializing a vector of the type __insieme_type_9 uniformly
static inline __insieme_type_9 __insieme_type_9_init_uniform(char* value) {
	__insieme_type_9 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_11 <=> vector<ref<array<ref<array<char,1>>,1>>,3> //
typedef struct ___insieme_type_11 { 
    char** data[3];
} __insieme_type_11;

// A constructor initializing a vector of the type __insieme_type_11 uniformly
static inline __insieme_type_11 __insieme_type_11_init_uniform(char** value) {
	__insieme_type_11 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_10 <=> vector<vector<ref<array<ref<array<char,1>>,1>>,3>,2> //
typedef struct ___insieme_type_10 { 
    __insieme_type_11 data[2];
} __insieme_type_10;

// A constructor initializing a vector of the type __insieme_type_10 uniformly
static inline __insieme_type_10 __insieme_type_10_init_uniform(__insieme_type_11 value) {
	__insieme_type_10 res;
	for (int i=0; i<2;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_14 <=> vector<ref<array<ref<array<ref<array<char,1>>,1>>,1>>,3> //
typedef struct ___insieme_type_14 { 
    char*** data[3];
} __insieme_type_14;

// A constructor initializing a vector of the type __insieme_type_14 uniformly
static inline __insieme_type_14 __insieme_type_14_init_uniform(char*** value) {
	__insieme_type_14 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_13 <=> vector<vector<ref<array<ref<array<ref<array<char,1>>,1>>,1>>,3>,2> //
typedef struct ___insieme_type_13 { 
    __insieme_type_14 data[2];
} __insieme_type_13;

// A constructor initializing a vector of the type __insieme_type_13 uniformly
static inline __insieme_type_13 __insieme_type_13_init_uniform(__insieme_type_14 value) {
	__insieme_type_13 res;
	for (int i=0; i<2;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_12 <=> vector<vector<vector<ref<array<ref<array<ref<array<char,1>>,1>>,1>>,3>,2>,1> //
typedef struct ___insieme_type_12 { 
    __insieme_type_13 data[1];
} __insieme_type_12;

// A constructor initializing a vector of the type __insieme_type_12 uniformly
static inline __insieme_type_12 __insieme_type_12_init_uniform(__insieme_type_13 value) {
	__insieme_type_12 res;
	for (int i=0; i<1;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_15 <=> vector<char,5> //
typedef struct ___insieme_type_15 { 
    char data[5];
} __insieme_type_15;

// A constructor initializing a vector of the type __insieme_type_15 uniformly
static inline __insieme_type_15 __insieme_type_15_init_uniform(char value) {
	__insieme_type_15 res;
	for (int i=0; i<5;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_16 <=> vector<vector<char,3>,5> //
typedef struct ___insieme_type_16 { 
    __insieme_type_5 data[5];
} __insieme_type_16;

// A constructor initializing a vector of the type __insieme_type_16 uniformly
static inline __insieme_type_16 __insieme_type_16_init_uniform(__insieme_type_5 value) {
	__insieme_type_16 res;
	for (int i=0; i<5;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_17 <=> vector<char,4> //
typedef struct ___insieme_type_17 { 
    char data[4];
} __insieme_type_17;

// A constructor initializing a vector of the type __insieme_type_17 uniformly
static inline __insieme_type_17 __insieme_type_17_init_uniform(char value) {
	__insieme_type_17 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_18 <=> vector<vector<char,3>,4> //
typedef struct ___insieme_type_18 { 
    __insieme_type_5 data[4];
} __insieme_type_18;

// A constructor initializing a vector of the type __insieme_type_18 uniformly
static inline __insieme_type_18 __insieme_type_18_init_uniform(__insieme_type_5 value) {
	__insieme_type_18 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: type_declaration_Data //
struct Data { 
    char s1;
    char* s2;
    __insieme_type_15 s3;
    __insieme_type_16 s4;
    char* s5;
    char** s6;
    __insieme_type_17* s7;
    __insieme_type_18* s8;
    __insieme_type_17** s9;
    __insieme_type_18** s10;
};

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of funArray ... type: ((char,ref<array<char,1>>,ref<array<vector<char,2>,1>>,ref<array<vector<vector<char,2>,3>,1>>)->char) //
char funArray(char a, char* b, __insieme_type_3* c, __insieme_type_2* d) { return ((b[((unsigned int)(3))])); }
static char funArray_wrap(void* _closure, char a, char* b, __insieme_type_3* c, __insieme_type_2* d) { return funArray(a, b, c, d); }

// start code fragment :: Definition of funPointer ... type: ((char,ref<array<char,1>>,ref<array<ref<array<char,1>>,1>>,ref<array<ref<array<ref<array<char,1>>,1>>,1>>)->char) //
char funPointer(char a, char* b, char** c, char*** d) { return ((b[((unsigned int)(3))])); }
static char funPointer_wrap(void* _closure, char a, char* b, char** c, char*** d) { return funPointer(a, b, c, d); }

// start code fragment :: Definition of funStruct ... type: ((struct<s1:char,s2:ref<array<char,1>>,s3:vector<char,5>,s4:vector<vector<char,3>,5>,s5:ref<array<char,1>>,s6:ref<array<ref<array<char,1>>,1>>,s7:ref<array<vector<char,4>,1>>,s8:ref<array<vector<vector<char,3>,4>,1>>,s9:ref<array<ref<array<vector<char,4>,1>>,1>>,s10:ref<array<ref<array<vector<vector<char,3>,4>,1>>,1>>>)->char) //
char funStruct(struct Data data) { return (data.s1); }
static char funStruct_wrap(void* _closure, struct Data data) { return funStruct(data); }

// start code fragment :: vector_type_declaration of __insieme_type_19 <=> vector<ref<array<char,1>>,5> //
typedef struct ___insieme_type_19 { 
    char* data[5];
} __insieme_type_19;

// A constructor initializing a vector of the type __insieme_type_19 uniformly
static inline __insieme_type_19 __insieme_type_19_init_uniform(char* value) {
	__insieme_type_19 res;
	for (int i=0; i<5;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_20 <=> vector<char,7> //
typedef struct ___insieme_type_20 { 
    char data[7];
} __insieme_type_20;

// A constructor initializing a vector of the type __insieme_type_20 uniformly
static inline __insieme_type_20 __insieme_type_20_init_uniform(char value) {
	__insieme_type_20 res;
	for (int i=0; i<7;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	char a1 = 'a';
	__insieme_type_1 b1 = ((__insieme_type_1){{'H', 'a', 'l', 'l', 'o', '\0'}});
	__insieme_type_2 b2 = ((__insieme_type_2){{((__insieme_type_3){{'X', '\0'}}), ((__insieme_type_3){{'Y', '\0'}}), ((__insieme_type_3){{'Z', '\0'}})}});
	__insieme_type_4 b3;
	char* c1 = (((char*){(b1).data}));
	char** c2 = 0;
	char*** c3 = 0;
	__insieme_type_5* d1;
	__insieme_type_2** d2;
	__insieme_type_6*** d3;
	__insieme_type_5*** d4;
	__insieme_type_6* d5;
	__insieme_type_9 e1;
	__insieme_type_10 e2;
	__insieme_type_12 e3;
	struct Data s;
	((*(&((s).s1))) = '#');
	printf("size of b1 %d\n", (6*sizeof(char)));
	printf("size of b2 %d\n", (3*(2*sizeof(char))));
	printf("size of b3 %d\n", (5*(3*(2*sizeof(char)))));
	printf("Letter Array:   %c\n", ((int)(funArray((a1), (((char*){(b1).data})), (((__insieme_type_3*){(b2).data})), (((__insieme_type_2*){(b3).data}))))));
	printf("Letter Pointer: %c\n", ((int)(funPointer((a1), (c1), (c2), (c3)))));
	printf("Letter Struct:  %c\n", ((int)(funStruct((s)))));
	__insieme_type_19 strings = ((__insieme_type_19){{((((__insieme_type_15){{'T', 'h', 'i', 's', '\0'}})).data), ((((__insieme_type_5){{'i', 's', '\0'}})).data), ((((__insieme_type_3){{'a', '\0'}})).data), ((((__insieme_type_20){{'l', 'i', 't', 't', 'l', 'e', '\0'}})).data), ((((__insieme_type_15){{'t', 'e', 's', 't', '\0'}})).data)}});
	printf("String:  %s\n", (((strings).data[((unsigned int)(0))])));
	printf("String:  %s\n", (((strings).data[((unsigned int)(1))])));
	printf("String:  %s\n", (((strings).data[((unsigned int)(2))])));
	printf("String:  %s\n", (((strings).data[((unsigned int)(3))])));
	printf("String:  %s\n", (((strings).data[((unsigned int)(4))])));
	return 0;
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
