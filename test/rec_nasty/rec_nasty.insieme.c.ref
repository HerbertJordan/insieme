// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<char,1> //
typedef struct ___insieme_type_1 { 
    char* data;
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<char,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
} __insieme_type_0;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Prototype of f1 ... type: ((int<4>)->int<4>) //
int f1(int);

// start code fragment :: Prototype of g1 ... type: ((int<4>)->int<4>) //
int g1(int);

// start code fragment :: Definition of f1 ... type: ((int<4>)->int<4>) //
int f1(int v){
	if((v>0)) { return g1((v-1)); };
	return (((int)(0))-1);
}
static int f1_wrap(void* _closure, int v) { return f1(v); }

// start code fragment :: Prototype of f2 ... type: ((int<4>)->int<4>) //
int f2(int);

// start code fragment :: Prototype of g2 ... type: ((int<4>)->int<4>) //
int g2(int);

// start code fragment :: Definition of f2 ... type: ((int<4>)->int<4>) //
int f2(int v){
	if((v<10)) { return (10+g2(v)); };
	return v;
}
static int f2_wrap(void* _closure, int v) { return f2(v); }

// start code fragment :: Definition of g2 ... type: ((int<4>)->int<4>) //
int g2(int v){
	if((v>10)) { return 0; };
	return f2((v+1));
}
static int g2_wrap(void* _closure, int v) { return g2(v); }

// start code fragment :: Definition of g1 ... type: ((int<4>)->int<4>) //
int g1(int v){
	if((v>0)){
		int a = f1((v-1));
		return ((a)+f2((v+1)));
	};
	return 10;
}
static int g1_wrap(void* _closure, int v) { return g1(v); }

// start code fragment :: main function //
int main(int __argc, char** __argv) {
	
	// encapsulating arguments within Insieme Types ...
	int argc = __argc;
	__insieme_type_0 argv = (__insieme_type_0){alloca(sizeof(__insieme_type_1) * argc)};
	for(int i=0; i<argc; ++i) {
		argv.data[i] = (__insieme_type_1){__argv[i]};
	}
	
	// ---- begin of actual code body ----
	 { printf(((char*)((*(&((__insieme_type_1){"%d\n"}))).data)), f1(3)); }
	// ----  end of actual code body  ----
	
}

