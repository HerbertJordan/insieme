// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(array<ref<real<4>>,1> v100, vector<uint<4>,3> v88, vector<uint<4>,3> v102){
        decl vector<uint<4>,3> v101 = vector.pointwise(uint.div)(v88, v102);
        parallel(job([vector.reduction(v101, 1, uint.mul)-vector.reduction(v101, 1, uint.mul)])[decl array<ref<real<4>>,1> v96 = v100, decl vector<uint<4>,3> v97 = v101, decl vector<uint<4>,3> v98 = v102]{
            default: [v98, v97, v96]fun[vector<uint<4>,3> v95, vector<uint<4>,3> v89, array<ref<real<4>>,1> v94](){
                parallel(job([vector.reduction(v95, 1, uint.mul)-vector.reduction(v95, 1, uint.mul)])[decl array<ref<real<4>>,1> v91 = v94, decl vector<uint<4>,3> v92 = v95]{
                    default: [v91, v92]fun[array<ref<real<4>>,1> v1, vector<uint<4>,3> v90](){
                        decl ref<real<4>> v2 =  var(v1[0]);
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v116, vector<uint<4>,3> v104, vector<uint<4>,3> v118){
        decl vector<uint<4>,3> v117 = vector.pointwise(uint.div)(v104, v118);
        parallel(job([vector.reduction(v117, 1, uint.mul)-vector.reduction(v117, 1, uint.mul)])[decl array<ref<real<4>>,1> v112 = v116, decl vector<uint<4>,3> v113 = v117, decl vector<uint<4>,3> v114 = v118]{
            default: [v114, v112, v113]fun[vector<uint<4>,3> v111, array<ref<real<4>>,1> v110, vector<uint<4>,3> v105](){
                parallel(job([vector.reduction(v111, 1, uint.mul)-vector.reduction(v111, 1, uint.mul)])[decl array<ref<real<4>>,1> v107 = v110, decl vector<uint<4>,3> v108 = v111]{
                    default: [v108, v107]fun[vector<uint<4>,3> v106, array<ref<real<4>>,1> v5](){
                        decl ref<real<4>> v6 =  var(v5[0]);
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<int<4>>,1> v128, vector<uint<4>,3> v120, vector<uint<4>,3> v133){
        decl vector<uint<4>,3> v132 = vector.pointwise(uint.div)(v120, v133);
        parallel(job([vector.reduction(v132, 1, uint.mul)-vector.reduction(v132, 1, uint.mul)])[decl vector<uint<4>,3> v129 = v132, decl vector<uint<4>,3> v130 = v133]{
            default: [v130, v128, v129]fun[vector<uint<4>,3> v127, array<ref<int<4>>,1> v126, vector<uint<4>,3> v121](){
                parallel(job([vector.reduction(v127, 1, uint.mul)-vector.reduction(v127, 1, uint.mul)])[decl array<ref<int<4>>,1> v123 = v126, decl vector<uint<4>,3> v124 = v127]{
                    default: [v124, v123]fun[vector<uint<4>,3> v122, array<ref<int<4>>,1> v9](){
                        decl ref<int<4>> v10 =  var(v9[0]);
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(int<2> v142, vector<uint<4>,3> v135, vector<uint<4>,3> v147){
        decl vector<uint<4>,3> v146 = vector.pointwise(uint.div)(v135, v147);
        parallel(job([vector.reduction(v146, 1, uint.mul)-vector.reduction(v146, 1, uint.mul)])[decl vector<uint<4>,3> v143 = v146, decl vector<uint<4>,3> v144 = v147]{
            default: [v143, v142, v144]fun[vector<uint<4>,3> v136, int<2> v138, vector<uint<4>,3> v141](){
                parallel(job([vector.reduction(v141, 1, uint.mul)-vector.reduction(v141, 1, uint.mul)])[decl vector<uint<4>,3> v139 = v141]{
                    default: [v138, v139]fun[int<2> v13, vector<uint<4>,3> v137](){
                        decl ref<int<2>> v14 =  var(v13);
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v174, array<ref<real<4>>,1> v175, array<ref<int<4>>,1> v176, array<ref<real<4>>,1> v168, uint<4> v169, int<4> v170, vector<uint<4>,3> v149, vector<uint<4>,3> v178){
        decl vector<uint<4>,3> v177 = vector.pointwise(uint.div)(v149, v178);
        parallel(job([vector.reduction(v177, 1, uint.mul)-vector.reduction(v177, 1, uint.mul)])[decl array<ref<real<4>>,1> v165 = v174, decl array<ref<real<4>>,1> v166 = v175, decl array<ref<int<4>>,1> v167 = v176, decl vector<uint<4>,3> v171 = v177, decl vector<uint<4>,3> v172 = v178]{
            default: [v170, v166, v169, v165, v172, v168, v171, v167]fun[int<4> v157, array<ref<real<4>>,1> v161, uint<4> v156, array<ref<real<4>>,1> v160, vector<uint<4>,3> v164, array<ref<real<4>>,1> v163, vector<uint<4>,3> v150, array<ref<int<4>>,1> v162](){
                parallel(job([vector.reduction(v164, 1, uint.mul)-vector.reduction(v164, 1, uint.mul)])[decl array<ref<real<4>>,1> v152 = v160, decl array<ref<real<4>>,1> v153 = v161, decl array<ref<int<4>>,1> v154 = v162, decl array<ref<real<4>>,1> v155 = v163, decl vector<uint<4>,3> v158 = v164]{
                    default: [v154, v153, v157, v152, v158, v156, v155]fun[array<ref<int<4>>,1> v19, array<ref<real<4>>,1> v18, int<4> v22, array<ref<real<4>>,1> v17, vector<uint<4>,3> v151, uint<4> v21, array<ref<real<4>>,1> v20](){
                        v18[0] := v19[0];
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v205, array<ref<real<4>>,1> v206, array<ref<int<4>>,1> v207, array<ref<real<4>>,1> v199, uint<4> v200, int<4> v201, vector<uint<4>,3> v180, vector<uint<4>,3> v209){
        decl vector<uint<4>,3> v208 = vector.pointwise(uint.div)(v180, v209);
        parallel(job([vector.reduction(v208, 1, uint.mul)-vector.reduction(v208, 1, uint.mul)])[decl array<ref<real<4>>,1> v196 = v205, decl array<ref<real<4>>,1> v197 = v206, decl array<ref<int<4>>,1> v198 = v207, decl vector<uint<4>,3> v202 = v208, decl vector<uint<4>,3> v203 = v209]{
            default: [v203, v198, v202, v201, v200, v196, v197, v199]fun[vector<uint<4>,3> v195, array<ref<int<4>>,1> v193, vector<uint<4>,3> v181, int<4> v188, uint<4> v187, array<ref<real<4>>,1> v191, array<ref<real<4>>,1> v192, array<ref<real<4>>,1> v194](){
                parallel(job([vector.reduction(v195, 1, uint.mul)-vector.reduction(v195, 1, uint.mul)])[decl array<ref<real<4>>,1> v183 = v191, decl array<ref<real<4>>,1> v184 = v192, decl array<ref<int<4>>,1> v185 = v193, decl array<ref<real<4>>,1> v186 = v194, decl vector<uint<4>,3> v189 = v195]{
                    default: [v189, v187, v186, v185, v184, v183, v188]fun[vector<uint<4>,3> v182, uint<4> v29, array<ref<real<4>>,1> v28, array<ref<int<4>>,1> v27, array<ref<real<4>>,1> v26, array<ref<real<4>>,1> v25, int<4> v30](){
                        v28[v27[0]] := 3.3f;
                        v26[v29] := v25[1]*v28[v27[0]];
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v244, array<ref<real<4>>,1> v245, array<ref<int<4>>,1> v246, array<ref<real<4>>,1> v238, uint<4> v239, int<4> v240, vector<uint<4>,3> v211, vector<uint<4>,3> v248){
        decl vector<uint<4>,3> v247 = vector.pointwise(uint.div)(v211, v248);
        parallel(job([vector.reduction(v247, 1, uint.mul)-vector.reduction(v247, 1, uint.mul)])[decl array<ref<real<4>>,1> v235 = v244, decl array<ref<real<4>>,1> v236 = v245, decl array<ref<int<4>>,1> v237 = v246, decl vector<uint<4>,3> v241 = v247, decl vector<uint<4>,3> v242 = v248]{
            default: [v239, v237, v242, v236, v241, v240, v238, v235]fun[uint<4> v224, array<ref<int<4>>,1> v231, vector<uint<4>,3> v234, array<ref<real<4>>,1> v230, vector<uint<4>,3> v233, int<4> v225, array<ref<real<4>>,1> v232, array<ref<real<4>>,1> v229](){
                parallel(job([vector.reduction(v234, 1, uint.mul)-vector.reduction(v234, 1, uint.mul)])[decl array<ref<real<4>>,1> v220 = v229, decl array<ref<real<4>>,1> v221 = v230, decl array<ref<int<4>>,1> v222 = v231, decl array<ref<real<4>>,1> v223 = v232, decl vector<uint<4>,3> v226 = v233, decl vector<uint<4>,3> v227 = v234]{
                    default: [v222, v226, v225, v221, v220, v227, v224, v223]fun[array<ref<int<4>>,1> v35, vector<uint<4>,3> v212, int<4> v38, array<ref<real<4>>,1> v34, array<ref<real<4>>,1> v33, vector<uint<4>,3> v213, uint<4> v37, array<ref<real<4>>,1> v36](){
                        decl ref<uint<4>> v39 =  var([v213, v212]fun[vector<uint<4>,3> v215, vector<uint<4>,3> v216](uint<4> v214){
                            decl uint<4> v217 = getThreadID(0);
                            decl uint<4> v218 = getThreadID(1);
                            switch(v214) {
                                case 0: return v217/v215[2]/v215[1]+v215[0]*v218/v216[2]/v216[1]
                                case 1: return v217/v215[2]%v215[1]+v215[1]*v218/v216[2]%v216[1]
                                case 2: return v217%v215[2]+v215[2]*v218/v216[2]%v216[1]
                                default: { }
                            };
                        }(0));
                        v34[v39] := v39;
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v280, array<ref<real<4>>,1> v281, array<ref<int<4>>,1> v282, array<ref<real<4>>,1> v273, uint<4> v274, int<4> v275, vector<uint<4>,3> v283, vector<uint<4>,3> v285){
        decl vector<uint<4>,3> v284 = vector.pointwise(uint.div)(v283, v285);
        parallel(job([vector.reduction(v284, 1, uint.mul)-vector.reduction(v284, 1, uint.mul)])[decl array<ref<real<4>>,1> v270 = v280, decl array<ref<real<4>>,1> v271 = v281, decl array<ref<int<4>>,1> v272 = v282, decl vector<uint<4>,3> v276 = v283, decl vector<uint<4>,3> v277 = v284, decl vector<uint<4>,3> v278 = v285]{
            default: [v270, v273, v277, v274, v276, v278, v271, v275, v272]fun[array<ref<real<4>>,1> v263, array<ref<real<4>>,1> v266, vector<uint<4>,3> v268, uint<4> v257, vector<uint<4>,3> v267, vector<uint<4>,3> v269, array<ref<real<4>>,1> v264, int<4> v258, array<ref<int<4>>,1> v265](){
                parallel(job([vector.reduction(v269, 1, uint.mul)-vector.reduction(v269, 1, uint.mul)])[decl array<ref<real<4>>,1> v253 = v263, decl array<ref<real<4>>,1> v254 = v264, decl array<ref<int<4>>,1> v255 = v265, decl array<ref<real<4>>,1> v256 = v266, decl vector<uint<4>,3> v259 = v267, decl vector<uint<4>,3> v260 = v268, decl vector<uint<4>,3> v261 = v269]{
                    default: [v259, v258, v256, v257, v254, v260, v253, v261, v255]fun[vector<uint<4>,3> v250, int<4> v47, array<ref<real<4>>,1> v45, uint<4> v46, array<ref<real<4>>,1> v43, vector<uint<4>,3> v251, array<ref<real<4>>,1> v42, vector<uint<4>,3> v252, array<ref<int<4>>,1> v44](){
                        v43[0] := v250[0];
                        v43[1] := v250[1];
                        v43[2] := v250[2];
                        v43[3] := v252[0];
                        v43[4] := v252[1];
                        v43[5] := v252[2];
                        v43[6] := v251[0];
                        v43[7] := v251[1];
                        v43[8] := v251[2];
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v312, array<ref<real<4>>,1> v313, array<ref<int<4>>,1> v314, array<ref<real<4>>,1> v306, uint<4> v307, int<4> v308, vector<uint<4>,3> v287, vector<uint<4>,3> v316){
        decl vector<uint<4>,3> v315 = vector.pointwise(uint.div)(v287, v316);
        parallel(job([vector.reduction(v315, 1, uint.mul)-vector.reduction(v315, 1, uint.mul)])[decl array<ref<real<4>>,1> v303 = v312, decl array<ref<real<4>>,1> v304 = v313, decl array<ref<int<4>>,1> v305 = v314, decl vector<uint<4>,3> v309 = v315, decl vector<uint<4>,3> v310 = v316]{
            default: [v309, v306, v310, v308, v304, v307, v303, v305]fun[vector<uint<4>,3> v288, array<ref<real<4>>,1> v301, vector<uint<4>,3> v302, int<4> v295, array<ref<real<4>>,1> v299, uint<4> v294, array<ref<real<4>>,1> v298, array<ref<int<4>>,1> v300](){
                parallel(job([vector.reduction(v302, 1, uint.mul)-vector.reduction(v302, 1, uint.mul)])[decl array<ref<real<4>>,1> v290 = v298, decl array<ref<real<4>>,1> v291 = v299, decl array<ref<int<4>>,1> v292 = v300, decl array<ref<real<4>>,1> v293 = v301, decl vector<uint<4>,3> v296 = v302]{
                    default: [v296, v293, v292, v291, v295, v294, v290]fun[vector<uint<4>,3> v289, array<ref<real<4>>,1> v53, array<ref<int<4>>,1> v52, array<ref<real<4>>,1> v51, int<4> v55, uint<4> v54, array<ref<real<4>>,1> v50](){
                        if(v54==v55) v51[0] := v50[0] else { };
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v363, array<ref<real<4>>,1> v364, array<ref<int<4>>,1> v365, array<ref<real<4>>,1> v357, uint<4> v358, int<4> v359, vector<uint<4>,3> v318, vector<uint<4>,3> v367){
        decl vector<uint<4>,3> v366 = vector.pointwise(uint.div)(v318, v367);
        parallel(job([vector.reduction(v366, 1, uint.mul)-vector.reduction(v366, 1, uint.mul)])[decl array<ref<real<4>>,1> v354 = v363, decl array<ref<real<4>>,1> v355 = v364, decl array<ref<int<4>>,1> v356 = v365, decl vector<uint<4>,3> v360 = v366, decl vector<uint<4>,3> v361 = v367]{
            default: [v361, v357, v358, v356, v354, v360, v355, v359]fun[vector<uint<4>,3> v353, array<ref<real<4>>,1> v351, uint<4> v343, array<ref<int<4>>,1> v350, array<ref<real<4>>,1> v348, vector<uint<4>,3> v352, array<ref<real<4>>,1> v349, int<4> v344](){
                parallel(job([vector.reduction(v353, 1, uint.mul)-vector.reduction(v353, 1, uint.mul)])[decl array<ref<real<4>>,1> v339 = v348, decl array<ref<real<4>>,1> v340 = v349, decl array<ref<int<4>>,1> v341 = v350, decl array<ref<real<4>>,1> v342 = v351, decl vector<uint<4>,3> v345 = v352, decl vector<uint<4>,3> v346 = v353]{
                    default: [v341, v346, v343, v342, v340, v339, v345, v344]fun[array<ref<int<4>>,1> v60, vector<uint<4>,3> v320, uint<4> v62, array<ref<real<4>>,1> v61, array<ref<real<4>>,1> v59, array<ref<real<4>>,1> v58, vector<uint<4>,3> v319, int<4> v63](){
                        decl ref<vector<ref<uint<4>>,3>> v64 =  var(undefined(vector<ref<uint<4>>,3>));
                        v64[0] := [v319, v320]fun[vector<uint<4>,3> v323, vector<uint<4>,3> v322](uint<4> v321){
                            decl uint<4> v324 = getThreadID(0);
                            decl uint<4> v325 = getThreadID(1);
                            switch(v321) {
                                case 0: return v324/v322[2]/v322[1]+v322[0]*v325/v323[2]/v323[1]
                                case 1: return v324/v322[2]%v322[1]+v322[1]*v325/v323[2]%v323[1]
                                case 2: return v324%v322[2]+v322[2]*v325/v323[2]%v323[1]
                                default: { }
                            };
                        }(0);
                        v64[1] := [v319, v320]fun[vector<uint<4>,3> v329, vector<uint<4>,3> v328](uint<4> v327){
                            decl uint<4> v330 = getThreadID(0);
                            decl uint<4> v331 = getThreadID(1);
                            switch(v327) {
                                case 0: return v330/v328[2]/v328[1]+v328[0]*v331/v329[2]/v329[1]
                                case 1: return v330/v328[2]%v328[1]+v328[1]*v331/v329[2]%v329[1]
                                case 2: return v330%v328[2]+v328[2]*v331/v329[2]%v329[1]
                                default: { }
                            };
                        }(1);
                        v64[2] := [v319, v320]fun[vector<uint<4>,3> v335, vector<uint<4>,3> v334](uint<4> v333){
                            decl uint<4> v336 = getThreadID(0);
                            decl uint<4> v337 = getThreadID(1);
                            switch(v333) {
                                case 0: return v336/v334[2]/v334[1]+v334[0]*v337/v335[2]/v335[1]
                                case 1: return v336/v334[2]%v334[1]+v334[1]*v337/v335[2]%v335[1]
                                case 2: return v336%v334[2]+v334[2]*v337/v335[2]%v335[1]
                                default: { }
                            };
                        }(2);
                        decl ref<uint<4>> v65 =  var(v64[0]*v60[2]*v60[1]+v64[1]*v60[2]+v64[2]);
                        v59[v65] := v58[v65];
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v408, array<ref<real<4>>,1> v409, array<ref<int<4>>,1> v410, array<ref<real<4>>,1> v402, uint<4> v403, int<4> v404, vector<uint<4>,3> v369, vector<uint<4>,3> v412){
        decl vector<uint<4>,3> v411 = vector.pointwise(uint.div)(v369, v412);
        parallel(job([vector.reduction(v411, 1, uint.mul)-vector.reduction(v411, 1, uint.mul)])[decl array<ref<real<4>>,1> v399 = v408, decl array<ref<real<4>>,1> v400 = v409, decl array<ref<int<4>>,1> v401 = v410, decl vector<uint<4>,3> v405 = v411, decl vector<uint<4>,3> v406 = v412]{
            default: [v406, v402, v405, v404, v403, v401, v400, v399]fun[vector<uint<4>,3> v398, array<ref<real<4>>,1> v396, vector<uint<4>,3> v397, int<4> v389, uint<4> v388, array<ref<int<4>>,1> v395, array<ref<real<4>>,1> v394, array<ref<real<4>>,1> v393](){
                parallel(job([vector.reduction(v398, 1, uint.mul)-vector.reduction(v398, 1, uint.mul)])[decl array<ref<real<4>>,1> v384 = v393, decl array<ref<real<4>>,1> v385 = v394, decl array<ref<int<4>>,1> v386 = v395, decl array<ref<real<4>>,1> v387 = v396, decl vector<uint<4>,3> v390 = v397, decl vector<uint<4>,3> v391 = v398]{
                    default: [v389, v391, v388, v385, v386, v384, v387, v390]fun[int<4> v73, vector<uint<4>,3> v371, uint<4> v72, array<ref<real<4>>,1> v69, array<ref<int<4>>,1> v70, array<ref<real<4>>,1> v68, array<ref<real<4>>,1> v71, vector<uint<4>,3> v370](){
                        decl ref<uint<4>> v74 =  var([v371]fun[vector<uint<4>,3> v373](uint<4> v372){
                            decl uint<4> v375 = getThreadID(0);
                            switch(v372) {
                                case 0: return v375/v373[2]/v373[1]
                                case 1: return v375/v373[2]%v373[1]
                                case 2: return v375%v373[2]
                                default: { }
                            };
                        }(0));
                        decl ref<uint<4>> v75 =  var([v370, v371]fun[vector<uint<4>,3> v380, vector<uint<4>,3> v379](uint<4> v378){
                            decl uint<4> v381 = getThreadID(0);
                            decl uint<4> v382 = getThreadID(1);
                            switch(v378) {
                                case 0: return v381/v379[2]/v379[1]+v379[0]*v382/v380[2]/v380[1]
                                case 1: return v381/v379[2]%v379[1]+v379[1]*v382/v380[2]%v380[1]
                                case 2: return v381%v379[2]+v379[2]*v382/v380[2]%v380[1]
                                default: { }
                            };
                        }(0));
                        v71[v74] := 7.0f;
                        barrier(getThreadGroup(0));
                        v69[v75] := v71[v74];
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v459, array<ref<real<4>>,1> v460, array<ref<int<4>>,1> v461, array<ref<real<4>>,1> v453, uint<4> v454, int<4> v455, vector<uint<4>,3> v414, vector<uint<4>,3> v463){
        decl vector<uint<4>,3> v462 = vector.pointwise(uint.div)(v414, v463);
        parallel(job([vector.reduction(v462, 1, uint.mul)-vector.reduction(v462, 1, uint.mul)])[decl array<ref<real<4>>,1> v450 = v459, decl array<ref<real<4>>,1> v451 = v460, decl array<ref<int<4>>,1> v452 = v461, decl vector<uint<4>,3> v456 = v462, decl vector<uint<4>,3> v457 = v463]{
            default: [v457, v456, v451, v454, v453, v452, v450, v455]fun[vector<uint<4>,3> v449, vector<uint<4>,3> v448, array<ref<real<4>>,1> v445, uint<4> v439, array<ref<real<4>>,1> v447, array<ref<int<4>>,1> v446, array<ref<real<4>>,1> v444, int<4> v440](){
                parallel(job([vector.reduction(v449, 1, uint.mul)-vector.reduction(v449, 1, uint.mul)])[decl array<ref<real<4>>,1> v435 = v444, decl array<ref<real<4>>,1> v436 = v445, decl array<ref<int<4>>,1> v437 = v446, decl array<ref<real<4>>,1> v438 = v447, decl vector<uint<4>,3> v441 = v448, decl vector<uint<4>,3> v442 = v449]{
                    default: [v441, v437, v436, v440, v438, v435, v442, v439]fun[vector<uint<4>,3> v415, array<ref<int<4>>,1> v80, array<ref<real<4>>,1> v79, int<4> v83, array<ref<real<4>>,1> v81, array<ref<real<4>>,1> v78, vector<uint<4>,3> v416, uint<4> v82](){
                        decl ref<int<4>> v84 =  var([v415, v416]fun[vector<uint<4>,3> v419, vector<uint<4>,3> v418](uint<4> v417){
                            decl uint<4> v420 = getThreadID(0);
                            decl uint<4> v421 = getThreadID(1);
                            switch(v417) {
                                case 0: return v420/v418[2]/v418[1]+v418[0]*v421/v419[2]/v419[1]
                                case 1: return v420/v418[2]%v418[1]+v418[1]*v421/v419[2]%v419[1]
                                case 2: return v420%v418[2]+v418[2]*v421/v419[2]%v419[1]
                                default: { }
                            };
                        }(0)*v80[1]*v80[2]+[v415, v416]fun[vector<uint<4>,3> v425, vector<uint<4>,3> v424](uint<4> v423){
                            decl uint<4> v426 = getThreadID(0);
                            decl uint<4> v427 = getThreadID(1);
                            switch(v423) {
                                case 0: return v426/v424[2]/v424[1]+v424[0]*v427/v425[2]/v425[1]
                                case 1: return v426/v424[2]%v424[1]+v424[1]*v427/v425[2]%v425[1]
                                case 2: return v426%v424[2]+v424[2]*v427/v425[2]%v425[1]
                                default: { }
                            };
                        }(1)*v80[2]+[v416, v415]fun[vector<uint<4>,3> v430, vector<uint<4>,3> v431](uint<4> v429){
                            decl uint<4> v432 = getThreadID(0);
                            decl uint<4> v433 = getThreadID(1);
                            switch(v429) {
                                case 0: return v432/v430[2]/v430[1]+v430[0]*v433/v431[2]/v431[1]
                                case 1: return v432/v430[2]%v430[1]+v430[1]*v433/v431[2]%v431[1]
                                case 2: return v432%v430[2]+v430[2]*v433/v431[2]%v431[1]
                                default: { }
                            };
                        }(2));
                        decl ref<int<4>> v85 =  var(v80[0]*v80[1]*v80[2]-17);
                        if(v84>=v85) {
                            return unit;
                        } else { };
                        v79[v84] := v78[v84]+v80[v84];
                    }
                });
                mergeAll();
            }
        });
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(array<ref<real<4>>,1> v100, vector<uint<4>,3> v88, vector<uint<4>,3> v102){
        decl vector<uint<4>,3> v101 = vector.pointwise(uint.div)(v88, v102);
        parallel(job(([vector.reduction(v101, 1, uint.mul)-vector.reduction(v101, 1, uint.mul)]))[decl array<ref<real<4>>,1> v96 = v100, decl vector<uint<4>,3> v97 = v101, decl vector<uint<4>,3> v98 = v102]{
            default: [v98, v97, v96]fun[vector<uint<4>,3> v95, vector<uint<4>,3> v89, array<ref<real<4>>,1> v94](){
                parallel(job(([vector.reduction(v95, 1, uint.mul)-vector.reduction(v95, 1, uint.mul)]))[decl array<ref<real<4>>,1> v91 = v94, decl vector<uint<4>,3> v92 = v95]{
                    default: [v91, v92]fun[array<ref<real<4>>,1> v1, vector<uint<4>,3> v90](){
                        decl ref<real<4>> v2 = ( var(( *(v1[CAST<uint<4>>(0)]))));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v116, vector<uint<4>,3> v104, vector<uint<4>,3> v118){
        decl vector<uint<4>,3> v117 = vector.pointwise(uint.div)(v104, v118);
        parallel(job(([vector.reduction(v117, 1, uint.mul)-vector.reduction(v117, 1, uint.mul)]))[decl array<ref<real<4>>,1> v112 = v116, decl vector<uint<4>,3> v113 = v117, decl vector<uint<4>,3> v114 = v118]{
            default: [v114, v112, v113]fun[vector<uint<4>,3> v111, array<ref<real<4>>,1> v110, vector<uint<4>,3> v105](){
                parallel(job(([vector.reduction(v111, 1, uint.mul)-vector.reduction(v111, 1, uint.mul)]))[decl array<ref<real<4>>,1> v107 = v110, decl vector<uint<4>,3> v108 = v111]{
                    default: [v108, v107]fun[vector<uint<4>,3> v106, array<ref<real<4>>,1> v5](){
                        decl ref<real<4>> v6 = ( var(( *(v5[CAST<uint<4>>(0)]))));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<int<4>>,1> v128, vector<uint<4>,3> v120, vector<uint<4>,3> v133){
        decl vector<uint<4>,3> v132 = vector.pointwise(uint.div)(v120, v133);
        parallel(job(([vector.reduction(v132, 1, uint.mul)-vector.reduction(v132, 1, uint.mul)]))[decl vector<uint<4>,3> v129 = v132, decl vector<uint<4>,3> v130 = v133]{
            default: [v130, v128, v129]fun[vector<uint<4>,3> v127, array<ref<int<4>>,1> v126, vector<uint<4>,3> v121](){
                parallel(job(([vector.reduction(v127, 1, uint.mul)-vector.reduction(v127, 1, uint.mul)]))[decl array<ref<int<4>>,1> v123 = v126, decl vector<uint<4>,3> v124 = v127]{
                    default: [v124, v123]fun[vector<uint<4>,3> v122, array<ref<int<4>>,1> v9](){
                        decl ref<int<4>> v10 = ( var(( *(v9[CAST<uint<4>>(0)]))));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(int<2> v142, vector<uint<4>,3> v135, vector<uint<4>,3> v147){
        decl vector<uint<4>,3> v146 = vector.pointwise(uint.div)(v135, v147);
        parallel(job(([vector.reduction(v146, 1, uint.mul)-vector.reduction(v146, 1, uint.mul)]))[decl vector<uint<4>,3> v143 = v146, decl vector<uint<4>,3> v144 = v147]{
            default: [v143, v142, v144]fun[vector<uint<4>,3> v136, int<2> v138, vector<uint<4>,3> v141](){
                parallel(job(([vector.reduction(v141, 1, uint.mul)-vector.reduction(v141, 1, uint.mul)]))[decl vector<uint<4>,3> v139 = v141]{
                    default: [v138, v139]fun[int<2> v13, vector<uint<4>,3> v137](){
                        decl ref<int<2>> v14 = ( var(v13));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v174, array<ref<real<4>>,1> v175, array<ref<int<4>>,1> v176, array<ref<real<4>>,1> v168, uint<4> v169, int<4> v170, vector<uint<4>,3> v149, vector<uint<4>,3> v178){
        decl vector<uint<4>,3> v177 = vector.pointwise(uint.div)(v149, v178);
        parallel(job(([vector.reduction(v177, 1, uint.mul)-vector.reduction(v177, 1, uint.mul)]))[decl array<ref<real<4>>,1> v165 = v174, decl array<ref<real<4>>,1> v166 = v175, decl array<ref<int<4>>,1> v167 = v176, decl vector<uint<4>,3> v171 = v177, decl vector<uint<4>,3> v172 = v178]{
            default: [v170, v166, v169, v165, v172, v168, v171, v167]fun[int<4> v157, array<ref<real<4>>,1> v161, uint<4> v156, array<ref<real<4>>,1> v160, vector<uint<4>,3> v164, array<ref<real<4>>,1> v163, vector<uint<4>,3> v150, array<ref<int<4>>,1> v162](){
                parallel(job(([vector.reduction(v164, 1, uint.mul)-vector.reduction(v164, 1, uint.mul)]))[decl array<ref<real<4>>,1> v152 = v160, decl array<ref<real<4>>,1> v153 = v161, decl array<ref<int<4>>,1> v154 = v162, decl array<ref<real<4>>,1> v155 = v163, decl vector<uint<4>,3> v158 = v164]{
                    default: [v154, v153, v157, v152, v158, v156, v155]fun[array<ref<int<4>>,1> v19, array<ref<real<4>>,1> v18, int<4> v22, array<ref<real<4>>,1> v17, vector<uint<4>,3> v151, uint<4> v21, array<ref<real<4>>,1> v20](){
                        ((v18[CAST<uint<4>>(0)]) := CAST<real<4>>(( *(v19[CAST<uint<4>>(0)]))));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v205, array<ref<real<4>>,1> v206, array<ref<int<4>>,1> v207, array<ref<real<4>>,1> v199, uint<4> v200, int<4> v201, vector<uint<4>,3> v180, vector<uint<4>,3> v209){
        decl vector<uint<4>,3> v208 = vector.pointwise(uint.div)(v180, v209);
        parallel(job(([vector.reduction(v208, 1, uint.mul)-vector.reduction(v208, 1, uint.mul)]))[decl array<ref<real<4>>,1> v196 = v205, decl array<ref<real<4>>,1> v197 = v206, decl array<ref<int<4>>,1> v198 = v207, decl vector<uint<4>,3> v202 = v208, decl vector<uint<4>,3> v203 = v209]{
            default: [v203, v198, v202, v201, v200, v196, v197, v199]fun[vector<uint<4>,3> v195, array<ref<int<4>>,1> v193, vector<uint<4>,3> v181, int<4> v188, uint<4> v187, array<ref<real<4>>,1> v191, array<ref<real<4>>,1> v192, array<ref<real<4>>,1> v194](){
                parallel(job(([vector.reduction(v195, 1, uint.mul)-vector.reduction(v195, 1, uint.mul)]))[decl array<ref<real<4>>,1> v183 = v191, decl array<ref<real<4>>,1> v184 = v192, decl array<ref<int<4>>,1> v185 = v193, decl array<ref<real<4>>,1> v186 = v194, decl vector<uint<4>,3> v189 = v195]{
                    default: [v189, v187, v186, v185, v184, v183, v188]fun[vector<uint<4>,3> v182, uint<4> v29, array<ref<real<4>>,1> v28, array<ref<int<4>>,1> v27, array<ref<real<4>>,1> v26, array<ref<real<4>>,1> v25, int<4> v30](){
                        ((v28[CAST<uint<4>>(( *(v27[CAST<uint<4>>(0)])))]) := 3.3f);
                        ((v26[CAST<uint<4>>(v29)]) := (( *(v25[CAST<uint<4>>(1)]))*( *(v28[CAST<uint<4>>(( *(v27[CAST<uint<4>>(0)])))]))));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v244, array<ref<real<4>>,1> v245, array<ref<int<4>>,1> v246, array<ref<real<4>>,1> v238, uint<4> v239, int<4> v240, vector<uint<4>,3> v211, vector<uint<4>,3> v248){
        decl vector<uint<4>,3> v247 = vector.pointwise(uint.div)(v211, v248);
        parallel(job(([vector.reduction(v247, 1, uint.mul)-vector.reduction(v247, 1, uint.mul)]))[decl array<ref<real<4>>,1> v235 = v244, decl array<ref<real<4>>,1> v236 = v245, decl array<ref<int<4>>,1> v237 = v246, decl vector<uint<4>,3> v241 = v247, decl vector<uint<4>,3> v242 = v248]{
            default: [v239, v237, v242, v236, v241, v240, v238, v235]fun[uint<4> v224, array<ref<int<4>>,1> v231, vector<uint<4>,3> v234, array<ref<real<4>>,1> v230, vector<uint<4>,3> v233, int<4> v225, array<ref<real<4>>,1> v232, array<ref<real<4>>,1> v229](){
                parallel(job(([vector.reduction(v234, 1, uint.mul)-vector.reduction(v234, 1, uint.mul)]))[decl array<ref<real<4>>,1> v220 = v229, decl array<ref<real<4>>,1> v221 = v230, decl array<ref<int<4>>,1> v222 = v231, decl array<ref<real<4>>,1> v223 = v232, decl vector<uint<4>,3> v226 = v233, decl vector<uint<4>,3> v227 = v234]{
                    default: [v222, v226, v225, v221, v220, v227, v224, v223]fun[array<ref<int<4>>,1> v35, vector<uint<4>,3> v212, int<4> v38, array<ref<real<4>>,1> v34, array<ref<real<4>>,1> v33, vector<uint<4>,3> v213, uint<4> v37, array<ref<real<4>>,1> v36](){
                        decl ref<uint<4>> v39 = ( var([v213, v212]fun[vector<uint<4>,3> v215, vector<uint<4>,3> v216](uint<4> v214){
                            decl uint<4> v217 = getThreadID(0);
                            decl uint<4> v218 = getThreadID(1);
                            switch(v214) {
                                case 0: return (((v217/(v215[2]))/(v215[1]))+((v215[0])*((v218/(v216[2]))/(v216[1]))))
                                case 1: return (((v217/(v215[2]))%(v215[1]))+((v215[1])*((v218/(v216[2]))%(v216[1]))))
                                case 2: return ((v217%(v215[2]))+((v215[2])*((v218/(v216[2]))%(v216[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0))));
                        ((v34[CAST<uint<4>>(( *v39))]) := CAST<real<4>>(( *v39)));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v280, array<ref<real<4>>,1> v281, array<ref<int<4>>,1> v282, array<ref<real<4>>,1> v273, uint<4> v274, int<4> v275, vector<uint<4>,3> v283, vector<uint<4>,3> v285){
        decl vector<uint<4>,3> v284 = vector.pointwise(uint.div)(v283, v285);
        parallel(job(([vector.reduction(v284, 1, uint.mul)-vector.reduction(v284, 1, uint.mul)]))[decl array<ref<real<4>>,1> v270 = v280, decl array<ref<real<4>>,1> v271 = v281, decl array<ref<int<4>>,1> v272 = v282, decl vector<uint<4>,3> v276 = v283, decl vector<uint<4>,3> v277 = v284, decl vector<uint<4>,3> v278 = v285]{
            default: [v270, v273, v277, v274, v276, v278, v271, v275, v272]fun[array<ref<real<4>>,1> v263, array<ref<real<4>>,1> v266, vector<uint<4>,3> v268, uint<4> v257, vector<uint<4>,3> v267, vector<uint<4>,3> v269, array<ref<real<4>>,1> v264, int<4> v258, array<ref<int<4>>,1> v265](){
                parallel(job(([vector.reduction(v269, 1, uint.mul)-vector.reduction(v269, 1, uint.mul)]))[decl array<ref<real<4>>,1> v253 = v263, decl array<ref<real<4>>,1> v254 = v264, decl array<ref<int<4>>,1> v255 = v265, decl array<ref<real<4>>,1> v256 = v266, decl vector<uint<4>,3> v259 = v267, decl vector<uint<4>,3> v260 = v268, decl vector<uint<4>,3> v261 = v269]{
                    default: [v259, v258, v256, v257, v254, v260, v253, v261, v255]fun[vector<uint<4>,3> v250, int<4> v47, array<ref<real<4>>,1> v45, uint<4> v46, array<ref<real<4>>,1> v43, vector<uint<4>,3> v251, array<ref<real<4>>,1> v42, vector<uint<4>,3> v252, array<ref<int<4>>,1> v44](){
                        ((v43[CAST<uint<4>>(0)]) := CAST<real<4>>((v250[CAST<uint<4>>(0)])));
                        ((v43[CAST<uint<4>>(1)]) := CAST<real<4>>((v250[CAST<uint<4>>(1)])));
                        ((v43[CAST<uint<4>>(2)]) := CAST<real<4>>((v250[CAST<uint<4>>(2)])));
                        ((v43[CAST<uint<4>>(3)]) := CAST<real<4>>((v252[CAST<uint<4>>(0)])));
                        ((v43[CAST<uint<4>>(4)]) := CAST<real<4>>((v252[CAST<uint<4>>(1)])));
                        ((v43[CAST<uint<4>>(5)]) := CAST<real<4>>((v252[CAST<uint<4>>(2)])));
                        ((v43[CAST<uint<4>>(6)]) := CAST<real<4>>((v251[CAST<uint<4>>(0)])));
                        ((v43[CAST<uint<4>>(7)]) := CAST<real<4>>((v251[CAST<uint<4>>(1)])));
                        ((v43[CAST<uint<4>>(8)]) := CAST<real<4>>((v251[CAST<uint<4>>(2)])));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v312, array<ref<real<4>>,1> v313, array<ref<int<4>>,1> v314, array<ref<real<4>>,1> v306, uint<4> v307, int<4> v308, vector<uint<4>,3> v287, vector<uint<4>,3> v316){
        decl vector<uint<4>,3> v315 = vector.pointwise(uint.div)(v287, v316);
        parallel(job(([vector.reduction(v315, 1, uint.mul)-vector.reduction(v315, 1, uint.mul)]))[decl array<ref<real<4>>,1> v303 = v312, decl array<ref<real<4>>,1> v304 = v313, decl array<ref<int<4>>,1> v305 = v314, decl vector<uint<4>,3> v309 = v315, decl vector<uint<4>,3> v310 = v316]{
            default: [v309, v306, v310, v308, v304, v307, v303, v305]fun[vector<uint<4>,3> v288, array<ref<real<4>>,1> v301, vector<uint<4>,3> v302, int<4> v295, array<ref<real<4>>,1> v299, uint<4> v294, array<ref<real<4>>,1> v298, array<ref<int<4>>,1> v300](){
                parallel(job(([vector.reduction(v302, 1, uint.mul)-vector.reduction(v302, 1, uint.mul)]))[decl array<ref<real<4>>,1> v290 = v298, decl array<ref<real<4>>,1> v291 = v299, decl array<ref<int<4>>,1> v292 = v300, decl array<ref<real<4>>,1> v293 = v301, decl vector<uint<4>,3> v296 = v302]{
                    default: [v296, v293, v292, v291, v295, v294, v290]fun[vector<uint<4>,3> v289, array<ref<real<4>>,1> v53, array<ref<int<4>>,1> v52, array<ref<real<4>>,1> v51, int<4> v55, uint<4> v54, array<ref<real<4>>,1> v50](){
                        if((v54==CAST<uint<4>>(v55))) ((v51[CAST<uint<4>>(0)]) := ( *(v50[CAST<uint<4>>(0)]))) else { };
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v363, array<ref<real<4>>,1> v364, array<ref<int<4>>,1> v365, array<ref<real<4>>,1> v357, uint<4> v358, int<4> v359, vector<uint<4>,3> v318, vector<uint<4>,3> v367){
        decl vector<uint<4>,3> v366 = vector.pointwise(uint.div)(v318, v367);
        parallel(job(([vector.reduction(v366, 1, uint.mul)-vector.reduction(v366, 1, uint.mul)]))[decl array<ref<real<4>>,1> v354 = v363, decl array<ref<real<4>>,1> v355 = v364, decl array<ref<int<4>>,1> v356 = v365, decl vector<uint<4>,3> v360 = v366, decl vector<uint<4>,3> v361 = v367]{
            default: [v361, v357, v358, v356, v354, v360, v355, v359]fun[vector<uint<4>,3> v353, array<ref<real<4>>,1> v351, uint<4> v343, array<ref<int<4>>,1> v350, array<ref<real<4>>,1> v348, vector<uint<4>,3> v352, array<ref<real<4>>,1> v349, int<4> v344](){
                parallel(job(([vector.reduction(v353, 1, uint.mul)-vector.reduction(v353, 1, uint.mul)]))[decl array<ref<real<4>>,1> v339 = v348, decl array<ref<real<4>>,1> v340 = v349, decl array<ref<int<4>>,1> v341 = v350, decl array<ref<real<4>>,1> v342 = v351, decl vector<uint<4>,3> v345 = v352, decl vector<uint<4>,3> v346 = v353]{
                    default: [v341, v346, v343, v342, v340, v339, v345, v344]fun[array<ref<int<4>>,1> v60, vector<uint<4>,3> v320, uint<4> v62, array<ref<real<4>>,1> v61, array<ref<real<4>>,1> v59, array<ref<real<4>>,1> v58, vector<uint<4>,3> v319, int<4> v63](){
                        decl ref<vector<ref<uint<4>>,3>> v64 = ( var(undefined(vector<ref<uint<4>>,3>)));
                        ((( *v64)[CAST<uint<4>>(0)]) := [v319, v320]fun[vector<uint<4>,3> v323, vector<uint<4>,3> v322](uint<4> v321){
                            decl uint<4> v324 = getThreadID(0);
                            decl uint<4> v325 = getThreadID(1);
                            switch(v321) {
                                case 0: return (((v324/(v322[2]))/(v322[1]))+((v322[0])*((v325/(v323[2]))/(v323[1]))))
                                case 1: return (((v324/(v322[2]))%(v322[1]))+((v322[1])*((v325/(v323[2]))%(v323[1]))))
                                case 2: return ((v324%(v322[2]))+((v322[2])*((v325/(v323[2]))%(v323[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0)));
                        ((( *v64)[CAST<uint<4>>(1)]) := [v319, v320]fun[vector<uint<4>,3> v329, vector<uint<4>,3> v328](uint<4> v327){
                            decl uint<4> v330 = getThreadID(0);
                            decl uint<4> v331 = getThreadID(1);
                            switch(v327) {
                                case 0: return (((v330/(v328[2]))/(v328[1]))+((v328[0])*((v331/(v329[2]))/(v329[1]))))
                                case 1: return (((v330/(v328[2]))%(v328[1]))+((v328[1])*((v331/(v329[2]))%(v329[1]))))
                                case 2: return ((v330%(v328[2]))+((v328[2])*((v331/(v329[2]))%(v329[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(1)));
                        ((( *v64)[CAST<uint<4>>(2)]) := [v319, v320]fun[vector<uint<4>,3> v335, vector<uint<4>,3> v334](uint<4> v333){
                            decl uint<4> v336 = getThreadID(0);
                            decl uint<4> v337 = getThreadID(1);
                            switch(v333) {
                                case 0: return (((v336/(v334[2]))/(v334[1]))+((v334[0])*((v337/(v335[2]))/(v335[1]))))
                                case 1: return (((v336/(v334[2]))%(v334[1]))+((v334[1])*((v337/(v335[2]))%(v335[1]))))
                                case 2: return ((v336%(v334[2]))+((v334[2])*((v337/(v335[2]))%(v335[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(2)));
                        decl ref<uint<4>> v65 = ( var(((((( *(( *v64)[CAST<uint<4>>(0)]))*CAST<uint<4>>(( *(v60[CAST<uint<4>>(2)]))))*CAST<uint<4>>(( *(v60[CAST<uint<4>>(1)]))))+(( *(( *v64)[CAST<uint<4>>(1)]))*CAST<uint<4>>(( *(v60[CAST<uint<4>>(2)])))))+( *(( *v64)[CAST<uint<4>>(2)])))));
                        ((v59[CAST<uint<4>>(( *v65))]) := ( *(v58[CAST<uint<4>>(( *v65))])));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v408, array<ref<real<4>>,1> v409, array<ref<int<4>>,1> v410, array<ref<real<4>>,1> v402, uint<4> v403, int<4> v404, vector<uint<4>,3> v369, vector<uint<4>,3> v412){
        decl vector<uint<4>,3> v411 = vector.pointwise(uint.div)(v369, v412);
        parallel(job(([vector.reduction(v411, 1, uint.mul)-vector.reduction(v411, 1, uint.mul)]))[decl array<ref<real<4>>,1> v399 = v408, decl array<ref<real<4>>,1> v400 = v409, decl array<ref<int<4>>,1> v401 = v410, decl vector<uint<4>,3> v405 = v411, decl vector<uint<4>,3> v406 = v412]{
            default: [v406, v402, v405, v404, v403, v401, v400, v399]fun[vector<uint<4>,3> v398, array<ref<real<4>>,1> v396, vector<uint<4>,3> v397, int<4> v389, uint<4> v388, array<ref<int<4>>,1> v395, array<ref<real<4>>,1> v394, array<ref<real<4>>,1> v393](){
                parallel(job(([vector.reduction(v398, 1, uint.mul)-vector.reduction(v398, 1, uint.mul)]))[decl array<ref<real<4>>,1> v384 = v393, decl array<ref<real<4>>,1> v385 = v394, decl array<ref<int<4>>,1> v386 = v395, decl array<ref<real<4>>,1> v387 = v396, decl vector<uint<4>,3> v390 = v397, decl vector<uint<4>,3> v391 = v398]{
                    default: [v389, v391, v388, v385, v386, v384, v387, v390]fun[int<4> v73, vector<uint<4>,3> v371, uint<4> v72, array<ref<real<4>>,1> v69, array<ref<int<4>>,1> v70, array<ref<real<4>>,1> v68, array<ref<real<4>>,1> v71, vector<uint<4>,3> v370](){
                        decl ref<uint<4>> v74 = ( var([v371]fun[vector<uint<4>,3> v373](uint<4> v372){
                            decl uint<4> v375 = getThreadID(0);
                            switch(v372) {
                                case 0: return ((v375/(v373[2]))/(v373[1]))
                                case 1: return ((v375/(v373[2]))%(v373[1]))
                                case 2: return (v375%(v373[2]))
                                default: { }
                            };
                        }(CAST<uint<4>>(0))));
                        decl ref<uint<4>> v75 = ( var([v370, v371]fun[vector<uint<4>,3> v380, vector<uint<4>,3> v379](uint<4> v378){
                            decl uint<4> v381 = getThreadID(0);
                            decl uint<4> v382 = getThreadID(1);
                            switch(v378) {
                                case 0: return (((v381/(v379[2]))/(v379[1]))+((v379[0])*((v382/(v380[2]))/(v380[1]))))
                                case 1: return (((v381/(v379[2]))%(v379[1]))+((v379[1])*((v382/(v380[2]))%(v380[1]))))
                                case 2: return ((v381%(v379[2]))+((v379[2])*((v382/(v380[2]))%(v380[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0))));
                        ((v71[CAST<uint<4>>(( *v74))]) := 7.0f);
                        barrier(getThreadGroup(0));
                        ((v69[CAST<uint<4>>(( *v75))]) := ( *(v71[CAST<uint<4>>(( *v74))])));
                    }
                });
                mergeAll();
            }
        });
    }

//  Entry Point: 
fun(array<ref<real<4>>,1> v459, array<ref<real<4>>,1> v460, array<ref<int<4>>,1> v461, array<ref<real<4>>,1> v453, uint<4> v454, int<4> v455, vector<uint<4>,3> v414, vector<uint<4>,3> v463){
        decl vector<uint<4>,3> v462 = vector.pointwise(uint.div)(v414, v463);
        parallel(job(([vector.reduction(v462, 1, uint.mul)-vector.reduction(v462, 1, uint.mul)]))[decl array<ref<real<4>>,1> v450 = v459, decl array<ref<real<4>>,1> v451 = v460, decl array<ref<int<4>>,1> v452 = v461, decl vector<uint<4>,3> v456 = v462, decl vector<uint<4>,3> v457 = v463]{
            default: [v457, v456, v451, v454, v453, v452, v450, v455]fun[vector<uint<4>,3> v449, vector<uint<4>,3> v448, array<ref<real<4>>,1> v445, uint<4> v439, array<ref<real<4>>,1> v447, array<ref<int<4>>,1> v446, array<ref<real<4>>,1> v444, int<4> v440](){
                parallel(job(([vector.reduction(v449, 1, uint.mul)-vector.reduction(v449, 1, uint.mul)]))[decl array<ref<real<4>>,1> v435 = v444, decl array<ref<real<4>>,1> v436 = v445, decl array<ref<int<4>>,1> v437 = v446, decl array<ref<real<4>>,1> v438 = v447, decl vector<uint<4>,3> v441 = v448, decl vector<uint<4>,3> v442 = v449]{
                    default: [v441, v437, v436, v440, v438, v435, v442, v439]fun[vector<uint<4>,3> v415, array<ref<int<4>>,1> v80, array<ref<real<4>>,1> v79, int<4> v83, array<ref<real<4>>,1> v81, array<ref<real<4>>,1> v78, vector<uint<4>,3> v416, uint<4> v82](){
                        decl ref<int<4>> v84 = ( var(CAST<int<4>>((((([v415, v416]fun[vector<uint<4>,3> v419, vector<uint<4>,3> v418](uint<4> v417){
                            decl uint<4> v420 = getThreadID(0);
                            decl uint<4> v421 = getThreadID(1);
                            switch(v417) {
                                case 0: return (((v420/(v418[2]))/(v418[1]))+((v418[0])*((v421/(v419[2]))/(v419[1]))))
                                case 1: return (((v420/(v418[2]))%(v418[1]))+((v418[1])*((v421/(v419[2]))%(v419[1]))))
                                case 2: return ((v420%(v418[2]))+((v418[2])*((v421/(v419[2]))%(v419[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0))*CAST<uint<4>>(( *(v80[CAST<uint<4>>(1)]))))*CAST<uint<4>>(( *(v80[CAST<uint<4>>(2)]))))+([v415, v416]fun[vector<uint<4>,3> v425, vector<uint<4>,3> v424](uint<4> v423){
                            decl uint<4> v426 = getThreadID(0);
                            decl uint<4> v427 = getThreadID(1);
                            switch(v423) {
                                case 0: return (((v426/(v424[2]))/(v424[1]))+((v424[0])*((v427/(v425[2]))/(v425[1]))))
                                case 1: return (((v426/(v424[2]))%(v424[1]))+((v424[1])*((v427/(v425[2]))%(v425[1]))))
                                case 2: return ((v426%(v424[2]))+((v424[2])*((v427/(v425[2]))%(v425[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(1))*CAST<uint<4>>(( *(v80[CAST<uint<4>>(2)])))))+[v416, v415]fun[vector<uint<4>,3> v430, vector<uint<4>,3> v431](uint<4> v429){
                            decl uint<4> v432 = getThreadID(0);
                            decl uint<4> v433 = getThreadID(1);
                            switch(v429) {
                                case 0: return (((v432/(v430[2]))/(v430[1]))+((v430[0])*((v433/(v431[2]))/(v431[1]))))
                                case 1: return (((v432/(v430[2]))%(v430[1]))+((v430[1])*((v433/(v431[2]))%(v431[1]))))
                                case 2: return ((v432%(v430[2]))+((v430[2])*((v433/(v431[2]))%(v431[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(2))))));
                        decl ref<int<4>> v85 = ( var((((( *(v80[CAST<uint<4>>(0)]))*( *(v80[CAST<uint<4>>(1)])))*( *(v80[CAST<uint<4>>(2)])))-17)));
                        if((( *v84)>=( *v85))) {
                            return unit;
                        } else { };
                        ((v79[CAST<uint<4>>(( *v84))]) := (( *(v78[CAST<uint<4>>(( *v84))]))+CAST<real<4>>(( *(v80[CAST<uint<4>>(( *v84))])))));
                    }
                });
                mergeAll();
            }
        });
    }

