// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(ref<array<real<4>,1>> v88, vector<uint<4>,3> v76, vector<uint<4>,3> v90){
        decl vector<uint<4>,3> v89 = vector.pointwise(uint.div)(v76, v90);
        parallel(job([vector.reduction(v89, 1, uint.mul)-vector.reduction(v89, 1, uint.mul)])[decl ref<array<real<4>,1>> v84 = v88, decl vector<uint<4>,3> v85 = v89, decl vector<uint<4>,3> v86 = v90]{
            default: bind(){fun(ref<array<real<4>,1>> v82, vector<uint<4>,3> v77, vector<uint<4>,3> v83){
                parallel(job([vector.reduction(v83, 1, uint.mul)-vector.reduction(v83, 1, uint.mul)])[decl ref<array<real<4>,1>> v79 = v82, decl vector<uint<4>,3> v80 = v83]{
                    default: bind(){fun(ref<array<real<4>,1>> v1, vector<uint<4>,3> v78){
                        decl ref<real<4>> v2 = array.ref.elem.1D(v1, 0);
                    }(v79, v80)}
                });
                mergeAll();
            }(v84, v85, v86)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v104, vector<uint<4>,3> v92, vector<uint<4>,3> v106){
        decl vector<uint<4>,3> v105 = vector.pointwise(uint.div)(v92, v106);
        parallel(job([vector.reduction(v105, 1, uint.mul)-vector.reduction(v105, 1, uint.mul)])[decl ref<array<real<4>,1>> v100 = v104, decl vector<uint<4>,3> v101 = v105, decl vector<uint<4>,3> v102 = v106]{
            default: bind(){fun(ref<array<real<4>,1>> v98, vector<uint<4>,3> v93, vector<uint<4>,3> v99){
                parallel(job([vector.reduction(v99, 1, uint.mul)-vector.reduction(v99, 1, uint.mul)])[decl ref<array<real<4>,1>> v95 = v98, decl vector<uint<4>,3> v96 = v99]{
                    default: bind(){fun(ref<array<real<4>,1>> v4, vector<uint<4>,3> v94){
                        decl ref<real<4>> v5 = array.ref.elem.1D(v4, 0);
                    }(v95, v96)}
                });
                mergeAll();
            }(v100, v101, v102)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<int<4>,1>> v116, vector<uint<4>,3> v108, vector<uint<4>,3> v121){
        decl vector<uint<4>,3> v120 = vector.pointwise(uint.div)(v108, v121);
        parallel(job([vector.reduction(v120, 1, uint.mul)-vector.reduction(v120, 1, uint.mul)])[decl vector<uint<4>,3> v117 = v120, decl vector<uint<4>,3> v118 = v121]{
            default: bind(){fun(ref<array<int<4>,1>> v114, vector<uint<4>,3> v109, vector<uint<4>,3> v115){
                parallel(job([vector.reduction(v115, 1, uint.mul)-vector.reduction(v115, 1, uint.mul)])[decl ref<array<int<4>,1>> v111 = v114, decl vector<uint<4>,3> v112 = v115]{
                    default: bind(){fun(ref<array<int<4>,1>> v7, vector<uint<4>,3> v110){
                        decl ref<int<4>> v8 = array.ref.elem.1D(v7, 0);
                    }(v111, v112)}
                });
                mergeAll();
            }(v116, v117, v118)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(int<2> v130, vector<uint<4>,3> v123, vector<uint<4>,3> v135){
        decl vector<uint<4>,3> v134 = vector.pointwise(uint.div)(v123, v135);
        parallel(job([vector.reduction(v134, 1, uint.mul)-vector.reduction(v134, 1, uint.mul)])[decl vector<uint<4>,3> v131 = v134, decl vector<uint<4>,3> v132 = v135]{
            default: bind(){fun(int<2> v126, vector<uint<4>,3> v124, vector<uint<4>,3> v129){
                parallel(job([vector.reduction(v129, 1, uint.mul)-vector.reduction(v129, 1, uint.mul)])[decl vector<uint<4>,3> v127 = v129]{
                    default: bind(){fun(int<2> v10, vector<uint<4>,3> v125){
                        decl ref<int<2>> v11 =  var(v10);
                    }(v126, v127)}
                });
                mergeAll();
            }(v130, v131, v132)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v162, ref<array<real<4>,1>> v163, ref<array<int<4>,1>> v164, ref<array<real<4>,1>> v156, uint<4> v157, int<4> v158, vector<uint<4>,3> v137, vector<uint<4>,3> v166){
        decl vector<uint<4>,3> v165 = vector.pointwise(uint.div)(v137, v166);
        parallel(job([vector.reduction(v165, 1, uint.mul)-vector.reduction(v165, 1, uint.mul)])[decl ref<array<real<4>,1>> v153 = v162, decl ref<array<real<4>,1>> v154 = v163, decl ref<array<int<4>,1>> v155 = v164, decl vector<uint<4>,3> v159 = v165, decl vector<uint<4>,3> v160 = v166]{
            default: bind(){fun(ref<array<real<4>,1>> v148, ref<array<real<4>,1>> v149, ref<array<int<4>,1>> v150, ref<array<real<4>,1>> v151, uint<4> v144, int<4> v145, vector<uint<4>,3> v138, vector<uint<4>,3> v152){
                parallel(job([vector.reduction(v152, 1, uint.mul)-vector.reduction(v152, 1, uint.mul)])[decl ref<array<real<4>,1>> v140 = v148, decl ref<array<real<4>,1>> v141 = v149, decl ref<array<int<4>,1>> v142 = v150, decl ref<array<real<4>,1>> v143 = v151, decl vector<uint<4>,3> v146 = v152]{
                    default: bind(){fun(ref<array<real<4>,1>> v13, ref<array<real<4>,1>> v14, ref<array<int<4>,1>> v15, ref<array<real<4>,1>> v16, uint<4> v17, int<4> v18, vector<uint<4>,3> v139){
                        array.ref.elem.1D(v14, 0) := array.ref.elem.1D(v15, 0);
                    }(v140, v141, v142, v143, v144, v145, v146)}
                });
                mergeAll();
            }(v153, v154, v155, v156, v157, v158, v159, v160)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v193, ref<array<real<4>,1>> v194, ref<array<int<4>,1>> v195, ref<array<real<4>,1>> v187, uint<4> v188, int<4> v189, vector<uint<4>,3> v168, vector<uint<4>,3> v197){
        decl vector<uint<4>,3> v196 = vector.pointwise(uint.div)(v168, v197);
        parallel(job([vector.reduction(v196, 1, uint.mul)-vector.reduction(v196, 1, uint.mul)])[decl ref<array<real<4>,1>> v184 = v193, decl ref<array<real<4>,1>> v185 = v194, decl ref<array<int<4>,1>> v186 = v195, decl vector<uint<4>,3> v190 = v196, decl vector<uint<4>,3> v191 = v197]{
            default: bind(){fun(ref<array<real<4>,1>> v179, ref<array<real<4>,1>> v180, ref<array<int<4>,1>> v181, ref<array<real<4>,1>> v182, uint<4> v175, int<4> v176, vector<uint<4>,3> v169, vector<uint<4>,3> v183){
                parallel(job([vector.reduction(v183, 1, uint.mul)-vector.reduction(v183, 1, uint.mul)])[decl ref<array<real<4>,1>> v171 = v179, decl ref<array<real<4>,1>> v172 = v180, decl ref<array<int<4>,1>> v173 = v181, decl ref<array<real<4>,1>> v174 = v182, decl vector<uint<4>,3> v177 = v183]{
                    default: bind(){fun(ref<array<real<4>,1>> v20, ref<array<real<4>,1>> v21, ref<array<int<4>,1>> v22, ref<array<real<4>,1>> v23, uint<4> v24, int<4> v25, vector<uint<4>,3> v170){
                        array.ref.elem.1D(v23, array.ref.elem.1D(v22, 0)) := 3.3f;
                        array.ref.elem.1D(v21, v24) := array.ref.elem.1D(v20, 1)*array.ref.elem.1D(v23, array.ref.elem.1D(v22, 0));
                    }(v171, v172, v173, v174, v175, v176, v177)}
                });
                mergeAll();
            }(v184, v185, v186, v187, v188, v189, v190, v191)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v232, ref<array<real<4>,1>> v233, ref<array<int<4>,1>> v234, ref<array<real<4>,1>> v226, uint<4> v227, int<4> v228, vector<uint<4>,3> v199, vector<uint<4>,3> v236){
        decl vector<uint<4>,3> v235 = vector.pointwise(uint.div)(v199, v236);
        parallel(job([vector.reduction(v235, 1, uint.mul)-vector.reduction(v235, 1, uint.mul)])[decl ref<array<real<4>,1>> v223 = v232, decl ref<array<real<4>,1>> v224 = v233, decl ref<array<int<4>,1>> v225 = v234, decl vector<uint<4>,3> v229 = v235, decl vector<uint<4>,3> v230 = v236]{
            default: bind(){fun(ref<array<real<4>,1>> v217, ref<array<real<4>,1>> v218, ref<array<int<4>,1>> v219, ref<array<real<4>,1>> v220, uint<4> v212, int<4> v213, vector<uint<4>,3> v221, vector<uint<4>,3> v222){
                parallel(job([vector.reduction(v222, 1, uint.mul)-vector.reduction(v222, 1, uint.mul)])[decl ref<array<real<4>,1>> v208 = v217, decl ref<array<real<4>,1>> v209 = v218, decl ref<array<int<4>,1>> v210 = v219, decl ref<array<real<4>,1>> v211 = v220, decl vector<uint<4>,3> v214 = v221, decl vector<uint<4>,3> v215 = v222]{
                    default: bind(){fun(ref<array<real<4>,1>> v27, ref<array<real<4>,1>> v28, ref<array<int<4>,1>> v29, ref<array<real<4>,1>> v30, uint<4> v31, int<4> v32, vector<uint<4>,3> v200, vector<uint<4>,3> v201){
                        decl ref<uint<4>> v33 =  var(fun(uint<4> v202, vector<uint<4>,3> v204, vector<uint<4>,3> v203){
                            decl uint<4> v205 = getThreadID(0);
                            decl uint<4> v206 = getThreadID(1);
                            switch(v202) {
                                case 0: return v205/v203[2]/v203[1]+v203[0]*v206/v204[2]/v204[1]
                                case 1: return v205/v203[2]%v203[1]+v203[1]*v206/v204[2]%v204[1]
                                case 2: return v205%v203[2]+v203[2]*v206/v204[2]%v204[1]
                                default: { }
                            };
                        }(0, v200, v201));
                        array.ref.elem.1D(v28, v33) := v33;
                    }(v208, v209, v210, v211, v212, v213, v214, v215)}
                });
                mergeAll();
            }(v223, v224, v225, v226, v227, v228, v229, v230)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v268, ref<array<real<4>,1>> v269, ref<array<int<4>,1>> v270, ref<array<real<4>,1>> v261, uint<4> v262, int<4> v263, vector<uint<4>,3> v271, vector<uint<4>,3> v273){
        decl vector<uint<4>,3> v272 = vector.pointwise(uint.div)(v271, v273);
        parallel(job([vector.reduction(v272, 1, uint.mul)-vector.reduction(v272, 1, uint.mul)])[decl ref<array<real<4>,1>> v258 = v268, decl ref<array<real<4>,1>> v259 = v269, decl ref<array<int<4>,1>> v260 = v270, decl vector<uint<4>,3> v264 = v271, decl vector<uint<4>,3> v265 = v272, decl vector<uint<4>,3> v266 = v273]{
            default: bind(){fun(ref<array<real<4>,1>> v251, ref<array<real<4>,1>> v252, ref<array<int<4>,1>> v253, ref<array<real<4>,1>> v254, uint<4> v245, int<4> v246, vector<uint<4>,3> v255, vector<uint<4>,3> v256, vector<uint<4>,3> v257){
                parallel(job([vector.reduction(v257, 1, uint.mul)-vector.reduction(v257, 1, uint.mul)])[decl ref<array<real<4>,1>> v241 = v251, decl ref<array<real<4>,1>> v242 = v252, decl ref<array<int<4>,1>> v243 = v253, decl ref<array<real<4>,1>> v244 = v254, decl vector<uint<4>,3> v247 = v255, decl vector<uint<4>,3> v248 = v256, decl vector<uint<4>,3> v249 = v257]{
                    default: bind(){fun(ref<array<real<4>,1>> v35, ref<array<real<4>,1>> v36, ref<array<int<4>,1>> v37, ref<array<real<4>,1>> v38, uint<4> v39, int<4> v40, vector<uint<4>,3> v238, vector<uint<4>,3> v239, vector<uint<4>,3> v240){
                        array.ref.elem.1D(v36, 0) := v238[0];
                        array.ref.elem.1D(v36, 1) := v238[1];
                        array.ref.elem.1D(v36, 2) := v238[2];
                        array.ref.elem.1D(v36, 3) := v240[0];
                        array.ref.elem.1D(v36, 4) := v240[1];
                        array.ref.elem.1D(v36, 5) := v240[2];
                        array.ref.elem.1D(v36, 6) := v239[0];
                        array.ref.elem.1D(v36, 7) := v239[1];
                        array.ref.elem.1D(v36, 8) := v239[2];
                    }(v241, v242, v243, v244, v245, v246, v247, v248, v249)}
                });
                mergeAll();
            }(v258, v259, v260, v261, v262, v263, v264, v265, v266)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v300, ref<array<real<4>,1>> v301, ref<array<int<4>,1>> v302, ref<array<real<4>,1>> v294, uint<4> v295, int<4> v296, vector<uint<4>,3> v275, vector<uint<4>,3> v304){
        decl vector<uint<4>,3> v303 = vector.pointwise(uint.div)(v275, v304);
        parallel(job([vector.reduction(v303, 1, uint.mul)-vector.reduction(v303, 1, uint.mul)])[decl ref<array<real<4>,1>> v291 = v300, decl ref<array<real<4>,1>> v292 = v301, decl ref<array<int<4>,1>> v293 = v302, decl vector<uint<4>,3> v297 = v303, decl vector<uint<4>,3> v298 = v304]{
            default: bind(){fun(ref<array<real<4>,1>> v286, ref<array<real<4>,1>> v287, ref<array<int<4>,1>> v288, ref<array<real<4>,1>> v289, uint<4> v282, int<4> v283, vector<uint<4>,3> v276, vector<uint<4>,3> v290){
                parallel(job([vector.reduction(v290, 1, uint.mul)-vector.reduction(v290, 1, uint.mul)])[decl ref<array<real<4>,1>> v278 = v286, decl ref<array<real<4>,1>> v279 = v287, decl ref<array<int<4>,1>> v280 = v288, decl ref<array<real<4>,1>> v281 = v289, decl vector<uint<4>,3> v284 = v290]{
                    default: bind(){fun(ref<array<real<4>,1>> v42, ref<array<real<4>,1>> v43, ref<array<int<4>,1>> v44, ref<array<real<4>,1>> v45, uint<4> v46, int<4> v47, vector<uint<4>,3> v277){
                        if(v46==v47) array.ref.elem.1D(v43, 0) := array.ref.elem.1D(v42, 0) else { };
                    }(v278, v279, v280, v281, v282, v283, v284)}
                });
                mergeAll();
            }(v291, v292, v293, v294, v295, v296, v297, v298)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v351, ref<array<real<4>,1>> v352, ref<array<int<4>,1>> v353, ref<array<real<4>,1>> v345, uint<4> v346, int<4> v347, vector<uint<4>,3> v306, vector<uint<4>,3> v355){
        decl vector<uint<4>,3> v354 = vector.pointwise(uint.div)(v306, v355);
        parallel(job([vector.reduction(v354, 1, uint.mul)-vector.reduction(v354, 1, uint.mul)])[decl ref<array<real<4>,1>> v342 = v351, decl ref<array<real<4>,1>> v343 = v352, decl ref<array<int<4>,1>> v344 = v353, decl vector<uint<4>,3> v348 = v354, decl vector<uint<4>,3> v349 = v355]{
            default: bind(){fun(ref<array<real<4>,1>> v336, ref<array<real<4>,1>> v337, ref<array<int<4>,1>> v338, ref<array<real<4>,1>> v339, uint<4> v331, int<4> v332, vector<uint<4>,3> v340, vector<uint<4>,3> v341){
                parallel(job([vector.reduction(v341, 1, uint.mul)-vector.reduction(v341, 1, uint.mul)])[decl ref<array<real<4>,1>> v327 = v336, decl ref<array<real<4>,1>> v328 = v337, decl ref<array<int<4>,1>> v329 = v338, decl ref<array<real<4>,1>> v330 = v339, decl vector<uint<4>,3> v333 = v340, decl vector<uint<4>,3> v334 = v341]{
                    default: bind(){fun(ref<array<real<4>,1>> v49, ref<array<real<4>,1>> v50, ref<array<int<4>,1>> v51, ref<array<real<4>,1>> v52, uint<4> v53, int<4> v54, vector<uint<4>,3> v307, vector<uint<4>,3> v308){
                        decl ref<vector<uint<4>,3>> v55 =  var(undefined(type<vector<uint<4>,3>>));
                        vector.ref.elem(v55, 0) := fun(uint<4> v309, vector<uint<4>,3> v311, vector<uint<4>,3> v310){
                            decl uint<4> v312 = getThreadID(0);
                            decl uint<4> v313 = getThreadID(1);
                            switch(v309) {
                                case 0: return v312/v310[2]/v310[1]+v310[0]*v313/v311[2]/v311[1]
                                case 1: return v312/v310[2]%v310[1]+v310[1]*v313/v311[2]%v311[1]
                                case 2: return v312%v310[2]+v310[2]*v313/v311[2]%v311[1]
                                default: { }
                            };
                        }(0, v307, v308);
                        vector.ref.elem(v55, 1) := fun(uint<4> v315, vector<uint<4>,3> v317, vector<uint<4>,3> v316){
                            decl uint<4> v318 = getThreadID(0);
                            decl uint<4> v319 = getThreadID(1);
                            switch(v315) {
                                case 0: return v318/v316[2]/v316[1]+v316[0]*v319/v317[2]/v317[1]
                                case 1: return v318/v316[2]%v316[1]+v316[1]*v319/v317[2]%v317[1]
                                case 2: return v318%v316[2]+v316[2]*v319/v317[2]%v317[1]
                                default: { }
                            };
                        }(1, v307, v308);
                        vector.ref.elem(v55, 2) := fun(uint<4> v321, vector<uint<4>,3> v323, vector<uint<4>,3> v322){
                            decl uint<4> v324 = getThreadID(0);
                            decl uint<4> v325 = getThreadID(1);
                            switch(v321) {
                                case 0: return v324/v322[2]/v322[1]+v322[0]*v325/v323[2]/v323[1]
                                case 1: return v324/v322[2]%v322[1]+v322[1]*v325/v323[2]%v323[1]
                                case 2: return v324%v322[2]+v322[2]*v325/v323[2]%v323[1]
                                default: { }
                            };
                        }(2, v307, v308);
                        decl ref<uint<4>> v56 =  var(vector.ref.elem(v55, 0)*array.ref.elem.1D(v51, 2)*array.ref.elem.1D(v51, 1)+vector.ref.elem(v55, 1)*array.ref.elem.1D(v51, 2)+vector.ref.elem(v55, 2));
                        array.ref.elem.1D(v50, v56) := array.ref.elem.1D(v49, v56);
                    }(v327, v328, v329, v330, v331, v332, v333, v334)}
                });
                mergeAll();
            }(v342, v343, v344, v345, v346, v347, v348, v349)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v396, ref<array<real<4>,1>> v397, ref<array<int<4>,1>> v398, ref<array<real<4>,1>> v390, uint<4> v391, int<4> v392, vector<uint<4>,3> v357, vector<uint<4>,3> v400){
        decl vector<uint<4>,3> v399 = vector.pointwise(uint.div)(v357, v400);
        parallel(job([vector.reduction(v399, 1, uint.mul)-vector.reduction(v399, 1, uint.mul)])[decl ref<array<real<4>,1>> v387 = v396, decl ref<array<real<4>,1>> v388 = v397, decl ref<array<int<4>,1>> v389 = v398, decl vector<uint<4>,3> v393 = v399, decl vector<uint<4>,3> v394 = v400]{
            default: bind(){fun(ref<array<real<4>,1>> v381, ref<array<real<4>,1>> v382, ref<array<int<4>,1>> v383, ref<array<real<4>,1>> v384, uint<4> v376, int<4> v377, vector<uint<4>,3> v385, vector<uint<4>,3> v386){
                parallel(job([vector.reduction(v386, 1, uint.mul)-vector.reduction(v386, 1, uint.mul)])[decl ref<array<real<4>,1>> v372 = v381, decl ref<array<real<4>,1>> v373 = v382, decl ref<array<int<4>,1>> v374 = v383, decl ref<array<real<4>,1>> v375 = v384, decl vector<uint<4>,3> v378 = v385, decl vector<uint<4>,3> v379 = v386]{
                    default: bind(){fun(ref<array<real<4>,1>> v58, ref<array<real<4>,1>> v59, ref<array<int<4>,1>> v60, ref<array<real<4>,1>> v61, uint<4> v62, int<4> v63, vector<uint<4>,3> v358, vector<uint<4>,3> v359){
                        decl ref<uint<4>> v64 =  var(fun(uint<4> v360, vector<uint<4>,3> v361){
                            decl uint<4> v363 = getThreadID(0);
                            switch(v360) {
                                case 0: return v363/v361[2]/v361[1]
                                case 1: return v363/v361[2]%v361[1]
                                case 2: return v363%v361[2]
                                default: { }
                            };
                        }(0, v359));
                        decl ref<uint<4>> v65 =  var(fun(uint<4> v366, vector<uint<4>,3> v368, vector<uint<4>,3> v367){
                            decl uint<4> v369 = getThreadID(0);
                            decl uint<4> v370 = getThreadID(1);
                            switch(v366) {
                                case 0: return v369/v367[2]/v367[1]+v367[0]*v370/v368[2]/v368[1]
                                case 1: return v369/v367[2]%v367[1]+v367[1]*v370/v368[2]%v368[1]
                                case 2: return v369%v367[2]+v367[2]*v370/v368[2]%v368[1]
                                default: { }
                            };
                        }(0, v358, v359));
                        array.ref.elem.1D(v61, v64) := 7.0f;
                        barrier(getThreadGroup(0));
                        array.ref.elem.1D(v59, v65) := array.ref.elem.1D(v61, v64);
                    }(v372, v373, v374, v375, v376, v377, v378, v379)}
                });
                mergeAll();
            }(v387, v388, v389, v390, v391, v392, v393, v394)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v447, ref<array<real<4>,1>> v448, ref<array<int<4>,1>> v449, ref<array<real<4>,1>> v441, uint<4> v442, int<4> v443, vector<uint<4>,3> v402, vector<uint<4>,3> v451){
        decl vector<uint<4>,3> v450 = vector.pointwise(uint.div)(v402, v451);
        parallel(job([vector.reduction(v450, 1, uint.mul)-vector.reduction(v450, 1, uint.mul)])[decl ref<array<real<4>,1>> v438 = v447, decl ref<array<real<4>,1>> v439 = v448, decl ref<array<int<4>,1>> v440 = v449, decl vector<uint<4>,3> v444 = v450, decl vector<uint<4>,3> v445 = v451]{
            default: bind(){fun(ref<array<real<4>,1>> v432, ref<array<real<4>,1>> v433, ref<array<int<4>,1>> v434, ref<array<real<4>,1>> v435, uint<4> v427, int<4> v428, vector<uint<4>,3> v436, vector<uint<4>,3> v437){
                parallel(job([vector.reduction(v437, 1, uint.mul)-vector.reduction(v437, 1, uint.mul)])[decl ref<array<real<4>,1>> v423 = v432, decl ref<array<real<4>,1>> v424 = v433, decl ref<array<int<4>,1>> v425 = v434, decl ref<array<real<4>,1>> v426 = v435, decl vector<uint<4>,3> v429 = v436, decl vector<uint<4>,3> v430 = v437]{
                    default: bind(){fun(ref<array<real<4>,1>> v67, ref<array<real<4>,1>> v68, ref<array<int<4>,1>> v69, ref<array<real<4>,1>> v70, uint<4> v71, int<4> v72, vector<uint<4>,3> v403, vector<uint<4>,3> v404){
                        decl ref<int<4>> v73 =  var(fun(uint<4> v405, vector<uint<4>,3> v407, vector<uint<4>,3> v406){
                            decl uint<4> v408 = getThreadID(0);
                            decl uint<4> v409 = getThreadID(1);
                            switch(v405) {
                                case 0: return v408/v406[2]/v406[1]+v406[0]*v409/v407[2]/v407[1]
                                case 1: return v408/v406[2]%v406[1]+v406[1]*v409/v407[2]%v407[1]
                                case 2: return v408%v406[2]+v406[2]*v409/v407[2]%v407[1]
                                default: { }
                            };
                        }(0, v403, v404)*array.ref.elem.1D(v69, 1)*array.ref.elem.1D(v69, 2)+fun(uint<4> v411, vector<uint<4>,3> v413, vector<uint<4>,3> v412){
                            decl uint<4> v414 = getThreadID(0);
                            decl uint<4> v415 = getThreadID(1);
                            switch(v411) {
                                case 0: return v414/v412[2]/v412[1]+v412[0]*v415/v413[2]/v413[1]
                                case 1: return v414/v412[2]%v412[1]+v412[1]*v415/v413[2]%v413[1]
                                case 2: return v414%v412[2]+v412[2]*v415/v413[2]%v413[1]
                                default: { }
                            };
                        }(1, v403, v404)*array.ref.elem.1D(v69, 2)+fun(uint<4> v417, vector<uint<4>,3> v419, vector<uint<4>,3> v418){
                            decl uint<4> v420 = getThreadID(0);
                            decl uint<4> v421 = getThreadID(1);
                            switch(v417) {
                                case 0: return v420/v418[2]/v418[1]+v418[0]*v421/v419[2]/v419[1]
                                case 1: return v420/v418[2]%v418[1]+v418[1]*v421/v419[2]%v419[1]
                                case 2: return v420%v418[2]+v418[2]*v421/v419[2]%v419[1]
                                default: { }
                            };
                        }(2, v403, v404));
                        decl ref<int<4>> v74 =  var(array.ref.elem.1D(v69, 0)*array.ref.elem.1D(v69, 1)*array.ref.elem.1D(v69, 2)-17);
                        if(v73>=v74) {
                            return unit;
                        } else { };
                        array.ref.elem.1D(v68, v73) := array.ref.elem.1D(v67, v73)+array.ref.elem.1D(v69, v73);
                    }(v423, v424, v425, v426, v427, v428, v429, v430)}
                });
                mergeAll();
            }(v438, v439, v440, v441, v442, v443, v444, v445)}
        });
        mergeAll();
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(ref<array<real<4>,1>> v88, vector<uint<4>,3> v76, vector<uint<4>,3> v90){
        decl vector<uint<4>,3> v89 = vector.pointwise(uint.div)(v76, v90);
        parallel(job(([vector.reduction(v89, 1, uint.mul)-vector.reduction(v89, 1, uint.mul)]))[decl ref<array<real<4>,1>> v84 = v88, decl vector<uint<4>,3> v85 = v89, decl vector<uint<4>,3> v86 = v90]{
            default: bind(){fun(ref<array<real<4>,1>> v82, vector<uint<4>,3> v77, vector<uint<4>,3> v83){
                parallel(job(([vector.reduction(v83, 1, uint.mul)-vector.reduction(v83, 1, uint.mul)]))[decl ref<array<real<4>,1>> v79 = v82, decl vector<uint<4>,3> v80 = v83]{
                    default: bind(){fun(ref<array<real<4>,1>> v1, vector<uint<4>,3> v78){
                        decl ref<real<4>> v2 = array.ref.elem.1D(v1, CAST<uint<4>>(0));
                    }(v79, v80)}
                });
                mergeAll();
            }(v84, v85, v86)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v104, vector<uint<4>,3> v92, vector<uint<4>,3> v106){
        decl vector<uint<4>,3> v105 = vector.pointwise(uint.div)(v92, v106);
        parallel(job(([vector.reduction(v105, 1, uint.mul)-vector.reduction(v105, 1, uint.mul)]))[decl ref<array<real<4>,1>> v100 = v104, decl vector<uint<4>,3> v101 = v105, decl vector<uint<4>,3> v102 = v106]{
            default: bind(){fun(ref<array<real<4>,1>> v98, vector<uint<4>,3> v93, vector<uint<4>,3> v99){
                parallel(job(([vector.reduction(v99, 1, uint.mul)-vector.reduction(v99, 1, uint.mul)]))[decl ref<array<real<4>,1>> v95 = v98, decl vector<uint<4>,3> v96 = v99]{
                    default: bind(){fun(ref<array<real<4>,1>> v4, vector<uint<4>,3> v94){
                        decl ref<real<4>> v5 = array.ref.elem.1D(v4, CAST<uint<4>>(0));
                    }(v95, v96)}
                });
                mergeAll();
            }(v100, v101, v102)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<int<4>,1>> v116, vector<uint<4>,3> v108, vector<uint<4>,3> v121){
        decl vector<uint<4>,3> v120 = vector.pointwise(uint.div)(v108, v121);
        parallel(job(([vector.reduction(v120, 1, uint.mul)-vector.reduction(v120, 1, uint.mul)]))[decl vector<uint<4>,3> v117 = v120, decl vector<uint<4>,3> v118 = v121]{
            default: bind(){fun(ref<array<int<4>,1>> v114, vector<uint<4>,3> v109, vector<uint<4>,3> v115){
                parallel(job(([vector.reduction(v115, 1, uint.mul)-vector.reduction(v115, 1, uint.mul)]))[decl ref<array<int<4>,1>> v111 = v114, decl vector<uint<4>,3> v112 = v115]{
                    default: bind(){fun(ref<array<int<4>,1>> v7, vector<uint<4>,3> v110){
                        decl ref<int<4>> v8 = array.ref.elem.1D(v7, CAST<uint<4>>(0));
                    }(v111, v112)}
                });
                mergeAll();
            }(v116, v117, v118)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(int<2> v130, vector<uint<4>,3> v123, vector<uint<4>,3> v135){
        decl vector<uint<4>,3> v134 = vector.pointwise(uint.div)(v123, v135);
        parallel(job(([vector.reduction(v134, 1, uint.mul)-vector.reduction(v134, 1, uint.mul)]))[decl vector<uint<4>,3> v131 = v134, decl vector<uint<4>,3> v132 = v135]{
            default: bind(){fun(int<2> v126, vector<uint<4>,3> v124, vector<uint<4>,3> v129){
                parallel(job(([vector.reduction(v129, 1, uint.mul)-vector.reduction(v129, 1, uint.mul)]))[decl vector<uint<4>,3> v127 = v129]{
                    default: bind(){fun(int<2> v10, vector<uint<4>,3> v125){
                        decl ref<int<2>> v11 = ( var(v10));
                    }(v126, v127)}
                });
                mergeAll();
            }(v130, v131, v132)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v162, ref<array<real<4>,1>> v163, ref<array<int<4>,1>> v164, ref<array<real<4>,1>> v156, uint<4> v157, int<4> v158, vector<uint<4>,3> v137, vector<uint<4>,3> v166){
        decl vector<uint<4>,3> v165 = vector.pointwise(uint.div)(v137, v166);
        parallel(job(([vector.reduction(v165, 1, uint.mul)-vector.reduction(v165, 1, uint.mul)]))[decl ref<array<real<4>,1>> v153 = v162, decl ref<array<real<4>,1>> v154 = v163, decl ref<array<int<4>,1>> v155 = v164, decl vector<uint<4>,3> v159 = v165, decl vector<uint<4>,3> v160 = v166]{
            default: bind(){fun(ref<array<real<4>,1>> v148, ref<array<real<4>,1>> v149, ref<array<int<4>,1>> v150, ref<array<real<4>,1>> v151, uint<4> v144, int<4> v145, vector<uint<4>,3> v138, vector<uint<4>,3> v152){
                parallel(job(([vector.reduction(v152, 1, uint.mul)-vector.reduction(v152, 1, uint.mul)]))[decl ref<array<real<4>,1>> v140 = v148, decl ref<array<real<4>,1>> v141 = v149, decl ref<array<int<4>,1>> v142 = v150, decl ref<array<real<4>,1>> v143 = v151, decl vector<uint<4>,3> v146 = v152]{
                    default: bind(){fun(ref<array<real<4>,1>> v13, ref<array<real<4>,1>> v14, ref<array<int<4>,1>> v15, ref<array<real<4>,1>> v16, uint<4> v17, int<4> v18, vector<uint<4>,3> v139){
                        (array.ref.elem.1D(v14, CAST<uint<4>>(0)) := CAST<real<4>>(( *array.ref.elem.1D(v15, CAST<uint<4>>(0)))));
                    }(v140, v141, v142, v143, v144, v145, v146)}
                });
                mergeAll();
            }(v153, v154, v155, v156, v157, v158, v159, v160)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v193, ref<array<real<4>,1>> v194, ref<array<int<4>,1>> v195, ref<array<real<4>,1>> v187, uint<4> v188, int<4> v189, vector<uint<4>,3> v168, vector<uint<4>,3> v197){
        decl vector<uint<4>,3> v196 = vector.pointwise(uint.div)(v168, v197);
        parallel(job(([vector.reduction(v196, 1, uint.mul)-vector.reduction(v196, 1, uint.mul)]))[decl ref<array<real<4>,1>> v184 = v193, decl ref<array<real<4>,1>> v185 = v194, decl ref<array<int<4>,1>> v186 = v195, decl vector<uint<4>,3> v190 = v196, decl vector<uint<4>,3> v191 = v197]{
            default: bind(){fun(ref<array<real<4>,1>> v179, ref<array<real<4>,1>> v180, ref<array<int<4>,1>> v181, ref<array<real<4>,1>> v182, uint<4> v175, int<4> v176, vector<uint<4>,3> v169, vector<uint<4>,3> v183){
                parallel(job(([vector.reduction(v183, 1, uint.mul)-vector.reduction(v183, 1, uint.mul)]))[decl ref<array<real<4>,1>> v171 = v179, decl ref<array<real<4>,1>> v172 = v180, decl ref<array<int<4>,1>> v173 = v181, decl ref<array<real<4>,1>> v174 = v182, decl vector<uint<4>,3> v177 = v183]{
                    default: bind(){fun(ref<array<real<4>,1>> v20, ref<array<real<4>,1>> v21, ref<array<int<4>,1>> v22, ref<array<real<4>,1>> v23, uint<4> v24, int<4> v25, vector<uint<4>,3> v170){
                        (array.ref.elem.1D(v23, CAST<uint<4>>(( *array.ref.elem.1D(v22, CAST<uint<4>>(0))))) := 3.3f);
                        (array.ref.elem.1D(v21, CAST<uint<4>>(v24)) := (( *array.ref.elem.1D(v20, CAST<uint<4>>(1)))*( *array.ref.elem.1D(v23, CAST<uint<4>>(( *array.ref.elem.1D(v22, CAST<uint<4>>(0))))))));
                    }(v171, v172, v173, v174, v175, v176, v177)}
                });
                mergeAll();
            }(v184, v185, v186, v187, v188, v189, v190, v191)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v232, ref<array<real<4>,1>> v233, ref<array<int<4>,1>> v234, ref<array<real<4>,1>> v226, uint<4> v227, int<4> v228, vector<uint<4>,3> v199, vector<uint<4>,3> v236){
        decl vector<uint<4>,3> v235 = vector.pointwise(uint.div)(v199, v236);
        parallel(job(([vector.reduction(v235, 1, uint.mul)-vector.reduction(v235, 1, uint.mul)]))[decl ref<array<real<4>,1>> v223 = v232, decl ref<array<real<4>,1>> v224 = v233, decl ref<array<int<4>,1>> v225 = v234, decl vector<uint<4>,3> v229 = v235, decl vector<uint<4>,3> v230 = v236]{
            default: bind(){fun(ref<array<real<4>,1>> v217, ref<array<real<4>,1>> v218, ref<array<int<4>,1>> v219, ref<array<real<4>,1>> v220, uint<4> v212, int<4> v213, vector<uint<4>,3> v221, vector<uint<4>,3> v222){
                parallel(job(([vector.reduction(v222, 1, uint.mul)-vector.reduction(v222, 1, uint.mul)]))[decl ref<array<real<4>,1>> v208 = v217, decl ref<array<real<4>,1>> v209 = v218, decl ref<array<int<4>,1>> v210 = v219, decl ref<array<real<4>,1>> v211 = v220, decl vector<uint<4>,3> v214 = v221, decl vector<uint<4>,3> v215 = v222]{
                    default: bind(){fun(ref<array<real<4>,1>> v27, ref<array<real<4>,1>> v28, ref<array<int<4>,1>> v29, ref<array<real<4>,1>> v30, uint<4> v31, int<4> v32, vector<uint<4>,3> v200, vector<uint<4>,3> v201){
                        decl ref<uint<4>> v33 = ( var(fun(uint<4> v202, vector<uint<4>,3> v204, vector<uint<4>,3> v203){
                            decl uint<4> v205 = getThreadID(0);
                            decl uint<4> v206 = getThreadID(1);
                            switch(v202) {
                                case 0: return (((v205/(v203[2]))/(v203[1]))+((v203[0])*((v206/(v204[2]))/(v204[1]))))
                                case 1: return (((v205/(v203[2]))%(v203[1]))+((v203[1])*((v206/(v204[2]))%(v204[1]))))
                                case 2: return ((v205%(v203[2]))+((v203[2])*((v206/(v204[2]))%(v204[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v200, v201)));
                        (array.ref.elem.1D(v28, CAST<uint<4>>(( *v33))) := CAST<real<4>>(( *v33)));
                    }(v208, v209, v210, v211, v212, v213, v214, v215)}
                });
                mergeAll();
            }(v223, v224, v225, v226, v227, v228, v229, v230)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v268, ref<array<real<4>,1>> v269, ref<array<int<4>,1>> v270, ref<array<real<4>,1>> v261, uint<4> v262, int<4> v263, vector<uint<4>,3> v271, vector<uint<4>,3> v273){
        decl vector<uint<4>,3> v272 = vector.pointwise(uint.div)(v271, v273);
        parallel(job(([vector.reduction(v272, 1, uint.mul)-vector.reduction(v272, 1, uint.mul)]))[decl ref<array<real<4>,1>> v258 = v268, decl ref<array<real<4>,1>> v259 = v269, decl ref<array<int<4>,1>> v260 = v270, decl vector<uint<4>,3> v264 = v271, decl vector<uint<4>,3> v265 = v272, decl vector<uint<4>,3> v266 = v273]{
            default: bind(){fun(ref<array<real<4>,1>> v251, ref<array<real<4>,1>> v252, ref<array<int<4>,1>> v253, ref<array<real<4>,1>> v254, uint<4> v245, int<4> v246, vector<uint<4>,3> v255, vector<uint<4>,3> v256, vector<uint<4>,3> v257){
                parallel(job(([vector.reduction(v257, 1, uint.mul)-vector.reduction(v257, 1, uint.mul)]))[decl ref<array<real<4>,1>> v241 = v251, decl ref<array<real<4>,1>> v242 = v252, decl ref<array<int<4>,1>> v243 = v253, decl ref<array<real<4>,1>> v244 = v254, decl vector<uint<4>,3> v247 = v255, decl vector<uint<4>,3> v248 = v256, decl vector<uint<4>,3> v249 = v257]{
                    default: bind(){fun(ref<array<real<4>,1>> v35, ref<array<real<4>,1>> v36, ref<array<int<4>,1>> v37, ref<array<real<4>,1>> v38, uint<4> v39, int<4> v40, vector<uint<4>,3> v238, vector<uint<4>,3> v239, vector<uint<4>,3> v240){
                        (array.ref.elem.1D(v36, CAST<uint<4>>(0)) := CAST<real<4>>((v238[CAST<uint<4>>(0)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(1)) := CAST<real<4>>((v238[CAST<uint<4>>(1)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(2)) := CAST<real<4>>((v238[CAST<uint<4>>(2)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(3)) := CAST<real<4>>((v240[CAST<uint<4>>(0)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(4)) := CAST<real<4>>((v240[CAST<uint<4>>(1)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(5)) := CAST<real<4>>((v240[CAST<uint<4>>(2)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(6)) := CAST<real<4>>((v239[CAST<uint<4>>(0)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(7)) := CAST<real<4>>((v239[CAST<uint<4>>(1)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(8)) := CAST<real<4>>((v239[CAST<uint<4>>(2)])));
                    }(v241, v242, v243, v244, v245, v246, v247, v248, v249)}
                });
                mergeAll();
            }(v258, v259, v260, v261, v262, v263, v264, v265, v266)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v300, ref<array<real<4>,1>> v301, ref<array<int<4>,1>> v302, ref<array<real<4>,1>> v294, uint<4> v295, int<4> v296, vector<uint<4>,3> v275, vector<uint<4>,3> v304){
        decl vector<uint<4>,3> v303 = vector.pointwise(uint.div)(v275, v304);
        parallel(job(([vector.reduction(v303, 1, uint.mul)-vector.reduction(v303, 1, uint.mul)]))[decl ref<array<real<4>,1>> v291 = v300, decl ref<array<real<4>,1>> v292 = v301, decl ref<array<int<4>,1>> v293 = v302, decl vector<uint<4>,3> v297 = v303, decl vector<uint<4>,3> v298 = v304]{
            default: bind(){fun(ref<array<real<4>,1>> v286, ref<array<real<4>,1>> v287, ref<array<int<4>,1>> v288, ref<array<real<4>,1>> v289, uint<4> v282, int<4> v283, vector<uint<4>,3> v276, vector<uint<4>,3> v290){
                parallel(job(([vector.reduction(v290, 1, uint.mul)-vector.reduction(v290, 1, uint.mul)]))[decl ref<array<real<4>,1>> v278 = v286, decl ref<array<real<4>,1>> v279 = v287, decl ref<array<int<4>,1>> v280 = v288, decl ref<array<real<4>,1>> v281 = v289, decl vector<uint<4>,3> v284 = v290]{
                    default: bind(){fun(ref<array<real<4>,1>> v42, ref<array<real<4>,1>> v43, ref<array<int<4>,1>> v44, ref<array<real<4>,1>> v45, uint<4> v46, int<4> v47, vector<uint<4>,3> v277){
                        if((v46==CAST<uint<4>>(v47))) (array.ref.elem.1D(v43, CAST<uint<4>>(0)) := ( *array.ref.elem.1D(v42, CAST<uint<4>>(0)))) else { };
                    }(v278, v279, v280, v281, v282, v283, v284)}
                });
                mergeAll();
            }(v291, v292, v293, v294, v295, v296, v297, v298)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v351, ref<array<real<4>,1>> v352, ref<array<int<4>,1>> v353, ref<array<real<4>,1>> v345, uint<4> v346, int<4> v347, vector<uint<4>,3> v306, vector<uint<4>,3> v355){
        decl vector<uint<4>,3> v354 = vector.pointwise(uint.div)(v306, v355);
        parallel(job(([vector.reduction(v354, 1, uint.mul)-vector.reduction(v354, 1, uint.mul)]))[decl ref<array<real<4>,1>> v342 = v351, decl ref<array<real<4>,1>> v343 = v352, decl ref<array<int<4>,1>> v344 = v353, decl vector<uint<4>,3> v348 = v354, decl vector<uint<4>,3> v349 = v355]{
            default: bind(){fun(ref<array<real<4>,1>> v336, ref<array<real<4>,1>> v337, ref<array<int<4>,1>> v338, ref<array<real<4>,1>> v339, uint<4> v331, int<4> v332, vector<uint<4>,3> v340, vector<uint<4>,3> v341){
                parallel(job(([vector.reduction(v341, 1, uint.mul)-vector.reduction(v341, 1, uint.mul)]))[decl ref<array<real<4>,1>> v327 = v336, decl ref<array<real<4>,1>> v328 = v337, decl ref<array<int<4>,1>> v329 = v338, decl ref<array<real<4>,1>> v330 = v339, decl vector<uint<4>,3> v333 = v340, decl vector<uint<4>,3> v334 = v341]{
                    default: bind(){fun(ref<array<real<4>,1>> v49, ref<array<real<4>,1>> v50, ref<array<int<4>,1>> v51, ref<array<real<4>,1>> v52, uint<4> v53, int<4> v54, vector<uint<4>,3> v307, vector<uint<4>,3> v308){
                        decl ref<vector<uint<4>,3>> v55 = ( var(undefined(type<vector<uint<4>,3>>)));
                        (vector.ref.elem(v55, CAST<uint<4>>(0)) := fun(uint<4> v309, vector<uint<4>,3> v311, vector<uint<4>,3> v310){
                            decl uint<4> v312 = getThreadID(0);
                            decl uint<4> v313 = getThreadID(1);
                            switch(v309) {
                                case 0: return (((v312/(v310[2]))/(v310[1]))+((v310[0])*((v313/(v311[2]))/(v311[1]))))
                                case 1: return (((v312/(v310[2]))%(v310[1]))+((v310[1])*((v313/(v311[2]))%(v311[1]))))
                                case 2: return ((v312%(v310[2]))+((v310[2])*((v313/(v311[2]))%(v311[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v307, v308));
                        (vector.ref.elem(v55, CAST<uint<4>>(1)) := fun(uint<4> v315, vector<uint<4>,3> v317, vector<uint<4>,3> v316){
                            decl uint<4> v318 = getThreadID(0);
                            decl uint<4> v319 = getThreadID(1);
                            switch(v315) {
                                case 0: return (((v318/(v316[2]))/(v316[1]))+((v316[0])*((v319/(v317[2]))/(v317[1]))))
                                case 1: return (((v318/(v316[2]))%(v316[1]))+((v316[1])*((v319/(v317[2]))%(v317[1]))))
                                case 2: return ((v318%(v316[2]))+((v316[2])*((v319/(v317[2]))%(v317[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(1), v307, v308));
                        (vector.ref.elem(v55, CAST<uint<4>>(2)) := fun(uint<4> v321, vector<uint<4>,3> v323, vector<uint<4>,3> v322){
                            decl uint<4> v324 = getThreadID(0);
                            decl uint<4> v325 = getThreadID(1);
                            switch(v321) {
                                case 0: return (((v324/(v322[2]))/(v322[1]))+((v322[0])*((v325/(v323[2]))/(v323[1]))))
                                case 1: return (((v324/(v322[2]))%(v322[1]))+((v322[1])*((v325/(v323[2]))%(v323[1]))))
                                case 2: return ((v324%(v322[2]))+((v322[2])*((v325/(v323[2]))%(v323[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(2), v307, v308));
                        decl ref<uint<4>> v56 = ( var(((((( *vector.ref.elem(v55, CAST<uint<4>>(0)))*CAST<uint<4>>(( *array.ref.elem.1D(v51, CAST<uint<4>>(2)))))*CAST<uint<4>>(( *array.ref.elem.1D(v51, CAST<uint<4>>(1)))))+(( *vector.ref.elem(v55, CAST<uint<4>>(1)))*CAST<uint<4>>(( *array.ref.elem.1D(v51, CAST<uint<4>>(2))))))+( *vector.ref.elem(v55, CAST<uint<4>>(2))))));
                        (array.ref.elem.1D(v50, CAST<uint<4>>(( *v56))) := ( *array.ref.elem.1D(v49, CAST<uint<4>>(( *v56)))));
                    }(v327, v328, v329, v330, v331, v332, v333, v334)}
                });
                mergeAll();
            }(v342, v343, v344, v345, v346, v347, v348, v349)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v396, ref<array<real<4>,1>> v397, ref<array<int<4>,1>> v398, ref<array<real<4>,1>> v390, uint<4> v391, int<4> v392, vector<uint<4>,3> v357, vector<uint<4>,3> v400){
        decl vector<uint<4>,3> v399 = vector.pointwise(uint.div)(v357, v400);
        parallel(job(([vector.reduction(v399, 1, uint.mul)-vector.reduction(v399, 1, uint.mul)]))[decl ref<array<real<4>,1>> v387 = v396, decl ref<array<real<4>,1>> v388 = v397, decl ref<array<int<4>,1>> v389 = v398, decl vector<uint<4>,3> v393 = v399, decl vector<uint<4>,3> v394 = v400]{
            default: bind(){fun(ref<array<real<4>,1>> v381, ref<array<real<4>,1>> v382, ref<array<int<4>,1>> v383, ref<array<real<4>,1>> v384, uint<4> v376, int<4> v377, vector<uint<4>,3> v385, vector<uint<4>,3> v386){
                parallel(job(([vector.reduction(v386, 1, uint.mul)-vector.reduction(v386, 1, uint.mul)]))[decl ref<array<real<4>,1>> v372 = v381, decl ref<array<real<4>,1>> v373 = v382, decl ref<array<int<4>,1>> v374 = v383, decl ref<array<real<4>,1>> v375 = v384, decl vector<uint<4>,3> v378 = v385, decl vector<uint<4>,3> v379 = v386]{
                    default: bind(){fun(ref<array<real<4>,1>> v58, ref<array<real<4>,1>> v59, ref<array<int<4>,1>> v60, ref<array<real<4>,1>> v61, uint<4> v62, int<4> v63, vector<uint<4>,3> v358, vector<uint<4>,3> v359){
                        decl ref<uint<4>> v64 = ( var(fun(uint<4> v360, vector<uint<4>,3> v361){
                            decl uint<4> v363 = getThreadID(0);
                            switch(v360) {
                                case 0: return ((v363/(v361[2]))/(v361[1]))
                                case 1: return ((v363/(v361[2]))%(v361[1]))
                                case 2: return (v363%(v361[2]))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v359)));
                        decl ref<uint<4>> v65 = ( var(fun(uint<4> v366, vector<uint<4>,3> v368, vector<uint<4>,3> v367){
                            decl uint<4> v369 = getThreadID(0);
                            decl uint<4> v370 = getThreadID(1);
                            switch(v366) {
                                case 0: return (((v369/(v367[2]))/(v367[1]))+((v367[0])*((v370/(v368[2]))/(v368[1]))))
                                case 1: return (((v369/(v367[2]))%(v367[1]))+((v367[1])*((v370/(v368[2]))%(v368[1]))))
                                case 2: return ((v369%(v367[2]))+((v367[2])*((v370/(v368[2]))%(v368[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v358, v359)));
                        (array.ref.elem.1D(v61, CAST<uint<4>>(( *v64))) := 7.0f);
                        barrier(getThreadGroup(0));
                        (array.ref.elem.1D(v59, CAST<uint<4>>(( *v65))) := ( *array.ref.elem.1D(v61, CAST<uint<4>>(( *v64)))));
                    }(v372, v373, v374, v375, v376, v377, v378, v379)}
                });
                mergeAll();
            }(v387, v388, v389, v390, v391, v392, v393, v394)}
        });
        mergeAll();
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v447, ref<array<real<4>,1>> v448, ref<array<int<4>,1>> v449, ref<array<real<4>,1>> v441, uint<4> v442, int<4> v443, vector<uint<4>,3> v402, vector<uint<4>,3> v451){
        decl vector<uint<4>,3> v450 = vector.pointwise(uint.div)(v402, v451);
        parallel(job(([vector.reduction(v450, 1, uint.mul)-vector.reduction(v450, 1, uint.mul)]))[decl ref<array<real<4>,1>> v438 = v447, decl ref<array<real<4>,1>> v439 = v448, decl ref<array<int<4>,1>> v440 = v449, decl vector<uint<4>,3> v444 = v450, decl vector<uint<4>,3> v445 = v451]{
            default: bind(){fun(ref<array<real<4>,1>> v432, ref<array<real<4>,1>> v433, ref<array<int<4>,1>> v434, ref<array<real<4>,1>> v435, uint<4> v427, int<4> v428, vector<uint<4>,3> v436, vector<uint<4>,3> v437){
                parallel(job(([vector.reduction(v437, 1, uint.mul)-vector.reduction(v437, 1, uint.mul)]))[decl ref<array<real<4>,1>> v423 = v432, decl ref<array<real<4>,1>> v424 = v433, decl ref<array<int<4>,1>> v425 = v434, decl ref<array<real<4>,1>> v426 = v435, decl vector<uint<4>,3> v429 = v436, decl vector<uint<4>,3> v430 = v437]{
                    default: bind(){fun(ref<array<real<4>,1>> v67, ref<array<real<4>,1>> v68, ref<array<int<4>,1>> v69, ref<array<real<4>,1>> v70, uint<4> v71, int<4> v72, vector<uint<4>,3> v403, vector<uint<4>,3> v404){
                        decl ref<int<4>> v73 = ( var(CAST<int<4>>(((((fun(uint<4> v405, vector<uint<4>,3> v407, vector<uint<4>,3> v406){
                            decl uint<4> v408 = getThreadID(0);
                            decl uint<4> v409 = getThreadID(1);
                            switch(v405) {
                                case 0: return (((v408/(v406[2]))/(v406[1]))+((v406[0])*((v409/(v407[2]))/(v407[1]))))
                                case 1: return (((v408/(v406[2]))%(v406[1]))+((v406[1])*((v409/(v407[2]))%(v407[1]))))
                                case 2: return ((v408%(v406[2]))+((v406[2])*((v409/(v407[2]))%(v407[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v403, v404)*CAST<uint<4>>(( *array.ref.elem.1D(v69, CAST<uint<4>>(1)))))*CAST<uint<4>>(( *array.ref.elem.1D(v69, CAST<uint<4>>(2)))))+(fun(uint<4> v411, vector<uint<4>,3> v413, vector<uint<4>,3> v412){
                            decl uint<4> v414 = getThreadID(0);
                            decl uint<4> v415 = getThreadID(1);
                            switch(v411) {
                                case 0: return (((v414/(v412[2]))/(v412[1]))+((v412[0])*((v415/(v413[2]))/(v413[1]))))
                                case 1: return (((v414/(v412[2]))%(v412[1]))+((v412[1])*((v415/(v413[2]))%(v413[1]))))
                                case 2: return ((v414%(v412[2]))+((v412[2])*((v415/(v413[2]))%(v413[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(1), v403, v404)*CAST<uint<4>>(( *array.ref.elem.1D(v69, CAST<uint<4>>(2))))))+fun(uint<4> v417, vector<uint<4>,3> v419, vector<uint<4>,3> v418){
                            decl uint<4> v420 = getThreadID(0);
                            decl uint<4> v421 = getThreadID(1);
                            switch(v417) {
                                case 0: return (((v420/(v418[2]))/(v418[1]))+((v418[0])*((v421/(v419[2]))/(v419[1]))))
                                case 1: return (((v420/(v418[2]))%(v418[1]))+((v418[1])*((v421/(v419[2]))%(v419[1]))))
                                case 2: return ((v420%(v418[2]))+((v418[2])*((v421/(v419[2]))%(v419[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(2), v403, v404)))));
                        decl ref<int<4>> v74 = ( var((((( *array.ref.elem.1D(v69, CAST<uint<4>>(0)))*( *array.ref.elem.1D(v69, CAST<uint<4>>(1))))*( *array.ref.elem.1D(v69, CAST<uint<4>>(2))))-17)));
                        if((( *v73)>=( *v74))) {
                            return unit;
                        } else { };
                        (array.ref.elem.1D(v68, CAST<uint<4>>(( *v73))) := (( *array.ref.elem.1D(v67, CAST<uint<4>>(( *v73))))+CAST<real<4>>(( *array.ref.elem.1D(v69, CAST<uint<4>>(( *v73)))))));
                    }(v423, v424, v425, v426, v427, v428, v429, v430)}
                });
                mergeAll();
            }(v438, v439, v440, v441, v442, v443, v444, v445)}
        });
        mergeAll();
    }

