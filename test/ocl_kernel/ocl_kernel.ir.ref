// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(ref<array<real<4>,1>> v98, vector<uint<4>,3> v86, vector<uint<4>,3> v100){
        decl vector<uint<4>,3> v99 = vector.pointwise(uint.div)(v86, v100);
        parallel(job([vector.reduction(v99, 1, uint.mul)-vector.reduction(v99, 1, uint.mul)])[decl ref<array<real<4>,1>> v94 = v98, decl vector<uint<4>,3> v95 = v99, decl vector<uint<4>,3> v96 = v100]{
            default: bind(){fun(ref<array<real<4>,1>> v92, vector<uint<4>,3> v87, vector<uint<4>,3> v93){
                parallel(job([vector.reduction(v93, 1, uint.mul)-vector.reduction(v93, 1, uint.mul)])[decl ref<array<real<4>,1>> v89 = v92, decl vector<uint<4>,3> v90 = v93]{
                    default: bind(){fun(ref<array<real<4>,1>> v1, vector<uint<4>,3> v88){
                        decl ref<real<4>> v2 = array.ref.elem.1D(v1, 0);
                    }(v89, v90)}
                });
                mergeAll();
            }(v94, v95, v96)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v114, vector<uint<4>,3> v102, vector<uint<4>,3> v116){
        decl vector<uint<4>,3> v115 = vector.pointwise(uint.div)(v102, v116);
        parallel(job([vector.reduction(v115, 1, uint.mul)-vector.reduction(v115, 1, uint.mul)])[decl ref<array<real<4>,1>> v110 = v114, decl vector<uint<4>,3> v111 = v115, decl vector<uint<4>,3> v112 = v116]{
            default: bind(){fun(ref<array<real<4>,1>> v108, vector<uint<4>,3> v103, vector<uint<4>,3> v109){
                parallel(job([vector.reduction(v109, 1, uint.mul)-vector.reduction(v109, 1, uint.mul)])[decl ref<array<real<4>,1>> v105 = v108, decl vector<uint<4>,3> v106 = v109]{
                    default: bind(){fun(ref<array<real<4>,1>> v4, vector<uint<4>,3> v104){
                        decl ref<real<4>> v5 = array.ref.elem.1D(v4, 0);
                    }(v105, v106)}
                });
                mergeAll();
            }(v110, v111, v112)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<int<4>,1>> v126, vector<uint<4>,3> v118, vector<uint<4>,3> v131){
        decl vector<uint<4>,3> v130 = vector.pointwise(uint.div)(v118, v131);
        parallel(job([vector.reduction(v130, 1, uint.mul)-vector.reduction(v130, 1, uint.mul)])[decl vector<uint<4>,3> v127 = v130, decl vector<uint<4>,3> v128 = v131]{
            default: bind(){fun(ref<array<int<4>,1>> v124, vector<uint<4>,3> v119, vector<uint<4>,3> v125){
                parallel(job([vector.reduction(v125, 1, uint.mul)-vector.reduction(v125, 1, uint.mul)])[decl ref<array<int<4>,1>> v121 = v124, decl vector<uint<4>,3> v122 = v125]{
                    default: bind(){fun(ref<array<int<4>,1>> v7, vector<uint<4>,3> v120){
                        decl ref<int<4>> v8 = array.ref.elem.1D(v7, 0);
                    }(v121, v122)}
                });
                mergeAll();
            }(v126, v127, v128)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(int<2> v140, vector<uint<4>,3> v133, vector<uint<4>,3> v145){
        decl vector<uint<4>,3> v144 = vector.pointwise(uint.div)(v133, v145);
        parallel(job([vector.reduction(v144, 1, uint.mul)-vector.reduction(v144, 1, uint.mul)])[decl vector<uint<4>,3> v141 = v144, decl vector<uint<4>,3> v142 = v145]{
            default: bind(){fun(int<2> v136, vector<uint<4>,3> v134, vector<uint<4>,3> v139){
                parallel(job([vector.reduction(v139, 1, uint.mul)-vector.reduction(v139, 1, uint.mul)])[decl vector<uint<4>,3> v137 = v139]{
                    default: bind(){fun(int<2> v10, vector<uint<4>,3> v135){
                        decl ref<int<2>> v11 =  var(v10);
                    }(v136, v137)}
                });
                mergeAll();
            }(v140, v141, v142)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v172, ref<array<real<4>,1>> v173, ref<array<int<4>,1>> v174, ref<array<real<4>,1>> v166, uint<4> v167, int<4> v168, vector<uint<4>,3> v147, vector<uint<4>,3> v176){
        decl vector<uint<4>,3> v175 = vector.pointwise(uint.div)(v147, v176);
        parallel(job([vector.reduction(v175, 1, uint.mul)-vector.reduction(v175, 1, uint.mul)])[decl ref<array<real<4>,1>> v163 = v172, decl ref<array<real<4>,1>> v164 = v173, decl ref<array<int<4>,1>> v165 = v174, decl vector<uint<4>,3> v169 = v175, decl vector<uint<4>,3> v170 = v176]{
            default: bind(){fun(ref<array<real<4>,1>> v158, ref<array<real<4>,1>> v159, ref<array<int<4>,1>> v160, ref<array<real<4>,1>> v161, uint<4> v154, int<4> v155, vector<uint<4>,3> v148, vector<uint<4>,3> v162){
                parallel(job([vector.reduction(v162, 1, uint.mul)-vector.reduction(v162, 1, uint.mul)])[decl ref<array<real<4>,1>> v150 = v158, decl ref<array<real<4>,1>> v151 = v159, decl ref<array<int<4>,1>> v152 = v160, decl ref<array<real<4>,1>> v153 = v161, decl vector<uint<4>,3> v156 = v162]{
                    default: bind(){fun(ref<array<real<4>,1>> v13, ref<array<real<4>,1>> v14, ref<array<int<4>,1>> v15, ref<array<real<4>,1>> v16, uint<4> v17, int<4> v18, vector<uint<4>,3> v149){
                        array.ref.elem.1D(v14, 0) := array.ref.elem.1D(v15, 0);
                    }(v150, v151, v152, v153, v154, v155, v156)}
                });
                mergeAll();
            }(v163, v164, v165, v166, v167, v168, v169, v170)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v203, ref<array<real<4>,1>> v204, ref<array<int<4>,1>> v205, ref<array<real<4>,1>> v197, uint<4> v198, int<4> v199, vector<uint<4>,3> v178, vector<uint<4>,3> v207){
        decl vector<uint<4>,3> v206 = vector.pointwise(uint.div)(v178, v207);
        parallel(job([vector.reduction(v206, 1, uint.mul)-vector.reduction(v206, 1, uint.mul)])[decl ref<array<real<4>,1>> v194 = v203, decl ref<array<real<4>,1>> v195 = v204, decl ref<array<int<4>,1>> v196 = v205, decl vector<uint<4>,3> v200 = v206, decl vector<uint<4>,3> v201 = v207]{
            default: bind(){fun(ref<array<real<4>,1>> v189, ref<array<real<4>,1>> v190, ref<array<int<4>,1>> v191, ref<array<real<4>,1>> v192, uint<4> v185, int<4> v186, vector<uint<4>,3> v179, vector<uint<4>,3> v193){
                parallel(job([vector.reduction(v193, 1, uint.mul)-vector.reduction(v193, 1, uint.mul)])[decl ref<array<real<4>,1>> v181 = v189, decl ref<array<real<4>,1>> v182 = v190, decl ref<array<int<4>,1>> v183 = v191, decl ref<array<real<4>,1>> v184 = v192, decl vector<uint<4>,3> v187 = v193]{
                    default: bind(){fun(ref<array<real<4>,1>> v20, ref<array<real<4>,1>> v21, ref<array<int<4>,1>> v22, ref<array<real<4>,1>> v23, uint<4> v24, int<4> v25, vector<uint<4>,3> v180){
                        array.ref.elem.1D(v23, array.ref.elem.1D(v22, 0)) := 3.3f;
                        array.ref.elem.1D(v21, v24) := array.ref.elem.1D(v20, 1)*array.ref.elem.1D(v23, array.ref.elem.1D(v22, 0));
                    }(v181, v182, v183, v184, v185, v186, v187)}
                });
                mergeAll();
            }(v194, v195, v196, v197, v198, v199, v200, v201)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v242, ref<array<real<4>,1>> v243, ref<array<int<4>,1>> v244, ref<array<real<4>,1>> v236, uint<4> v237, int<4> v238, vector<uint<4>,3> v209, vector<uint<4>,3> v246){
        decl vector<uint<4>,3> v245 = vector.pointwise(uint.div)(v209, v246);
        parallel(job([vector.reduction(v245, 1, uint.mul)-vector.reduction(v245, 1, uint.mul)])[decl ref<array<real<4>,1>> v233 = v242, decl ref<array<real<4>,1>> v234 = v243, decl ref<array<int<4>,1>> v235 = v244, decl vector<uint<4>,3> v239 = v245, decl vector<uint<4>,3> v240 = v246]{
            default: bind(){fun(ref<array<real<4>,1>> v227, ref<array<real<4>,1>> v228, ref<array<int<4>,1>> v229, ref<array<real<4>,1>> v230, uint<4> v222, int<4> v223, vector<uint<4>,3> v231, vector<uint<4>,3> v232){
                parallel(job([vector.reduction(v232, 1, uint.mul)-vector.reduction(v232, 1, uint.mul)])[decl ref<array<real<4>,1>> v218 = v227, decl ref<array<real<4>,1>> v219 = v228, decl ref<array<int<4>,1>> v220 = v229, decl ref<array<real<4>,1>> v221 = v230, decl vector<uint<4>,3> v224 = v231, decl vector<uint<4>,3> v225 = v232]{
                    default: bind(){fun(ref<array<real<4>,1>> v27, ref<array<real<4>,1>> v28, ref<array<int<4>,1>> v29, ref<array<real<4>,1>> v30, uint<4> v31, int<4> v32, vector<uint<4>,3> v210, vector<uint<4>,3> v211){
                        decl ref<uint<4>> v33 =  var(fun(uint<4> v212, vector<uint<4>,3> v214, vector<uint<4>,3> v213){
                            decl uint<4> v215 = getThreadID(0);
                            decl uint<4> v216 = getThreadID(1);
                            switch(v212) {
                                case 0: return v215/v213[2]/v213[1]+v213[0]*v216/v214[2]/v214[1]
                                case 1: return v215/v213[2]%v213[1]+v213[1]*v216/v214[2]%v214[1]
                                case 2: return v215%v213[2]+v213[2]*v216/v214[2]%v214[1]
                                default: { }
                            };
                        }(0, v210, v211));
                        array.ref.elem.1D(v28, v33) := v33;
                    }(v218, v219, v220, v221, v222, v223, v224, v225)}
                });
                mergeAll();
            }(v233, v234, v235, v236, v237, v238, v239, v240)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v278, ref<array<real<4>,1>> v279, ref<array<int<4>,1>> v280, ref<array<real<4>,1>> v271, uint<4> v272, int<4> v273, vector<uint<4>,3> v281, vector<uint<4>,3> v283){
        decl vector<uint<4>,3> v282 = vector.pointwise(uint.div)(v281, v283);
        parallel(job([vector.reduction(v282, 1, uint.mul)-vector.reduction(v282, 1, uint.mul)])[decl ref<array<real<4>,1>> v268 = v278, decl ref<array<real<4>,1>> v269 = v279, decl ref<array<int<4>,1>> v270 = v280, decl vector<uint<4>,3> v274 = v281, decl vector<uint<4>,3> v275 = v282, decl vector<uint<4>,3> v276 = v283]{
            default: bind(){fun(ref<array<real<4>,1>> v261, ref<array<real<4>,1>> v262, ref<array<int<4>,1>> v263, ref<array<real<4>,1>> v264, uint<4> v255, int<4> v256, vector<uint<4>,3> v265, vector<uint<4>,3> v266, vector<uint<4>,3> v267){
                parallel(job([vector.reduction(v267, 1, uint.mul)-vector.reduction(v267, 1, uint.mul)])[decl ref<array<real<4>,1>> v251 = v261, decl ref<array<real<4>,1>> v252 = v262, decl ref<array<int<4>,1>> v253 = v263, decl ref<array<real<4>,1>> v254 = v264, decl vector<uint<4>,3> v257 = v265, decl vector<uint<4>,3> v258 = v266, decl vector<uint<4>,3> v259 = v267]{
                    default: bind(){fun(ref<array<real<4>,1>> v35, ref<array<real<4>,1>> v36, ref<array<int<4>,1>> v37, ref<array<real<4>,1>> v38, uint<4> v39, int<4> v40, vector<uint<4>,3> v248, vector<uint<4>,3> v249, vector<uint<4>,3> v250){
                        array.ref.elem.1D(v36, 0) := v248[0];
                        array.ref.elem.1D(v36, 1) := v248[1];
                        array.ref.elem.1D(v36, 2) := v248[2];
                        array.ref.elem.1D(v36, 3) := v250[0];
                        array.ref.elem.1D(v36, 4) := v250[1];
                        array.ref.elem.1D(v36, 5) := v250[2];
                        array.ref.elem.1D(v36, 6) := v249[0];
                        array.ref.elem.1D(v36, 7) := v249[1];
                        array.ref.elem.1D(v36, 8) := v249[2];
                    }(v251, v252, v253, v254, v255, v256, v257, v258, v259)}
                });
                mergeAll();
            }(v268, v269, v270, v271, v272, v273, v274, v275, v276)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v310, ref<array<real<4>,1>> v311, ref<array<int<4>,1>> v312, ref<array<real<4>,1>> v304, uint<4> v305, int<4> v306, vector<uint<4>,3> v285, vector<uint<4>,3> v314){
        decl vector<uint<4>,3> v313 = vector.pointwise(uint.div)(v285, v314);
        parallel(job([vector.reduction(v313, 1, uint.mul)-vector.reduction(v313, 1, uint.mul)])[decl ref<array<real<4>,1>> v301 = v310, decl ref<array<real<4>,1>> v302 = v311, decl ref<array<int<4>,1>> v303 = v312, decl vector<uint<4>,3> v307 = v313, decl vector<uint<4>,3> v308 = v314]{
            default: bind(){fun(ref<array<real<4>,1>> v296, ref<array<real<4>,1>> v297, ref<array<int<4>,1>> v298, ref<array<real<4>,1>> v299, uint<4> v292, int<4> v293, vector<uint<4>,3> v286, vector<uint<4>,3> v300){
                parallel(job([vector.reduction(v300, 1, uint.mul)-vector.reduction(v300, 1, uint.mul)])[decl ref<array<real<4>,1>> v288 = v296, decl ref<array<real<4>,1>> v289 = v297, decl ref<array<int<4>,1>> v290 = v298, decl ref<array<real<4>,1>> v291 = v299, decl vector<uint<4>,3> v294 = v300]{
                    default: bind(){fun(ref<array<real<4>,1>> v42, ref<array<real<4>,1>> v43, ref<array<int<4>,1>> v44, ref<array<real<4>,1>> v45, uint<4> v46, int<4> v47, vector<uint<4>,3> v287){
                        if(v46==v47) array.ref.elem.1D(v43, 0) := array.ref.elem.1D(v42, 0) else { };
                    }(v288, v289, v290, v291, v292, v293, v294)}
                });
                mergeAll();
            }(v301, v302, v303, v304, v305, v306, v307, v308)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v361, ref<array<real<4>,1>> v362, ref<array<int<4>,1>> v363, ref<array<real<4>,1>> v355, uint<4> v356, int<4> v357, vector<uint<4>,3> v316, vector<uint<4>,3> v365){
        decl vector<uint<4>,3> v364 = vector.pointwise(uint.div)(v316, v365);
        parallel(job([vector.reduction(v364, 1, uint.mul)-vector.reduction(v364, 1, uint.mul)])[decl ref<array<real<4>,1>> v352 = v361, decl ref<array<real<4>,1>> v353 = v362, decl ref<array<int<4>,1>> v354 = v363, decl vector<uint<4>,3> v358 = v364, decl vector<uint<4>,3> v359 = v365]{
            default: bind(){fun(ref<array<real<4>,1>> v346, ref<array<real<4>,1>> v347, ref<array<int<4>,1>> v348, ref<array<real<4>,1>> v349, uint<4> v341, int<4> v342, vector<uint<4>,3> v350, vector<uint<4>,3> v351){
                parallel(job([vector.reduction(v351, 1, uint.mul)-vector.reduction(v351, 1, uint.mul)])[decl ref<array<real<4>,1>> v337 = v346, decl ref<array<real<4>,1>> v338 = v347, decl ref<array<int<4>,1>> v339 = v348, decl ref<array<real<4>,1>> v340 = v349, decl vector<uint<4>,3> v343 = v350, decl vector<uint<4>,3> v344 = v351]{
                    default: bind(){fun(ref<array<real<4>,1>> v49, ref<array<real<4>,1>> v50, ref<array<int<4>,1>> v51, ref<array<real<4>,1>> v52, uint<4> v53, int<4> v54, vector<uint<4>,3> v317, vector<uint<4>,3> v318){
                        decl ref<vector<uint<4>,3>> v55 =  var(undefined(type<vector<uint<4>,3>>));
                        vector.ref.elem(v55, 0) := fun(uint<4> v319, vector<uint<4>,3> v321, vector<uint<4>,3> v320){
                            decl uint<4> v322 = getThreadID(0);
                            decl uint<4> v323 = getThreadID(1);
                            switch(v319) {
                                case 0: return v322/v320[2]/v320[1]+v320[0]*v323/v321[2]/v321[1]
                                case 1: return v322/v320[2]%v320[1]+v320[1]*v323/v321[2]%v321[1]
                                case 2: return v322%v320[2]+v320[2]*v323/v321[2]%v321[1]
                                default: { }
                            };
                        }(0, v317, v318);
                        vector.ref.elem(v55, 1) := fun(uint<4> v325, vector<uint<4>,3> v327, vector<uint<4>,3> v326){
                            decl uint<4> v328 = getThreadID(0);
                            decl uint<4> v329 = getThreadID(1);
                            switch(v325) {
                                case 0: return v328/v326[2]/v326[1]+v326[0]*v329/v327[2]/v327[1]
                                case 1: return v328/v326[2]%v326[1]+v326[1]*v329/v327[2]%v327[1]
                                case 2: return v328%v326[2]+v326[2]*v329/v327[2]%v327[1]
                                default: { }
                            };
                        }(1, v317, v318);
                        vector.ref.elem(v55, 2) := fun(uint<4> v331, vector<uint<4>,3> v333, vector<uint<4>,3> v332){
                            decl uint<4> v334 = getThreadID(0);
                            decl uint<4> v335 = getThreadID(1);
                            switch(v331) {
                                case 0: return v334/v332[2]/v332[1]+v332[0]*v335/v333[2]/v333[1]
                                case 1: return v334/v332[2]%v332[1]+v332[1]*v335/v333[2]%v333[1]
                                case 2: return v334%v332[2]+v332[2]*v335/v333[2]%v333[1]
                                default: { }
                            };
                        }(2, v317, v318);
                        decl ref<uint<4>> v56 =  var(vector.ref.elem(v55, 0)*array.ref.elem.1D(v51, 2)*array.ref.elem.1D(v51, 1)+vector.ref.elem(v55, 1)*array.ref.elem.1D(v51, 2)+vector.ref.elem(v55, 2));
                        array.ref.elem.1D(v50, v56) := array.ref.elem.1D(v49, v56);
                    }(v337, v338, v339, v340, v341, v342, v343, v344)}
                });
                mergeAll();
            }(v352, v353, v354, v355, v356, v357, v358, v359)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v406, ref<array<real<4>,1>> v407, ref<array<int<4>,1>> v408, ref<array<real<4>,1>> v400, uint<4> v401, int<4> v402, vector<uint<4>,3> v367, vector<uint<4>,3> v410){
        decl vector<uint<4>,3> v409 = vector.pointwise(uint.div)(v367, v410);
        parallel(job([vector.reduction(v409, 1, uint.mul)-vector.reduction(v409, 1, uint.mul)])[decl ref<array<real<4>,1>> v397 = v406, decl ref<array<real<4>,1>> v398 = v407, decl ref<array<int<4>,1>> v399 = v408, decl vector<uint<4>,3> v403 = v409, decl vector<uint<4>,3> v404 = v410]{
            default: bind(){fun(ref<array<real<4>,1>> v391, ref<array<real<4>,1>> v392, ref<array<int<4>,1>> v393, ref<array<real<4>,1>> v394, uint<4> v386, int<4> v387, vector<uint<4>,3> v395, vector<uint<4>,3> v396){
                parallel(job([vector.reduction(v396, 1, uint.mul)-vector.reduction(v396, 1, uint.mul)])[decl ref<array<real<4>,1>> v382 = v391, decl ref<array<real<4>,1>> v383 = v392, decl ref<array<int<4>,1>> v384 = v393, decl ref<array<real<4>,1>> v385 = v394, decl vector<uint<4>,3> v388 = v395, decl vector<uint<4>,3> v389 = v396]{
                    default: bind(){fun(ref<array<real<4>,1>> v58, ref<array<real<4>,1>> v59, ref<array<int<4>,1>> v60, ref<array<real<4>,1>> v61, uint<4> v62, int<4> v63, vector<uint<4>,3> v368, vector<uint<4>,3> v369){
                        decl ref<uint<4>> v64 =  var(fun(uint<4> v370, vector<uint<4>,3> v371){
                            decl uint<4> v373 = getThreadID(0);
                            switch(v370) {
                                case 0: return v373/v371[2]/v371[1]
                                case 1: return v373/v371[2]%v371[1]
                                case 2: return v373%v371[2]
                                default: { }
                            };
                        }(0, v369));
                        decl ref<uint<4>> v65 =  var(fun(uint<4> v376, vector<uint<4>,3> v378, vector<uint<4>,3> v377){
                            decl uint<4> v379 = getThreadID(0);
                            decl uint<4> v380 = getThreadID(1);
                            switch(v376) {
                                case 0: return v379/v377[2]/v377[1]+v377[0]*v380/v378[2]/v378[1]
                                case 1: return v379/v377[2]%v377[1]+v377[1]*v380/v378[2]%v378[1]
                                case 2: return v379%v377[2]+v377[2]*v380/v378[2]%v378[1]
                                default: { }
                            };
                        }(0, v368, v369));
                        array.ref.elem.1D(v61, v64) := array.ref.elem.1D(v58, v65);
                        barrier(getThreadGroup(0));
                        array.ref.elem.1D(v59, v65) := array.ref.elem.1D(v61, v64);
                    }(v382, v383, v384, v385, v386, v387, v388, v389)}
                });
                mergeAll();
            }(v397, v398, v399, v400, v401, v402, v403, v404)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v452, ref<array<real<4>,1>> v453, ref<array<int<4>,1>> v454, ref<array<real<4>,1>> v446, uint<4> v447, int<4> v448, vector<uint<4>,3> v412, vector<uint<4>,3> v456){
        decl vector<uint<4>,3> v455 = vector.pointwise(uint.div)(v412, v456);
        parallel(job([vector.reduction(v455, 1, uint.mul)-vector.reduction(v455, 1, uint.mul)])[decl ref<array<real<4>,1>> v443 = v452, decl ref<array<real<4>,1>> v444 = v453, decl ref<array<int<4>,1>> v445 = v454, decl vector<uint<4>,3> v449 = v455, decl vector<uint<4>,3> v450 = v456]{
            default: bind(){fun(ref<array<real<4>,1>> v437, ref<array<real<4>,1>> v438, ref<array<int<4>,1>> v439, ref<array<real<4>,1>> v440, uint<4> v431, int<4> v432, vector<uint<4>,3> v441, vector<uint<4>,3> v442){
                parallel(job([vector.reduction(v442, 1, uint.mul)-vector.reduction(v442, 1, uint.mul)])[decl ref<array<real<4>,1>> v427 = v437, decl ref<array<real<4>,1>> v428 = v438, decl ref<array<int<4>,1>> v429 = v439, decl ref<array<real<4>,1>> v430 = v440, decl ref<vector<int<4>,258>> v433 =  var(undefined(type<vector<int<4>,258>>)), decl vector<uint<4>,3> v434 = v441, decl vector<uint<4>,3> v435 = v442]{
                    default: bind(){fun(ref<array<real<4>,1>> v67, ref<array<real<4>,1>> v68, ref<array<int<4>,1>> v69, ref<array<real<4>,1>> v70, uint<4> v71, int<4> v72, ref<vector<int<4>,258>> v75, vector<uint<4>,3> v413, vector<uint<4>,3> v414){
                        decl ref<uint<4>> v73 =  var(fun(uint<4> v415, vector<uint<4>,3> v417, vector<uint<4>,3> v416){
                            decl uint<4> v418 = getThreadID(0);
                            decl uint<4> v419 = getThreadID(1);
                            switch(v415) {
                                case 0: return v418/v416[2]/v416[1]+v416[0]*v419/v417[2]/v417[1]
                                case 1: return v418/v416[2]%v416[1]+v416[1]*v419/v417[2]%v417[1]
                                case 2: return v418%v416[2]+v416[2]*v419/v417[2]%v417[1]
                                default: { }
                            };
                        }(0, v413, v414));
                        decl ref<uint<4>> v74 =  var(fun(uint<4> v421, vector<uint<4>,3> v422){
                            decl uint<4> v424 = getThreadID(0);
                            switch(v421) {
                                case 0: return v424/v422[2]/v422[1]
                                case 1: return v424/v422[2]%v422[1]
                                case 2: return v424%v422[2]
                                default: { }
                            };
                        }(0, v414));
                        { };
                        array.ref.elem.1D(v70, v74) := array.ref.elem.1D(v67, v73);
                        vector.ref.elem(v75, v74-1) := array.ref.elem.1D(v69, v73);
                        barrier(getThreadGroup(0));
                        array.ref.elem.1D(v68, v73) := array.ref.elem.1D(v70, v73+1)+vector.ref.elem(v75, v73);
                    }(v427, v428, v429, v430, v431, v432, v433, v434, v435)}
                });
                mergeAll();
            }(v443, v444, v445, v446, v447, v448, v449, v450)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v503, ref<array<real<4>,1>> v504, ref<array<int<4>,1>> v505, ref<array<real<4>,1>> v497, uint<4> v498, int<4> v499, vector<uint<4>,3> v458, vector<uint<4>,3> v507){
        decl vector<uint<4>,3> v506 = vector.pointwise(uint.div)(v458, v507);
        parallel(job([vector.reduction(v506, 1, uint.mul)-vector.reduction(v506, 1, uint.mul)])[decl ref<array<real<4>,1>> v494 = v503, decl ref<array<real<4>,1>> v495 = v504, decl ref<array<int<4>,1>> v496 = v505, decl vector<uint<4>,3> v500 = v506, decl vector<uint<4>,3> v501 = v507]{
            default: bind(){fun(ref<array<real<4>,1>> v488, ref<array<real<4>,1>> v489, ref<array<int<4>,1>> v490, ref<array<real<4>,1>> v491, uint<4> v483, int<4> v484, vector<uint<4>,3> v492, vector<uint<4>,3> v493){
                parallel(job([vector.reduction(v493, 1, uint.mul)-vector.reduction(v493, 1, uint.mul)])[decl ref<array<real<4>,1>> v479 = v488, decl ref<array<real<4>,1>> v480 = v489, decl ref<array<int<4>,1>> v481 = v490, decl ref<array<real<4>,1>> v482 = v491, decl vector<uint<4>,3> v485 = v492, decl vector<uint<4>,3> v486 = v493]{
                    default: bind(){fun(ref<array<real<4>,1>> v77, ref<array<real<4>,1>> v78, ref<array<int<4>,1>> v79, ref<array<real<4>,1>> v80, uint<4> v81, int<4> v82, vector<uint<4>,3> v459, vector<uint<4>,3> v460){
                        decl ref<int<4>> v83 =  var(fun(uint<4> v461, vector<uint<4>,3> v463, vector<uint<4>,3> v462){
                            decl uint<4> v464 = getThreadID(0);
                            decl uint<4> v465 = getThreadID(1);
                            switch(v461) {
                                case 0: return v464/v462[2]/v462[1]+v462[0]*v465/v463[2]/v463[1]
                                case 1: return v464/v462[2]%v462[1]+v462[1]*v465/v463[2]%v463[1]
                                case 2: return v464%v462[2]+v462[2]*v465/v463[2]%v463[1]
                                default: { }
                            };
                        }(0, v459, v460)*array.ref.elem.1D(v79, 1)*array.ref.elem.1D(v79, 2)+fun(uint<4> v467, vector<uint<4>,3> v469, vector<uint<4>,3> v468){
                            decl uint<4> v470 = getThreadID(0);
                            decl uint<4> v471 = getThreadID(1);
                            switch(v467) {
                                case 0: return v470/v468[2]/v468[1]+v468[0]*v471/v469[2]/v469[1]
                                case 1: return v470/v468[2]%v468[1]+v468[1]*v471/v469[2]%v469[1]
                                case 2: return v470%v468[2]+v468[2]*v471/v469[2]%v469[1]
                                default: { }
                            };
                        }(1, v459, v460)*array.ref.elem.1D(v79, 2)+fun(uint<4> v473, vector<uint<4>,3> v475, vector<uint<4>,3> v474){
                            decl uint<4> v476 = getThreadID(0);
                            decl uint<4> v477 = getThreadID(1);
                            switch(v473) {
                                case 0: return v476/v474[2]/v474[1]+v474[0]*v477/v475[2]/v475[1]
                                case 1: return v476/v474[2]%v474[1]+v474[1]*v477/v475[2]%v475[1]
                                case 2: return v476%v474[2]+v474[2]*v477/v475[2]%v475[1]
                                default: { }
                            };
                        }(2, v459, v460));
                        decl ref<int<4>> v84 =  var(array.ref.elem.1D(v79, 0)*array.ref.elem.1D(v79, 1)*array.ref.elem.1D(v79, 2)-17);
                        if(v83>=v84) {
                            return unit;
                        } else { };
                        array.ref.elem.1D(v78, v83) := array.ref.elem.1D(v77, v83)+array.ref.elem.1D(v79, v83);
                    }(v479, v480, v481, v482, v483, v484, v485, v486)}
                });
                mergeAll();
            }(v494, v495, v496, v497, v498, v499, v500, v501)}
        });
        mergeAll();
        return 0;
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(ref<array<real<4>,1>> v98, vector<uint<4>,3> v86, vector<uint<4>,3> v100){
        decl vector<uint<4>,3> v99 = vector.pointwise(uint.div)(v86, v100);
        parallel(job(([vector.reduction(v99, 1, uint.mul)-vector.reduction(v99, 1, uint.mul)]))[decl ref<array<real<4>,1>> v94 = v98, decl vector<uint<4>,3> v95 = v99, decl vector<uint<4>,3> v96 = v100]{
            default: bind(){fun(ref<array<real<4>,1>> v92, vector<uint<4>,3> v87, vector<uint<4>,3> v93){
                parallel(job(([vector.reduction(v93, 1, uint.mul)-vector.reduction(v93, 1, uint.mul)]))[decl ref<array<real<4>,1>> v89 = v92, decl vector<uint<4>,3> v90 = v93]{
                    default: bind(){fun(ref<array<real<4>,1>> v1, vector<uint<4>,3> v88){
                        decl ref<real<4>> v2 = array.ref.elem.1D(v1, CAST<uint<4>>(0));
                    }(v89, v90)}
                });
                mergeAll();
            }(v94, v95, v96)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v114, vector<uint<4>,3> v102, vector<uint<4>,3> v116){
        decl vector<uint<4>,3> v115 = vector.pointwise(uint.div)(v102, v116);
        parallel(job(([vector.reduction(v115, 1, uint.mul)-vector.reduction(v115, 1, uint.mul)]))[decl ref<array<real<4>,1>> v110 = v114, decl vector<uint<4>,3> v111 = v115, decl vector<uint<4>,3> v112 = v116]{
            default: bind(){fun(ref<array<real<4>,1>> v108, vector<uint<4>,3> v103, vector<uint<4>,3> v109){
                parallel(job(([vector.reduction(v109, 1, uint.mul)-vector.reduction(v109, 1, uint.mul)]))[decl ref<array<real<4>,1>> v105 = v108, decl vector<uint<4>,3> v106 = v109]{
                    default: bind(){fun(ref<array<real<4>,1>> v4, vector<uint<4>,3> v104){
                        decl ref<real<4>> v5 = array.ref.elem.1D(v4, CAST<uint<4>>(0));
                    }(v105, v106)}
                });
                mergeAll();
            }(v110, v111, v112)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<int<4>,1>> v126, vector<uint<4>,3> v118, vector<uint<4>,3> v131){
        decl vector<uint<4>,3> v130 = vector.pointwise(uint.div)(v118, v131);
        parallel(job(([vector.reduction(v130, 1, uint.mul)-vector.reduction(v130, 1, uint.mul)]))[decl vector<uint<4>,3> v127 = v130, decl vector<uint<4>,3> v128 = v131]{
            default: bind(){fun(ref<array<int<4>,1>> v124, vector<uint<4>,3> v119, vector<uint<4>,3> v125){
                parallel(job(([vector.reduction(v125, 1, uint.mul)-vector.reduction(v125, 1, uint.mul)]))[decl ref<array<int<4>,1>> v121 = v124, decl vector<uint<4>,3> v122 = v125]{
                    default: bind(){fun(ref<array<int<4>,1>> v7, vector<uint<4>,3> v120){
                        decl ref<int<4>> v8 = array.ref.elem.1D(v7, CAST<uint<4>>(0));
                    }(v121, v122)}
                });
                mergeAll();
            }(v126, v127, v128)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(int<2> v140, vector<uint<4>,3> v133, vector<uint<4>,3> v145){
        decl vector<uint<4>,3> v144 = vector.pointwise(uint.div)(v133, v145);
        parallel(job(([vector.reduction(v144, 1, uint.mul)-vector.reduction(v144, 1, uint.mul)]))[decl vector<uint<4>,3> v141 = v144, decl vector<uint<4>,3> v142 = v145]{
            default: bind(){fun(int<2> v136, vector<uint<4>,3> v134, vector<uint<4>,3> v139){
                parallel(job(([vector.reduction(v139, 1, uint.mul)-vector.reduction(v139, 1, uint.mul)]))[decl vector<uint<4>,3> v137 = v139]{
                    default: bind(){fun(int<2> v10, vector<uint<4>,3> v135){
                        decl ref<int<2>> v11 = ( var(v10));
                    }(v136, v137)}
                });
                mergeAll();
            }(v140, v141, v142)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v172, ref<array<real<4>,1>> v173, ref<array<int<4>,1>> v174, ref<array<real<4>,1>> v166, uint<4> v167, int<4> v168, vector<uint<4>,3> v147, vector<uint<4>,3> v176){
        decl vector<uint<4>,3> v175 = vector.pointwise(uint.div)(v147, v176);
        parallel(job(([vector.reduction(v175, 1, uint.mul)-vector.reduction(v175, 1, uint.mul)]))[decl ref<array<real<4>,1>> v163 = v172, decl ref<array<real<4>,1>> v164 = v173, decl ref<array<int<4>,1>> v165 = v174, decl vector<uint<4>,3> v169 = v175, decl vector<uint<4>,3> v170 = v176]{
            default: bind(){fun(ref<array<real<4>,1>> v158, ref<array<real<4>,1>> v159, ref<array<int<4>,1>> v160, ref<array<real<4>,1>> v161, uint<4> v154, int<4> v155, vector<uint<4>,3> v148, vector<uint<4>,3> v162){
                parallel(job(([vector.reduction(v162, 1, uint.mul)-vector.reduction(v162, 1, uint.mul)]))[decl ref<array<real<4>,1>> v150 = v158, decl ref<array<real<4>,1>> v151 = v159, decl ref<array<int<4>,1>> v152 = v160, decl ref<array<real<4>,1>> v153 = v161, decl vector<uint<4>,3> v156 = v162]{
                    default: bind(){fun(ref<array<real<4>,1>> v13, ref<array<real<4>,1>> v14, ref<array<int<4>,1>> v15, ref<array<real<4>,1>> v16, uint<4> v17, int<4> v18, vector<uint<4>,3> v149){
                        (array.ref.elem.1D(v14, CAST<uint<4>>(0)) := CAST<real<4>>(( *array.ref.elem.1D(v15, CAST<uint<4>>(0)))));
                    }(v150, v151, v152, v153, v154, v155, v156)}
                });
                mergeAll();
            }(v163, v164, v165, v166, v167, v168, v169, v170)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v203, ref<array<real<4>,1>> v204, ref<array<int<4>,1>> v205, ref<array<real<4>,1>> v197, uint<4> v198, int<4> v199, vector<uint<4>,3> v178, vector<uint<4>,3> v207){
        decl vector<uint<4>,3> v206 = vector.pointwise(uint.div)(v178, v207);
        parallel(job(([vector.reduction(v206, 1, uint.mul)-vector.reduction(v206, 1, uint.mul)]))[decl ref<array<real<4>,1>> v194 = v203, decl ref<array<real<4>,1>> v195 = v204, decl ref<array<int<4>,1>> v196 = v205, decl vector<uint<4>,3> v200 = v206, decl vector<uint<4>,3> v201 = v207]{
            default: bind(){fun(ref<array<real<4>,1>> v189, ref<array<real<4>,1>> v190, ref<array<int<4>,1>> v191, ref<array<real<4>,1>> v192, uint<4> v185, int<4> v186, vector<uint<4>,3> v179, vector<uint<4>,3> v193){
                parallel(job(([vector.reduction(v193, 1, uint.mul)-vector.reduction(v193, 1, uint.mul)]))[decl ref<array<real<4>,1>> v181 = v189, decl ref<array<real<4>,1>> v182 = v190, decl ref<array<int<4>,1>> v183 = v191, decl ref<array<real<4>,1>> v184 = v192, decl vector<uint<4>,3> v187 = v193]{
                    default: bind(){fun(ref<array<real<4>,1>> v20, ref<array<real<4>,1>> v21, ref<array<int<4>,1>> v22, ref<array<real<4>,1>> v23, uint<4> v24, int<4> v25, vector<uint<4>,3> v180){
                        (array.ref.elem.1D(v23, CAST<uint<4>>(( *array.ref.elem.1D(v22, CAST<uint<4>>(0))))) := 3.3f);
                        (array.ref.elem.1D(v21, CAST<uint<4>>(v24)) := (( *array.ref.elem.1D(v20, CAST<uint<4>>(1)))*( *array.ref.elem.1D(v23, CAST<uint<4>>(( *array.ref.elem.1D(v22, CAST<uint<4>>(0))))))));
                    }(v181, v182, v183, v184, v185, v186, v187)}
                });
                mergeAll();
            }(v194, v195, v196, v197, v198, v199, v200, v201)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v242, ref<array<real<4>,1>> v243, ref<array<int<4>,1>> v244, ref<array<real<4>,1>> v236, uint<4> v237, int<4> v238, vector<uint<4>,3> v209, vector<uint<4>,3> v246){
        decl vector<uint<4>,3> v245 = vector.pointwise(uint.div)(v209, v246);
        parallel(job(([vector.reduction(v245, 1, uint.mul)-vector.reduction(v245, 1, uint.mul)]))[decl ref<array<real<4>,1>> v233 = v242, decl ref<array<real<4>,1>> v234 = v243, decl ref<array<int<4>,1>> v235 = v244, decl vector<uint<4>,3> v239 = v245, decl vector<uint<4>,3> v240 = v246]{
            default: bind(){fun(ref<array<real<4>,1>> v227, ref<array<real<4>,1>> v228, ref<array<int<4>,1>> v229, ref<array<real<4>,1>> v230, uint<4> v222, int<4> v223, vector<uint<4>,3> v231, vector<uint<4>,3> v232){
                parallel(job(([vector.reduction(v232, 1, uint.mul)-vector.reduction(v232, 1, uint.mul)]))[decl ref<array<real<4>,1>> v218 = v227, decl ref<array<real<4>,1>> v219 = v228, decl ref<array<int<4>,1>> v220 = v229, decl ref<array<real<4>,1>> v221 = v230, decl vector<uint<4>,3> v224 = v231, decl vector<uint<4>,3> v225 = v232]{
                    default: bind(){fun(ref<array<real<4>,1>> v27, ref<array<real<4>,1>> v28, ref<array<int<4>,1>> v29, ref<array<real<4>,1>> v30, uint<4> v31, int<4> v32, vector<uint<4>,3> v210, vector<uint<4>,3> v211){
                        decl ref<uint<4>> v33 = ( var(fun(uint<4> v212, vector<uint<4>,3> v214, vector<uint<4>,3> v213){
                            decl uint<4> v215 = getThreadID(0);
                            decl uint<4> v216 = getThreadID(1);
                            switch(v212) {
                                case 0: return (((v215/(v213[2]))/(v213[1]))+((v213[0])*((v216/(v214[2]))/(v214[1]))))
                                case 1: return (((v215/(v213[2]))%(v213[1]))+((v213[1])*((v216/(v214[2]))%(v214[1]))))
                                case 2: return ((v215%(v213[2]))+((v213[2])*((v216/(v214[2]))%(v214[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v210, v211)));
                        (array.ref.elem.1D(v28, CAST<uint<4>>(( *v33))) := CAST<real<4>>(( *v33)));
                    }(v218, v219, v220, v221, v222, v223, v224, v225)}
                });
                mergeAll();
            }(v233, v234, v235, v236, v237, v238, v239, v240)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v278, ref<array<real<4>,1>> v279, ref<array<int<4>,1>> v280, ref<array<real<4>,1>> v271, uint<4> v272, int<4> v273, vector<uint<4>,3> v281, vector<uint<4>,3> v283){
        decl vector<uint<4>,3> v282 = vector.pointwise(uint.div)(v281, v283);
        parallel(job(([vector.reduction(v282, 1, uint.mul)-vector.reduction(v282, 1, uint.mul)]))[decl ref<array<real<4>,1>> v268 = v278, decl ref<array<real<4>,1>> v269 = v279, decl ref<array<int<4>,1>> v270 = v280, decl vector<uint<4>,3> v274 = v281, decl vector<uint<4>,3> v275 = v282, decl vector<uint<4>,3> v276 = v283]{
            default: bind(){fun(ref<array<real<4>,1>> v261, ref<array<real<4>,1>> v262, ref<array<int<4>,1>> v263, ref<array<real<4>,1>> v264, uint<4> v255, int<4> v256, vector<uint<4>,3> v265, vector<uint<4>,3> v266, vector<uint<4>,3> v267){
                parallel(job(([vector.reduction(v267, 1, uint.mul)-vector.reduction(v267, 1, uint.mul)]))[decl ref<array<real<4>,1>> v251 = v261, decl ref<array<real<4>,1>> v252 = v262, decl ref<array<int<4>,1>> v253 = v263, decl ref<array<real<4>,1>> v254 = v264, decl vector<uint<4>,3> v257 = v265, decl vector<uint<4>,3> v258 = v266, decl vector<uint<4>,3> v259 = v267]{
                    default: bind(){fun(ref<array<real<4>,1>> v35, ref<array<real<4>,1>> v36, ref<array<int<4>,1>> v37, ref<array<real<4>,1>> v38, uint<4> v39, int<4> v40, vector<uint<4>,3> v248, vector<uint<4>,3> v249, vector<uint<4>,3> v250){
                        (array.ref.elem.1D(v36, CAST<uint<4>>(0)) := CAST<real<4>>((v248[CAST<uint<4>>(0)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(1)) := CAST<real<4>>((v248[CAST<uint<4>>(1)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(2)) := CAST<real<4>>((v248[CAST<uint<4>>(2)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(3)) := CAST<real<4>>((v250[CAST<uint<4>>(0)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(4)) := CAST<real<4>>((v250[CAST<uint<4>>(1)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(5)) := CAST<real<4>>((v250[CAST<uint<4>>(2)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(6)) := CAST<real<4>>((v249[CAST<uint<4>>(0)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(7)) := CAST<real<4>>((v249[CAST<uint<4>>(1)])));
                        (array.ref.elem.1D(v36, CAST<uint<4>>(8)) := CAST<real<4>>((v249[CAST<uint<4>>(2)])));
                    }(v251, v252, v253, v254, v255, v256, v257, v258, v259)}
                });
                mergeAll();
            }(v268, v269, v270, v271, v272, v273, v274, v275, v276)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v310, ref<array<real<4>,1>> v311, ref<array<int<4>,1>> v312, ref<array<real<4>,1>> v304, uint<4> v305, int<4> v306, vector<uint<4>,3> v285, vector<uint<4>,3> v314){
        decl vector<uint<4>,3> v313 = vector.pointwise(uint.div)(v285, v314);
        parallel(job(([vector.reduction(v313, 1, uint.mul)-vector.reduction(v313, 1, uint.mul)]))[decl ref<array<real<4>,1>> v301 = v310, decl ref<array<real<4>,1>> v302 = v311, decl ref<array<int<4>,1>> v303 = v312, decl vector<uint<4>,3> v307 = v313, decl vector<uint<4>,3> v308 = v314]{
            default: bind(){fun(ref<array<real<4>,1>> v296, ref<array<real<4>,1>> v297, ref<array<int<4>,1>> v298, ref<array<real<4>,1>> v299, uint<4> v292, int<4> v293, vector<uint<4>,3> v286, vector<uint<4>,3> v300){
                parallel(job(([vector.reduction(v300, 1, uint.mul)-vector.reduction(v300, 1, uint.mul)]))[decl ref<array<real<4>,1>> v288 = v296, decl ref<array<real<4>,1>> v289 = v297, decl ref<array<int<4>,1>> v290 = v298, decl ref<array<real<4>,1>> v291 = v299, decl vector<uint<4>,3> v294 = v300]{
                    default: bind(){fun(ref<array<real<4>,1>> v42, ref<array<real<4>,1>> v43, ref<array<int<4>,1>> v44, ref<array<real<4>,1>> v45, uint<4> v46, int<4> v47, vector<uint<4>,3> v287){
                        if((v46==CAST<uint<4>>(v47))) (array.ref.elem.1D(v43, CAST<uint<4>>(0)) := ( *array.ref.elem.1D(v42, CAST<uint<4>>(0)))) else { };
                    }(v288, v289, v290, v291, v292, v293, v294)}
                });
                mergeAll();
            }(v301, v302, v303, v304, v305, v306, v307, v308)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v361, ref<array<real<4>,1>> v362, ref<array<int<4>,1>> v363, ref<array<real<4>,1>> v355, uint<4> v356, int<4> v357, vector<uint<4>,3> v316, vector<uint<4>,3> v365){
        decl vector<uint<4>,3> v364 = vector.pointwise(uint.div)(v316, v365);
        parallel(job(([vector.reduction(v364, 1, uint.mul)-vector.reduction(v364, 1, uint.mul)]))[decl ref<array<real<4>,1>> v352 = v361, decl ref<array<real<4>,1>> v353 = v362, decl ref<array<int<4>,1>> v354 = v363, decl vector<uint<4>,3> v358 = v364, decl vector<uint<4>,3> v359 = v365]{
            default: bind(){fun(ref<array<real<4>,1>> v346, ref<array<real<4>,1>> v347, ref<array<int<4>,1>> v348, ref<array<real<4>,1>> v349, uint<4> v341, int<4> v342, vector<uint<4>,3> v350, vector<uint<4>,3> v351){
                parallel(job(([vector.reduction(v351, 1, uint.mul)-vector.reduction(v351, 1, uint.mul)]))[decl ref<array<real<4>,1>> v337 = v346, decl ref<array<real<4>,1>> v338 = v347, decl ref<array<int<4>,1>> v339 = v348, decl ref<array<real<4>,1>> v340 = v349, decl vector<uint<4>,3> v343 = v350, decl vector<uint<4>,3> v344 = v351]{
                    default: bind(){fun(ref<array<real<4>,1>> v49, ref<array<real<4>,1>> v50, ref<array<int<4>,1>> v51, ref<array<real<4>,1>> v52, uint<4> v53, int<4> v54, vector<uint<4>,3> v317, vector<uint<4>,3> v318){
                        decl ref<vector<uint<4>,3>> v55 = ( var(undefined(type<vector<uint<4>,3>>)));
                        (vector.ref.elem(v55, CAST<uint<4>>(0)) := fun(uint<4> v319, vector<uint<4>,3> v321, vector<uint<4>,3> v320){
                            decl uint<4> v322 = getThreadID(0);
                            decl uint<4> v323 = getThreadID(1);
                            switch(v319) {
                                case 0: return (((v322/(v320[2]))/(v320[1]))+((v320[0])*((v323/(v321[2]))/(v321[1]))))
                                case 1: return (((v322/(v320[2]))%(v320[1]))+((v320[1])*((v323/(v321[2]))%(v321[1]))))
                                case 2: return ((v322%(v320[2]))+((v320[2])*((v323/(v321[2]))%(v321[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v317, v318));
                        (vector.ref.elem(v55, CAST<uint<4>>(1)) := fun(uint<4> v325, vector<uint<4>,3> v327, vector<uint<4>,3> v326){
                            decl uint<4> v328 = getThreadID(0);
                            decl uint<4> v329 = getThreadID(1);
                            switch(v325) {
                                case 0: return (((v328/(v326[2]))/(v326[1]))+((v326[0])*((v329/(v327[2]))/(v327[1]))))
                                case 1: return (((v328/(v326[2]))%(v326[1]))+((v326[1])*((v329/(v327[2]))%(v327[1]))))
                                case 2: return ((v328%(v326[2]))+((v326[2])*((v329/(v327[2]))%(v327[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(1), v317, v318));
                        (vector.ref.elem(v55, CAST<uint<4>>(2)) := fun(uint<4> v331, vector<uint<4>,3> v333, vector<uint<4>,3> v332){
                            decl uint<4> v334 = getThreadID(0);
                            decl uint<4> v335 = getThreadID(1);
                            switch(v331) {
                                case 0: return (((v334/(v332[2]))/(v332[1]))+((v332[0])*((v335/(v333[2]))/(v333[1]))))
                                case 1: return (((v334/(v332[2]))%(v332[1]))+((v332[1])*((v335/(v333[2]))%(v333[1]))))
                                case 2: return ((v334%(v332[2]))+((v332[2])*((v335/(v333[2]))%(v333[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(2), v317, v318));
                        decl ref<uint<4>> v56 = ( var(((((( *vector.ref.elem(v55, CAST<uint<4>>(0)))*CAST<uint<4>>(( *array.ref.elem.1D(v51, CAST<uint<4>>(2)))))*CAST<uint<4>>(( *array.ref.elem.1D(v51, CAST<uint<4>>(1)))))+(( *vector.ref.elem(v55, CAST<uint<4>>(1)))*CAST<uint<4>>(( *array.ref.elem.1D(v51, CAST<uint<4>>(2))))))+( *vector.ref.elem(v55, CAST<uint<4>>(2))))));
                        (array.ref.elem.1D(v50, CAST<uint<4>>(( *v56))) := ( *array.ref.elem.1D(v49, CAST<uint<4>>(( *v56)))));
                    }(v337, v338, v339, v340, v341, v342, v343, v344)}
                });
                mergeAll();
            }(v352, v353, v354, v355, v356, v357, v358, v359)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v406, ref<array<real<4>,1>> v407, ref<array<int<4>,1>> v408, ref<array<real<4>,1>> v400, uint<4> v401, int<4> v402, vector<uint<4>,3> v367, vector<uint<4>,3> v410){
        decl vector<uint<4>,3> v409 = vector.pointwise(uint.div)(v367, v410);
        parallel(job(([vector.reduction(v409, 1, uint.mul)-vector.reduction(v409, 1, uint.mul)]))[decl ref<array<real<4>,1>> v397 = v406, decl ref<array<real<4>,1>> v398 = v407, decl ref<array<int<4>,1>> v399 = v408, decl vector<uint<4>,3> v403 = v409, decl vector<uint<4>,3> v404 = v410]{
            default: bind(){fun(ref<array<real<4>,1>> v391, ref<array<real<4>,1>> v392, ref<array<int<4>,1>> v393, ref<array<real<4>,1>> v394, uint<4> v386, int<4> v387, vector<uint<4>,3> v395, vector<uint<4>,3> v396){
                parallel(job(([vector.reduction(v396, 1, uint.mul)-vector.reduction(v396, 1, uint.mul)]))[decl ref<array<real<4>,1>> v382 = v391, decl ref<array<real<4>,1>> v383 = v392, decl ref<array<int<4>,1>> v384 = v393, decl ref<array<real<4>,1>> v385 = v394, decl vector<uint<4>,3> v388 = v395, decl vector<uint<4>,3> v389 = v396]{
                    default: bind(){fun(ref<array<real<4>,1>> v58, ref<array<real<4>,1>> v59, ref<array<int<4>,1>> v60, ref<array<real<4>,1>> v61, uint<4> v62, int<4> v63, vector<uint<4>,3> v368, vector<uint<4>,3> v369){
                        decl ref<uint<4>> v64 = ( var(fun(uint<4> v370, vector<uint<4>,3> v371){
                            decl uint<4> v373 = getThreadID(0);
                            switch(v370) {
                                case 0: return ((v373/(v371[2]))/(v371[1]))
                                case 1: return ((v373/(v371[2]))%(v371[1]))
                                case 2: return (v373%(v371[2]))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v369)));
                        decl ref<uint<4>> v65 = ( var(fun(uint<4> v376, vector<uint<4>,3> v378, vector<uint<4>,3> v377){
                            decl uint<4> v379 = getThreadID(0);
                            decl uint<4> v380 = getThreadID(1);
                            switch(v376) {
                                case 0: return (((v379/(v377[2]))/(v377[1]))+((v377[0])*((v380/(v378[2]))/(v378[1]))))
                                case 1: return (((v379/(v377[2]))%(v377[1]))+((v377[1])*((v380/(v378[2]))%(v378[1]))))
                                case 2: return ((v379%(v377[2]))+((v377[2])*((v380/(v378[2]))%(v378[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v368, v369)));
                        (array.ref.elem.1D(v61, CAST<uint<4>>(( *v64))) := ( *array.ref.elem.1D(v58, CAST<uint<4>>(( *v65)))));
                        barrier(getThreadGroup(0));
                        (array.ref.elem.1D(v59, CAST<uint<4>>(( *v65))) := ( *array.ref.elem.1D(v61, CAST<uint<4>>(( *v64)))));
                    }(v382, v383, v384, v385, v386, v387, v388, v389)}
                });
                mergeAll();
            }(v397, v398, v399, v400, v401, v402, v403, v404)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v452, ref<array<real<4>,1>> v453, ref<array<int<4>,1>> v454, ref<array<real<4>,1>> v446, uint<4> v447, int<4> v448, vector<uint<4>,3> v412, vector<uint<4>,3> v456){
        decl vector<uint<4>,3> v455 = vector.pointwise(uint.div)(v412, v456);
        parallel(job(([vector.reduction(v455, 1, uint.mul)-vector.reduction(v455, 1, uint.mul)]))[decl ref<array<real<4>,1>> v443 = v452, decl ref<array<real<4>,1>> v444 = v453, decl ref<array<int<4>,1>> v445 = v454, decl vector<uint<4>,3> v449 = v455, decl vector<uint<4>,3> v450 = v456]{
            default: bind(){fun(ref<array<real<4>,1>> v437, ref<array<real<4>,1>> v438, ref<array<int<4>,1>> v439, ref<array<real<4>,1>> v440, uint<4> v431, int<4> v432, vector<uint<4>,3> v441, vector<uint<4>,3> v442){
                parallel(job(([vector.reduction(v442, 1, uint.mul)-vector.reduction(v442, 1, uint.mul)]))[decl ref<array<real<4>,1>> v427 = v437, decl ref<array<real<4>,1>> v428 = v438, decl ref<array<int<4>,1>> v429 = v439, decl ref<array<real<4>,1>> v430 = v440, decl ref<vector<int<4>,258>> v433 = ( var(undefined(type<vector<int<4>,258>>))), decl vector<uint<4>,3> v434 = v441, decl vector<uint<4>,3> v435 = v442]{
                    default: bind(){fun(ref<array<real<4>,1>> v67, ref<array<real<4>,1>> v68, ref<array<int<4>,1>> v69, ref<array<real<4>,1>> v70, uint<4> v71, int<4> v72, ref<vector<int<4>,258>> v75, vector<uint<4>,3> v413, vector<uint<4>,3> v414){
                        decl ref<uint<4>> v73 = ( var(fun(uint<4> v415, vector<uint<4>,3> v417, vector<uint<4>,3> v416){
                            decl uint<4> v418 = getThreadID(0);
                            decl uint<4> v419 = getThreadID(1);
                            switch(v415) {
                                case 0: return (((v418/(v416[2]))/(v416[1]))+((v416[0])*((v419/(v417[2]))/(v417[1]))))
                                case 1: return (((v418/(v416[2]))%(v416[1]))+((v416[1])*((v419/(v417[2]))%(v417[1]))))
                                case 2: return ((v418%(v416[2]))+((v416[2])*((v419/(v417[2]))%(v417[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v413, v414)));
                        decl ref<uint<4>> v74 = ( var(fun(uint<4> v421, vector<uint<4>,3> v422){
                            decl uint<4> v424 = getThreadID(0);
                            switch(v421) {
                                case 0: return ((v424/(v422[2]))/(v422[1]))
                                case 1: return ((v424/(v422[2]))%(v422[1]))
                                case 2: return (v424%(v422[2]))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v414)));
                        { };
                        (array.ref.elem.1D(v70, CAST<uint<4>>(( *v74))) := ( *array.ref.elem.1D(v67, CAST<uint<4>>(( *v73)))));
                        (vector.ref.elem(v75, CAST<uint<4>>((( *v74)-CAST<uint<4>>(1)))) := ( *array.ref.elem.1D(v69, CAST<uint<4>>(( *v73)))));
                        barrier(getThreadGroup(0));
                        (array.ref.elem.1D(v68, CAST<uint<4>>(( *v73))) := (( *array.ref.elem.1D(v70, CAST<uint<4>>((( *v73)+CAST<uint<4>>(1)))))+CAST<real<4>>(( *vector.ref.elem(v75, CAST<uint<4>>(( *v73)))))));
                    }(v427, v428, v429, v430, v431, v432, v433, v434, v435)}
                });
                mergeAll();
            }(v443, v444, v445, v446, v447, v448, v449, v450)}
        });
        mergeAll();
        return 0;
    }

//  Entry Point: 
fun(ref<array<real<4>,1>> v503, ref<array<real<4>,1>> v504, ref<array<int<4>,1>> v505, ref<array<real<4>,1>> v497, uint<4> v498, int<4> v499, vector<uint<4>,3> v458, vector<uint<4>,3> v507){
        decl vector<uint<4>,3> v506 = vector.pointwise(uint.div)(v458, v507);
        parallel(job(([vector.reduction(v506, 1, uint.mul)-vector.reduction(v506, 1, uint.mul)]))[decl ref<array<real<4>,1>> v494 = v503, decl ref<array<real<4>,1>> v495 = v504, decl ref<array<int<4>,1>> v496 = v505, decl vector<uint<4>,3> v500 = v506, decl vector<uint<4>,3> v501 = v507]{
            default: bind(){fun(ref<array<real<4>,1>> v488, ref<array<real<4>,1>> v489, ref<array<int<4>,1>> v490, ref<array<real<4>,1>> v491, uint<4> v483, int<4> v484, vector<uint<4>,3> v492, vector<uint<4>,3> v493){
                parallel(job(([vector.reduction(v493, 1, uint.mul)-vector.reduction(v493, 1, uint.mul)]))[decl ref<array<real<4>,1>> v479 = v488, decl ref<array<real<4>,1>> v480 = v489, decl ref<array<int<4>,1>> v481 = v490, decl ref<array<real<4>,1>> v482 = v491, decl vector<uint<4>,3> v485 = v492, decl vector<uint<4>,3> v486 = v493]{
                    default: bind(){fun(ref<array<real<4>,1>> v77, ref<array<real<4>,1>> v78, ref<array<int<4>,1>> v79, ref<array<real<4>,1>> v80, uint<4> v81, int<4> v82, vector<uint<4>,3> v459, vector<uint<4>,3> v460){
                        decl ref<int<4>> v83 = ( var(CAST<int<4>>(((((fun(uint<4> v461, vector<uint<4>,3> v463, vector<uint<4>,3> v462){
                            decl uint<4> v464 = getThreadID(0);
                            decl uint<4> v465 = getThreadID(1);
                            switch(v461) {
                                case 0: return (((v464/(v462[2]))/(v462[1]))+((v462[0])*((v465/(v463[2]))/(v463[1]))))
                                case 1: return (((v464/(v462[2]))%(v462[1]))+((v462[1])*((v465/(v463[2]))%(v463[1]))))
                                case 2: return ((v464%(v462[2]))+((v462[2])*((v465/(v463[2]))%(v463[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(0), v459, v460)*CAST<uint<4>>(( *array.ref.elem.1D(v79, CAST<uint<4>>(1)))))*CAST<uint<4>>(( *array.ref.elem.1D(v79, CAST<uint<4>>(2)))))+(fun(uint<4> v467, vector<uint<4>,3> v469, vector<uint<4>,3> v468){
                            decl uint<4> v470 = getThreadID(0);
                            decl uint<4> v471 = getThreadID(1);
                            switch(v467) {
                                case 0: return (((v470/(v468[2]))/(v468[1]))+((v468[0])*((v471/(v469[2]))/(v469[1]))))
                                case 1: return (((v470/(v468[2]))%(v468[1]))+((v468[1])*((v471/(v469[2]))%(v469[1]))))
                                case 2: return ((v470%(v468[2]))+((v468[2])*((v471/(v469[2]))%(v469[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(1), v459, v460)*CAST<uint<4>>(( *array.ref.elem.1D(v79, CAST<uint<4>>(2))))))+fun(uint<4> v473, vector<uint<4>,3> v475, vector<uint<4>,3> v474){
                            decl uint<4> v476 = getThreadID(0);
                            decl uint<4> v477 = getThreadID(1);
                            switch(v473) {
                                case 0: return (((v476/(v474[2]))/(v474[1]))+((v474[0])*((v477/(v475[2]))/(v475[1]))))
                                case 1: return (((v476/(v474[2]))%(v474[1]))+((v474[1])*((v477/(v475[2]))%(v475[1]))))
                                case 2: return ((v476%(v474[2]))+((v474[2])*((v477/(v475[2]))%(v475[1]))))
                                default: { }
                            };
                        }(CAST<uint<4>>(2), v459, v460)))));
                        decl ref<int<4>> v84 = ( var((((( *array.ref.elem.1D(v79, CAST<uint<4>>(0)))*( *array.ref.elem.1D(v79, CAST<uint<4>>(1))))*( *array.ref.elem.1D(v79, CAST<uint<4>>(2))))-17)));
                        if((( *v83)>=( *v84))) {
                            return unit;
                        } else { };
                        (array.ref.elem.1D(v78, CAST<uint<4>>(( *v83))) := (( *array.ref.elem.1D(v77, CAST<uint<4>>(( *v83))))+CAST<real<4>>(( *array.ref.elem.1D(v79, CAST<uint<4>>(( *v83)))))));
                    }(v479, v480, v481, v482, v483, v484, v485, v486)}
                });
                mergeAll();
            }(v494, v495, v496, v497, v498, v499, v500, v501)}
        });
        mergeAll();
        return 0;
    }

