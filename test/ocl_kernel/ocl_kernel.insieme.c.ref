// --- Generated Inspire Code ---
// --- Entry Point ---

// start code fragment :: Definition of constantMemArg //
__kernel void constantMemArg(__global float* c) {
	{
		float element = ((c[((unsigned int)(0))]));
	}
}

// --- Entry Point ---

// start code fragment :: Definition of globalMemArg //
__kernel void globalMemArg(__global float* g) {
	{
		float element = ((g[((unsigned int)(0))]));
	}
}

// --- Entry Point ---

// start code fragment :: Definition of localMemArg //
__kernel void localMemArg(__local int* l) {
	{
		int element = ((l[((unsigned int)(0))]));
	}
}

// --- Entry Point ---

// start code fragment :: Definition of privateMemArg //
__kernel void privateMemArg(short p) {
	{
		short copy = p;
	}
}

// --- Entry Point ---

// start code fragment :: Definition of allMemArg //
__kernel void allMemArg(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) {
	{
		(((ga[((unsigned int)(0))])) = ((float)(((gb[((unsigned int)(0))])))));
	}
}

// --- Entry Point ---

// start code fragment :: Definition of simpleCalc //
__kernel void simpleCalc(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) {
	{
		(((l[((unsigned int)(((gb[((unsigned int)(0))]))))])) = 3.3f);
		(((ga[((unsigned int)(pa))])) = (((c[((unsigned int)(1))]))*((l[((unsigned int)(((gb[((unsigned int)(0))]))))]))));
	}
}

// --- Entry Point ---

// start code fragment :: Definition of getId //
__kernel void getId(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) {
	{
		unsigned int gid = (get_global_id(((unsigned int)(0))));
		(((ga[((unsigned int)((gid)))])) = ((float)((gid))));
	}
}

// --- Entry Point ---

// start code fragment :: Definition of getSize //
__kernel void getSize(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) {
	{
		(((ga[((unsigned int)(0))])) = ((float)((get_global_size(((unsigned int)(0)))))));
		(((ga[((unsigned int)(1))])) = ((float)((get_global_size(((unsigned int)(1)))))));
		(((ga[((unsigned int)(2))])) = ((float)((get_global_size(((unsigned int)(2)))))));
		(((ga[((unsigned int)(3))])) = ((float)((get_local_size(((unsigned int)(0)))))));
		(((ga[((unsigned int)(4))])) = ((float)((get_local_size(((unsigned int)(1)))))));
		(((ga[((unsigned int)(5))])) = ((float)((get_local_size(((unsigned int)(2)))))));
		(((ga[((unsigned int)(6))])) = ((float)((get_num_groups(((unsigned int)(0)))))));
		(((ga[((unsigned int)(7))])) = ((float)((get_num_groups(((unsigned int)(1)))))));
		(((ga[((unsigned int)(8))])) = ((float)((get_num_groups(((unsigned int)(2)))))));
	}
}

// --- Entry Point ---

// start code fragment :: Definition of branch //
__kernel void branch(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) {
	{
		if((pa==((unsigned int)(pb)))) {
			(((ga[((unsigned int)(0))])) = ((c[((unsigned int)(0))])));
		};
	}
}

// --- Entry Point ---

// start code fragment :: Definition of access3D //
__kernel void access3D(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) {
	{
		unsigned int gid[3];
		((((gid)[((unsigned int)(0))])) = (get_global_id(((unsigned int)(0)))));
		((((gid)[((unsigned int)(1))])) = (get_global_id(((unsigned int)(1)))));
		((((gid)[((unsigned int)(2))])) = (get_global_id(((unsigned int)(2)))));
		unsigned int gid3 = (((((((gid)[((unsigned int)(0))]))*((unsigned int)(((gb[((unsigned int)(2))])))))*((unsigned int)(((gb[((unsigned int)(1))])))))+((((gid)[((unsigned int)(1))]))*((unsigned int)(((gb[((unsigned int)(2))]))))))+(((gid)[((unsigned int)(2))])));
		(((ga[((unsigned int)((gid3)))])) = ((c[((unsigned int)((gid3)))])));
	}
}

// --- Entry Point ---

// start code fragment :: Definition of barriers //
__kernel void barriers(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) {
	{
		unsigned int lid = (get_local_id(((unsigned int)(0))));
		unsigned int gid = (get_global_id(((unsigned int)(0))));
		(((l[((unsigned int)((lid)))])) = 7.0f);
		barrier(CLK_LOCAL_MEM_FENCE);
		(((ga[((unsigned int)((gid)))])) = ((l[((unsigned int)((lid)))])));
	}
}

// --- Entry Point ---

// start code fragment :: Definition of VectorAdd //
__kernel void VectorAdd(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) {
	{
		int iGID = ((int)((((((get_global_id(((unsigned int)(0))))*((unsigned int)(((gb[((unsigned int)(1))])))))*((unsigned int)(((gb[((unsigned int)(2))])))))+((get_global_id(((unsigned int)(1))))*((unsigned int)(((gb[((unsigned int)(2))]))))))+(get_global_id(((unsigned int)(2)))))));
		int iNumElements = (((((gb[((unsigned int)(0))]))*((gb[((unsigned int)(1))])))*((gb[((unsigned int)(2))])))-17);
		if(((iGID)>=(iNumElements))) {
			return;;
		};
		(((ga[((unsigned int)((iGID)))])) = (((c[((unsigned int)((iGID)))]))+((float)(((gb[((unsigned int)((iGID)))]))))));
	}
}

