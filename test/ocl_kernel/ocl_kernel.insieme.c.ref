// --- Generated Inspire Code ---

// start code fragment :: Definition of constantMemArg ... type: ((ref<array<real<4>,1>>)->unit) //
__kernel void constantMemArg(__global float* c) { float element = ((c[((unsigned int)(0))])); }

// start code fragment :: Definition of globalMemArg ... type: ((ref<array<real<4>,1>>)->unit) //
__kernel void globalMemArg(__global float* g) { float element = ((g[((unsigned int)(0))])); }

// start code fragment :: Definition of localMemArg ... type: ((ref<array<int<4>,1>>)->unit) //
__kernel void localMemArg(__local int* l) { int element = ((l[((unsigned int)(0))])); }

// start code fragment :: Definition of privateMemArg ... type: ((int<2>)->unit) //
__kernel void privateMemArg(short p) { short copy = p; }

// start code fragment :: Definition of allMemArg ... type: ((ref<array<real<4>,1>>,ref<array<real<4>,1>>,ref<array<int<4>,1>>,ref<array<real<4>,1>>,uint<4>,int<4>)->unit) //
__kernel void allMemArg(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) { (((ga[((unsigned int)(0))])) = ((float)(((gb[((unsigned int)(0))]))))); }

// start code fragment :: Definition of simpleCalc ... type: ((ref<array<real<4>,1>>,ref<array<real<4>,1>>,ref<array<int<4>,1>>,ref<array<real<4>,1>>,uint<4>,int<4>)->unit) //
__kernel void simpleCalc(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb){
	(((l[((unsigned int)(((gb[((unsigned int)(0))]))))])) = 3.3f);
	(((ga[pa])) = (((c[((unsigned int)(1))]))*((l[((unsigned int)(((gb[((unsigned int)(0))]))))]))));
}

// start code fragment :: Definition of getId ... type: ((ref<array<real<4>,1>>,ref<array<real<4>,1>>,ref<array<int<4>,1>>,ref<array<real<4>,1>>,uint<4>,int<4>)->unit) //
__kernel void getId(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb){
	unsigned int gid = (get_global_id(((unsigned int)(0))));
	(((ga[(gid)])) = ((float)((gid))));
}

// start code fragment :: Definition of getSize ... type: ((ref<array<real<4>,1>>,ref<array<real<4>,1>>,ref<array<int<4>,1>>,ref<array<real<4>,1>>,uint<4>,int<4>)->unit) //
__kernel void getSize(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb){
	(((ga[((unsigned int)(0))])) = ((float)((get_global_size(((unsigned int)(0)))))));
	(((ga[((unsigned int)(1))])) = ((float)((get_global_size(((unsigned int)(1)))))));
	(((ga[((unsigned int)(2))])) = ((float)((get_global_size(((unsigned int)(2)))))));
	(((ga[((unsigned int)(3))])) = ((float)((get_local_size(((unsigned int)(0)))))));
	(((ga[((unsigned int)(4))])) = ((float)((get_local_size(((unsigned int)(1)))))));
	(((ga[((unsigned int)(5))])) = ((float)((get_local_size(((unsigned int)(2)))))));
	(((ga[((unsigned int)(6))])) = ((float)((get_num_groups(((unsigned int)(0)))))));
	(((ga[((unsigned int)(7))])) = ((float)((get_num_groups(((unsigned int)(1)))))));
	(((ga[((unsigned int)(8))])) = ((float)((get_num_groups(((unsigned int)(2)))))));
}

// start code fragment :: Definition of branch ... type: ((ref<array<real<4>,1>>,ref<array<real<4>,1>>,ref<array<int<4>,1>>,ref<array<real<4>,1>>,uint<4>,int<4>)->unit) //
__kernel void branch(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb) { if((pa==((unsigned int)(pb)))) { (((ga[((unsigned int)(0))])) = ((c[((unsigned int)(0))]))); }; }

// start code fragment :: vector_type_declaration of __insieme_type_0 <=> vector<uint<4>,3> //
typedef struct ___insieme_type_0 { 
    unsigned int data[3];
} __insieme_type_0;

// A constructor initializing a vector of the type __insieme_type_0 uniformly
static inline __insieme_type_0 __insieme_type_0_init_uniform(unsigned int value) {
	__insieme_type_0 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of access3D ... type: ((ref<array<real<4>,1>>,ref<array<real<4>,1>>,ref<array<int<4>,1>>,ref<array<real<4>,1>>,uint<4>,int<4>)->unit) //
__kernel void access3D(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb){
	__insieme_type_0 gid;
	((((gid).data[((unsigned int)(0))])) = (get_global_id(((unsigned int)(0)))));
	((((gid).data[((unsigned int)(1))])) = (get_global_id(((unsigned int)(1)))));
	((((gid).data[((unsigned int)(2))])) = (get_global_id(((unsigned int)(2)))));
	unsigned int gid3 = (((((((gid).data[((unsigned int)(0))]))*((unsigned int)(((gb[((unsigned int)(2))])))))*((unsigned int)(((gb[((unsigned int)(1))])))))+((((gid).data[((unsigned int)(1))]))*((unsigned int)(((gb[((unsigned int)(2))]))))))+(((gid).data[((unsigned int)(2))])));
	(((ga[(gid3)])) = ((c[(gid3)])));
}

// start code fragment :: Definition of barriers ... type: ((ref<array<real<4>,1>>,ref<array<real<4>,1>>,ref<array<int<4>,1>>,ref<array<real<4>,1>>,uint<4>,int<4>)->unit) //
__kernel void barriers(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb){
	unsigned int lid = (get_local_id(((unsigned int)(0))));
	unsigned int gid = (get_global_id(((unsigned int)(0))));
	(((l[(lid)])) = ((c[(gid)])));
	barrier(CLK_LOCAL_MEM_FENCE);
	(((ga[(gid)])) = ((l[(lid)])));
}

// start code fragment :: vector_type_declaration of __insieme_type_1 <=> vector<int<4>,258> //
typedef struct ___insieme_type_1 { 
    int data[258];
} __insieme_type_1;

// A constructor initializing a vector of the type __insieme_type_1 uniformly
static inline __insieme_type_1 __insieme_type_1_init_uniform(int value) {
	__insieme_type_1 res;
	for (int i=0; i<258;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of localMem ... type: ((ref<array<real<4>,1>>,ref<array<real<4>,1>>,ref<array<int<4>,1>>,ref<array<real<4>,1>>,uint<4>,int<4>)->unit) //
__kernel void localMem(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb){
	__local __insieme_type_1 inKernelLocal;
	unsigned int gid = (get_global_id(((unsigned int)(0))));
	unsigned int lid = (get_local_id(((unsigned int)(0))));
	{};
	(((l[(lid)])) = ((c[(gid)])));
	((((inKernelLocal).data[((lid)-((unsigned int)(1)))])) = ((gb[(gid)])));
	barrier(CLK_LOCAL_MEM_FENCE);
	(((ga[(gid)])) = (((l[((gid)+((unsigned int)(1)))]))+((float)((((inKernelLocal).data[(gid)]))))));
}

// start code fragment :: Definition of VectorAdd ... type: ((ref<array<real<4>,1>>,ref<array<real<4>,1>>,ref<array<int<4>,1>>,ref<array<real<4>,1>>,uint<4>,int<4>)->unit) //
__kernel void VectorAdd(__global float* c, __global float* ga, __global int* gb, __local float* l, unsigned int pa, int pb){
	int iGID = ((int)((((((get_global_id(((unsigned int)(0))))*((unsigned int)(((gb[((unsigned int)(1))])))))*((unsigned int)(((gb[((unsigned int)(2))])))))+((get_global_id(((unsigned int)(1))))*((unsigned int)(((gb[((unsigned int)(2))]))))))+(get_global_id(((unsigned int)(2)))))));
	int iNumElements = (((((gb[((unsigned int)(0))]))*((gb[((unsigned int)(1))])))*((gb[((unsigned int)(2))])))-17);
	if(((iGID)>=(iNumElements))) { return; };
	(((ga[((unsigned int)((iGID)))])) = (((c[((unsigned int)((iGID)))]))+((float)(((gb[((unsigned int)((iGID)))]))))));
}
