// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: vector_type_declaration of __insieme_type_2 <=> vector<real<8>,1000> //
typedef struct ___insieme_type_2 { 
    double data[1000];
} __insieme_type_2;

// A constructor initializing a vector of the type __insieme_type_2 uniformly
static inline __insieme_type_2 __insieme_type_2_init_uniform(double value) {
	__insieme_type_2 res;
	for (int i=0; i<1000;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_1 <=> vector<vector<real<8>,1000>,1000> //
typedef struct ___insieme_type_1 { 
    __insieme_type_2 data[1000];
} __insieme_type_1;

// A constructor initializing a vector of the type __insieme_type_1 uniformly
static inline __insieme_type_1 __insieme_type_1_init_uniform(__insieme_type_2 value) {
	__insieme_type_1 res;
	for (int i=0; i<1000;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    __insieme_type_1 A;
    __insieme_type_1 B;
    __insieme_type_1 C;
};

// start code fragment :: global data //
struct __insieme_globals __GLOBAL__;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: vector_type_declaration of __insieme_type_3 <=> vector<char,3> //
typedef struct ___insieme_type_3 { 
    char data[3];
} __insieme_type_3;

// A constructor initializing a vector of the type __insieme_type_3 uniformly
static inline __insieme_type_3 __insieme_type_3_init_uniform(char value) {
	__insieme_type_3 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_4 <=> vector<char,4> //
typedef struct ___insieme_type_4 { 
    char data[4];
} __insieme_type_4;

// A constructor initializing a vector of the type __insieme_type_4 uniformly
static inline __insieme_type_4 __insieme_type_4_init_uniform(char value) {
	__insieme_type_4 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of main ... type: (()->int<4>) //
int main(){
	;
	{
		for(int var_5 = 0; var_5 < 1000; var_5 += 1)  { for(int var_4 = 0; var_4 < 1000; var_4 += 1)  { ((((((*(&((__GLOBAL__).A))).data[((unsigned int)(var_5))])).data[((unsigned int)(var_4))])) = ((double)((var_5*var_4)))); }; };
		for(int var_13 = 0; var_13 < 1000; var_13 += 1)  { for(int var_12 = 0; var_12 < 1000; var_12 += 1)  { ((((((*(&((__GLOBAL__).B))).data[((unsigned int)(var_13))])).data[((unsigned int)(var_12))])) = ((double)((((var_13==var_12))?(1):(0))))); }; };
		for(int var_20 = 0; var_20 < 1000; var_20 += 1)  { for(int var_19 = 0; var_19 < 1000; var_19 += 1) {
			double sum = ((double)(0));
			for(int var_18 = 0; var_18 < 1000; var_18 += 1)  { ((sum) = ((sum)+((((((*(&((__GLOBAL__).A))).data[((unsigned int)(var_20))])).data[((unsigned int)(var_18))]))*(((((*(&((__GLOBAL__).B))).data[((unsigned int)(var_18))])).data[((unsigned int)(var_19))]))))); };
			((((((*(&((__GLOBAL__).C))).data[((unsigned int)(var_20))])).data[((unsigned int)(var_19))])) = (sum));
		}; };
	};
	int success = 1;
	for(int var_33 = 0; var_33 < 1000; var_33 += 1) {
		for(int var_26 = 0; var_26 < (((1000<1000))?(1000):(1000)); var_26 += 1)  { if(((((((*(&((__GLOBAL__).A))).data[((unsigned int)(var_33))])).data[((unsigned int)(var_26))]))!=(((((*(&((__GLOBAL__).C))).data[((unsigned int)(var_33))])).data[((unsigned int)(var_26))])))) { ((success) = 0); }; };
		for(int var_32 = (((1000<1000))?(1000):(1000)); var_32 < (((1000>1000))?(1000):(1000)); var_32 += 1)  { if(((((((*(&((__GLOBAL__).C))).data[((unsigned int)(var_33))])).data[((unsigned int)(var_32))]))!=((double)(0)))) { ((success) = 0); }; };
	};
	printf("Verification: %s\n", ((((success)!=0))?(((((__insieme_type_3){{'O', 'K', '\0'}})).data)):(((((__insieme_type_4){{'E', 'R', 'R', '\0'}})).data))));
}
static int main_wrap(void* _closure) { return main(); }
