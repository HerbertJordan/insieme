// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<struct<A:vector<vector<real<8>,1000>,1000>,B:vector<vector<real<8>,1000>,1000>,C:vector<vector<real<8>,1000>,1000>>> v1 =  new(struct{A:=vector.init.uniform(vector.init.uniform(0.0, 1000), 1000), B:=vector.init.uniform(vector.init.uniform(0.0, 1000), 1000), C:=vector.init.uniform(vector.init.uniform(0.0, 1000), 1000)});
        {
            for(decl int<4> v5 = 0 .. 1000 : 1) {
                for(decl int<4> v4 = 0 .. 1000 : 1) {
                    vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, A, type<vector<vector<real<8>,1000>,1000>>), v5), v4) := v5*v4;
                };
            };
            for(decl int<4> v13 = 0 .. 1000 : 1) {
                for(decl int<4> v12 = 0 .. 1000 : 1) {
                    vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, B, type<vector<vector<real<8>,1000>,1000>>), v13), v12) := ite(v13==v12, bind(){fun()return 1()}, bind(){fun()return 0()});
                };
            };
            for(decl int<4> v20 = 0 .. 1000 : 1) {
                for(decl int<4> v19 = 0 .. 1000 : 1) {
                    decl ref<real<8>> v14 =  var(0);
                    for(decl int<4> v18 = 0 .. 1000 : 1) {
                        v14 := v14+vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, A, type<vector<vector<real<8>,1000>,1000>>), v20), v18)*vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, B, type<vector<vector<real<8>,1000>,1000>>), v18), v19);
                    };
                    vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, C, type<vector<vector<real<8>,1000>,1000>>), v20), v19) := v14;
                };
            };
        };
        decl ref<int<4>> v21 =  var(1);
        for(decl int<4> v33 = 0 .. 1000 : 1) {
            for(decl int<4> v26 = 0 .. ite(1000<1000, bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, A, type<vector<vector<real<8>,1000>,1000>>), v33), v26), vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, C, type<vector<vector<real<8>,1000>,1000>>), v33), v26))) {
                    v21 := 0;
                } else { };
            };
            for(decl int<4> v32 = ite(1000<1000, bind(){fun()return 1000()}, bind(){fun()return 1000()}) .. ite(1000>1000, bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, C, type<vector<vector<real<8>,1000>,1000>>), v33), v32), 0)) {
                    v21 := 0;
                } else { };
            };
        };
        printf(string.as.char.pointer("Verification: %s\n"), varlist.pack((ite(int.ne(v21, 0), bind(){fun()return vector.to.array(['O', 'K', '\0'])()}, bind(){fun()return vector.to.array(['E', 'R', 'R', '\0'])()}))));
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<struct<A:vector<vector<real<8>,1000>,1000>,B:vector<vector<real<8>,1000>,1000>,C:vector<vector<real<8>,1000>,1000>>> v1 = ( new(struct{A:=vector.init.uniform(vector.init.uniform(0.0, 1000), 1000), B:=vector.init.uniform(vector.init.uniform(0.0, 1000), 1000), C:=vector.init.uniform(vector.init.uniform(0.0, 1000), 1000)}));
        <m id=4>{
            <m id=1>for(decl int<4> v5 = 0 .. 1000 : 1) {
                for(decl int<4> v4 = 0 .. 1000 : 1) {
                    (vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, A, type<vector<vector<real<8>,1000>,1000>>), CAST<uint<4>>(v5)), CAST<uint<4>>(v4)) := CAST<real<8>>((v5*v4)));
                };
            }</m>;
            <m id=2>for(decl int<4> v13 = 0 .. 1000 : 1) {
                for(decl int<4> v12 = 0 .. 1000 : 1) {
                    (vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, B, type<vector<vector<real<8>,1000>,1000>>), CAST<uint<4>>(v13)), CAST<uint<4>>(v12)) := CAST<real<8>>(ite((v13==v12), bind(){fun()return 1()}, bind(){fun()return 0()})));
                };
            }</m>;
            <m id=3>for(decl int<4> v20 = 0 .. 1000 : 1) {
                for(decl int<4> v19 = 0 .. 1000 : 1) {
                    decl ref<real<8>> v14 = ( var(CAST<real<8>>(0)));
                    for(decl int<4> v18 = 0 .. 1000 : 1) {
                        (v14 := (( *v14)+(( *vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, A, type<vector<vector<real<8>,1000>,1000>>), CAST<uint<4>>(v20)), CAST<uint<4>>(v18)))*( *vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, B, type<vector<vector<real<8>,1000>,1000>>), CAST<uint<4>>(v18)), CAST<uint<4>>(v19))))));
                    };
                    (vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, C, type<vector<vector<real<8>,1000>,1000>>), CAST<uint<4>>(v20)), CAST<uint<4>>(v19)) := ( *v14));
                };
            }</m>;
        }</m>;
        decl ref<int<4>> v21 = ( var(1));
        for(decl int<4> v33 = 0 .. 1000 : 1) {
            for(decl int<4> v26 = 0 .. ite((1000<1000), bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(( *vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, A, type<vector<vector<real<8>,1000>,1000>>), CAST<uint<4>>(v33)), CAST<uint<4>>(v26))), ( *vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, C, type<vector<vector<real<8>,1000>,1000>>), CAST<uint<4>>(v33)), CAST<uint<4>>(v26))))) {
                    (v21 := 0);
                } else { };
            };
            for(decl int<4> v32 = ite((1000<1000), bind(){fun()return 1000()}, bind(){fun()return 1000()}) .. ite((1000>1000), bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(( *vector.ref.elem(vector.ref.elem(composite.ref.elem(v1, C, type<vector<vector<real<8>,1000>,1000>>), CAST<uint<4>>(v33)), CAST<uint<4>>(v32))), CAST<real<8>>(0))) {
                    (v21 := 0);
                } else { };
            };
        };
        printf(string.as.char.pointer("Verification: %s\n"), varlist.pack((ite(int.ne(( *v21), 0), bind(){fun()return vector.to.array(['O', 'K', '\0'])()}, bind(){fun()return vector.to.array(['E', 'R', 'R', '\0'])()}))));
    }

