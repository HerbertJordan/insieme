/**
 * ------------------------ Auto-generated Code ------------------------ 
 *           This code was generated by the Insieme Compiler 
 * --------------------------------------------------------------------- 
 */
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <time.h>

struct utsname;

typedef struct ___insieme_type_56 {
    char data[65];
} __insieme_type_56;

struct utsname {
    __insieme_type_56 sysname;
    __insieme_type_56 nodename;
    __insieme_type_56 release;
    __insieme_type_56 version;
    __insieme_type_56 machine;
    __insieme_type_56 __domainname;
};

int32_t uname(struct utsname* p1);

int64_t sysconf(int32_t p1);

/* ------- Function Definitions --------- */
void bots_get_architecture(char* var_38) {
    int32_t ncpus = (int32_t)sysconf(83);
    struct utsname architecture;
    uname(&architecture);
    snprintf(var_38, (uint64_t)256, "%s-%s;%d", (char*)(&architecture.sysname), (char*)(&architecture.machine), ncpus);
}
typedef struct ___insieme_type_52 {
    char data[15];
} __insieme_type_52;

/* ------- Function Definitions --------- */
void bots_get_load_average(char* var_42) {
    sprintf(var_42, ";;");
}
int32_t fflush(FILE* p1);

struct __insieme_type_5 {
    FILE** _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr;
    int32_t _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_sequential_flag;
    int32_t _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_check_flag;
    int32_t _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_verbose_mode;
    int32_t _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_result;
    int32_t _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_output_format;
    int32_t _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_print_header;
    double _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_time_program;
    double _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_time_sequential;
    uint64_t _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_number_of_tasks;
    int32_t _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_arg_size;
    int32_t _home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_print_times;
    FILE** _home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout;
    int32_t _home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_total_count;
};

typedef struct ___insieme_type_10 {
    int32_t data[14];
} __insieme_type_10;

typedef struct ___insieme_type_9 {
    char data[256];
} __insieme_type_9;

struct __insieme_type_5 __GLOBAL__0;

__insieme_type_9 __GLOBAL__1;

__insieme_type_9 __GLOBAL__2;

__insieme_type_9 __GLOBAL__3;

__insieme_type_9 __GLOBAL__4;

__insieme_type_9 __GLOBAL__5;

__insieme_type_9 __GLOBAL__6;

__insieme_type_9 __GLOBAL__7;

__insieme_type_9 __GLOBAL__8;

__insieme_type_9 __GLOBAL__9;

__insieme_type_9 __GLOBAL__10;

__insieme_type_9 __GLOBAL__11;

__insieme_type_9 __GLOBAL__12;

__insieme_type_9 __GLOBAL__13;

__insieme_type_9 __GLOBAL__14;

__insieme_type_10 __GLOBAL__15;

/* ------- Function Definitions --------- */
void bots_print_usage() {
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Usage: %s -[options]\n", (char*)(&__GLOBAL__2));
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Where options are:\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "  -n <size>  : ");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "  -e <str>   : Include 'str' execution message.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "  -v <level> : Set verbose level (default = 1).\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "               0 - none.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "               1 - default.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "               2 - debug.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "  -o <value> : Set output format mode (default = 1).\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "               0 - no benchmark output.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "               1 - detailed list format.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "               2 - detailed row format.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "               3 - abridged list format.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "               4 - abridged row format.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "  -z         : Print row header (if output format is a row variant).\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "  -c         : Check mode ON.\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "  -h         : Print program's usage (this help).\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "  -t         : Disable printing of times (for integration tests).\n");
    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "\n");
}
/* ------- Function Definitions --------- */
void bots_error(int32_t error, char* message) {
    if (message == 0) {
        int32_t var_36 = (int32_t)error;
        switch(var_36) {
            case 0: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Error (%d): %s\n", error, "Unspecified error.");
            } break;
            case 1: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Error (%d): %s\n", error, "Not enough memory.");
            } break;
            case 2: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Error (%d): %s\n", error, "Unrecognized parameter.");
                bots_print_usage();
            } break;
            default: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Error (%d): %s\n", error, "Invalid error code.");
            }
        };
    } else {
        fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Error (%d): %s\n", error, message);
    };
    exit(100+error);
}
/* ------- Function Definitions --------- */
void bots_print_results() {
    __insieme_type_9 str_name;
    __insieme_type_9 str_parameters;
    __insieme_type_9 str_model;
    __insieme_type_9 str_resources;
    __insieme_type_52 str_result;
    __insieme_type_52 str_time_program;
    __insieme_type_52 str_time_sequential;
    __insieme_type_52 str_speed_up;
    __insieme_type_52 str_number_of_tasks;
    __insieme_type_52 str_number_of_tasks_per_second;
    __insieme_type_9 str_exec_date;
    __insieme_type_9 str_exec_message;
    __insieme_type_9 str_architecture;
    __insieme_type_9 str_load_avg;
    __insieme_type_9 str_comp_date;
    __insieme_type_9 str_comp_message;
    __insieme_type_9 str_cc;
    __insieme_type_9 str_cflags;
    __insieme_type_9 str_ld;
    __insieme_type_9 str_ldflags;
    __insieme_type_9 str_cutoff;
    sprintf(str_name.data, "%s", __GLOBAL__1.data);
    sprintf(str_parameters.data, "%s", __GLOBAL__3.data);
    sprintf(str_model.data, "%s", __GLOBAL__4.data);
    sprintf(str_cutoff.data, "%s", __GLOBAL__14.data);
    sprintf(str_resources.data, "%s", __GLOBAL__5.data);
    {
        int32_t var_66 = (int32_t)__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_result;
        switch(var_66) {
            case 0: {
                sprintf(str_result.data, "n/a");
            } break;
            case 1: {
                sprintf(str_result.data, "successful");
            } break;
            case 2: {
                sprintf(str_result.data, "UNSUCCESSFUL");
            } break;
            case 3: {
                sprintf(str_result.data, "Not requested");
            } break;
            default: {
                sprintf(str_result.data, "error");
            }
        };
    };
    sprintf(str_time_program.data, "%f", __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_time_program);
    if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_sequential_flag != 0) {
        sprintf(str_time_sequential.data, "%f", __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_time_sequential);
    } else {
        sprintf(str_time_sequential.data, "n/a");
    };
    if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_sequential_flag != 0) {
        sprintf(str_speed_up.data, "%3.2f", __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_time_sequential/__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_time_program);
    } else {
        sprintf(str_speed_up.data, "n/a");
    };
    sprintf(str_number_of_tasks.data, "%3.2f", (double)((float)__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_number_of_tasks));
    sprintf(str_number_of_tasks_per_second.data, "%3.2f", (double)((float)__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_number_of_tasks)/__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_time_program);
    sprintf(str_exec_date.data, "%s", __GLOBAL__6.data);
    sprintf(str_exec_message.data, "%s", __GLOBAL__7.data);
    bots_get_architecture(str_architecture.data);
    bots_get_load_average(str_load_avg.data);
    sprintf(str_comp_date.data, "%s", __GLOBAL__8.data);
    sprintf(str_comp_message.data, "%s", __GLOBAL__9.data);
    sprintf(str_cc.data, "%s", __GLOBAL__10.data);
    sprintf(str_cflags.data, "%s", __GLOBAL__11.data);
    sprintf(str_ld.data, "%s", __GLOBAL__12.data);
    sprintf(str_ldflags.data, "%s", __GLOBAL__13.data);
    if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_print_header != 0) {
        int32_t var_67 = (int32_t)__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_output_format;
        switch(var_67) {
            case 0: {
                
            } break;
            case 1: {
                
            } break;
            case 2: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Benchmark;Parameters;Model;Cutoff;Resources;Result;\
Time;Sequential;Speed-up;\
Nodes;Nodes/Sec;\
Exec Date;Exec Time;Exec Message;\
Architecture;Processors;Load Avg-1;Load Avg-5;Load Avg-15;\
Comp Date;Comp Time;Comp Message;CC;CFLAGS;LD;LDFLAGS\n");
            } break;
            case 3: {
                
            } break;
            case 4: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Benchmark;Parameters;Model;Cutoff;Resources;Result;\
Time;Sequential;Speed-up;\
Nodes;Nodes/Sec;\n");
            } break;
            default: {
                
            }
        };
    };
    {
        int32_t var_68 = (int32_t)__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_output_format;
        switch(var_68) {
            case 0: {
                
            } break;
            case 1: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "\n");
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Program             = %s\n", (char*)(&str_name));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Parameters          = %s\n", (char*)(&str_parameters));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Model               = %s\n", (char*)(&str_model));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Embedded cut-off    = %s\n", (char*)(&str_cutoff));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Verification        = %s\n", (char*)(&str_result));
                if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_print_times != 0) {
                    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Time Program        = %s seconds\n", (char*)(&str_time_program));
                    if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_sequential_flag != 0) {
                        fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Time Sequential     = %s seconds\n", (char*)(&str_time_sequential));
                        fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Speed-up            = %s\n", (char*)(&str_speed_up));
                    };
                };
                if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_number_of_tasks > (uint64_t)0) {
                    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Nodes               = %s\n", (char*)(&str_number_of_tasks));
                    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Nodes/Sec           = %s\n", (char*)(&str_number_of_tasks_per_second));
                };
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Execution Date      = %s\n", (char*)(&str_exec_date));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Execution Message   = %s\n", (char*)(&str_exec_message));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Architecture        = %s\n", (char*)(&str_architecture));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Compilation Date    = %s\n", (char*)(&str_comp_date));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Compilation Message = %s\n", (char*)(&str_comp_message));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Compiler            = %s\n", (char*)(&str_cc));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Compiler Flags      = %s\n", (char*)(&str_cflags));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Linker              = %s\n", (char*)(&str_ld));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Linker Flags        = %s\n", (char*)(&str_ldflags));
                fflush(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout);
            } break;
            case 2: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;%s;%s;%s;%s;", (char*)(&str_name), (char*)(&str_parameters), (char*)(&str_model), (char*)(&str_cutoff), (char*)(&str_resources), (char*)(&str_result));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;%s;", (char*)(&str_time_program), (char*)(&str_time_sequential), (char*)(&str_speed_up));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;", (char*)(&str_number_of_tasks), (char*)(&str_number_of_tasks_per_second));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;", (char*)(&str_exec_date), (char*)(&str_exec_message));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;", (char*)(&str_architecture), (char*)(&str_load_avg));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;", (char*)(&str_comp_date), (char*)(&str_comp_message));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;%s;%s;", (char*)(&str_cc), (char*)(&str_cflags), (char*)(&str_ld), (char*)(&str_ldflags));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "\n");
            } break;
            case 3: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "\n");
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Program             = %s\n", (char*)(&str_name));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Parameters          = %s\n", (char*)(&str_parameters));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Model               = %s\n", (char*)(&str_model));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Embedded cut-off    = %s\n", (char*)(&str_cutoff));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "# of Threads        = %s\n", (char*)(&str_resources));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Verification        = %s\n", (char*)(&str_result));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Time Program        = %s seconds\n", (char*)(&str_time_program));
                if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_sequential_flag != 0) {
                    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Time Sequential     = %s seconds\n", (char*)(&str_time_sequential));
                    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Speed-up            = %s\n", (char*)(&str_speed_up));
                };
                if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_number_of_tasks > (uint64_t)0) {
                    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Nodes               = %s\n", (char*)(&str_number_of_tasks));
                    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Nodes/Sec           = %s\n", (char*)(&str_number_of_tasks_per_second));
                };
            } break;
            case 4: {
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;%s;%s;%s;%s;", (char*)(&str_name), (char*)(&str_parameters), (char*)(&str_model), (char*)(&str_cutoff), (char*)(&str_resources), (char*)(&str_result));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;%s;", (char*)(&str_time_program), (char*)(&str_time_sequential), (char*)(&str_speed_up));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "%s;%s;", (char*)(&str_number_of_tasks), (char*)(&str_number_of_tasks_per_second));
                fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "\n");
            } break;
            default: {
                bots_error(0, "No valid output format\n");
            }
        };
    };
}
/* ------- Function Definitions --------- */
int32_t verify_queens(int32_t var_106) {
    if ((uint64_t)var_106 > 14*sizeof(int32_t)/sizeof(int32_t)) {
        return 0;
    };
    if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_total_count == __GLOBAL__15.data[var_106-1]) {
        return 1;
    };
    return 2;
}
char* __xpg_basename(char* p1);

int64_t time(int64_t* p1);

/* ------- Function Definitions --------- */
void bots_get_date(char* str) {
    int64_t now = 0;
    time(&now);
    strftime(str, (uint64_t)32, "%Y/%m/%d;%H:%M", gmtime(&now));
}
/* ------- Function Definitions --------- */
void bots_get_params_common(int32_t var_10, char** var_11) {
    int32_t i = 1;
    strcpy(__GLOBAL__2.data, __xpg_basename(var_11[0]));
    bots_get_date(__GLOBAL__6.data);
    strcpy(__GLOBAL__7.data, "");
    while (i < var_10) {
        if ((int32_t)var_11[i][0] == 45) {
            int32_t var_16 = (int32_t)((int32_t)var_11[i][1]);
            switch(var_16) {
                case 'c': {
                    var_11[i][1] = '*';
                    __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_check_flag = 1;
                } break;
                case 'e': {
                    var_11[i][1] = '*';
                    i++;
                    if (var_10 == i) {
                        bots_print_usage();
                        exit(100);
                    };
                    strcpy(__GLOBAL__7.data, var_11[i]);
                } break;
                case 'h': {
                    var_11[i][1] = '*';
                    bots_print_usage();
                    exit(100);
                    var_11[i][1] = '*';
                    i++;
                    if (var_10 == i) {
                        bots_print_usage();
                        exit(100);
                    };
                    __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_arg_size = atoi(var_11[i]);
                } break;
                case 'n': {
                    var_11[i][1] = '*';
                    i++;
                    if (var_10 == i) {
                        bots_print_usage();
                        exit(100);
                    };
                    __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_arg_size = atoi(var_11[i]);
                } break;
                case 'o': {
                    var_11[i][1] = '*';
                    i++;
                    if (var_10 == i) {
                        bots_print_usage();
                        exit(100);
                    };
                    __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_output_format = atoi(var_11[i]);
                } break;
                case 'v': {
                    var_11[i][1] = '*';
                    i++;
                    if (var_10 == i) {
                        bots_print_usage();
                        exit(100);
                    };
                    __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_verbose_mode = atoi(var_11[i]);
                    if ((uint32_t)__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_verbose_mode > (uint32_t)1) {
                        fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Error: Configure the suite using '--debug' option in order to use a verbose level greather than 1.\n");
                        exit(100);
                    };
                } break;
                case 'z': {
                    var_11[i][1] = '*';
                    __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_print_header = 1;
                } break;
                case 't': {
                    var_11[i][1] = '*';
                    __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_print_times = 0;
                } break;
                default: {
                    fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Error: Unrecognized parameter.\n");
                    bots_print_usage();
                    exit(100);
                }
            };
        } else {
            fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr, "Error: Unrecognized parameter.\n");
            bots_print_usage();
            exit(100);
        };
        ++i;
    };
}
/* ------- Function Definitions --------- */
void bots_get_params(int32_t var_7, char** var_8) {
    bots_get_params_common(var_7, var_8);
}
/* ------- External Variable Declaration ---------- */
extern FILE* stdout;

/* A constructor initializing a vector of type __insieme_type_9 = vector<char,256> uniformly */ 
static inline __insieme_type_9 __insieme_type_9_init_uniform(char value) {
    __insieme_type_9 res;
    for(int i=0; i<256;++i) {
        res.data[i] = value;
    }
    return res;
}

void* __builtin_alloca(uint64_t p1);

/* ------- Function Prototypes ---------- */
void __insieme_fun_38(int32_t p1, int32_t p2, char* p3, int32_t* p4, int32_t p5);

/* ------- Function Definitions --------- */
void __insieme_fun_49() {
    {
        
    };
}
/* ------- Function Definitions --------- */
cilk void find_queens(int32_t size) {
    __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_total_count = 0;
    {
        if ((uint32_t)__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_verbose_mode >= (uint32_t)1) {
            fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, "Computing N-Queens algorithm (n=%d) ", size);
        };
    };
    {
        
    };
    {
        {
            {
                char* a;
                a = (char*)__builtin_alloca((uint64_t)size*sizeof(char));
                __insieme_fun_38(size, 0, a, &__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_total_count, 0);
            };
            {
                
            };
        };
    };
    {
        if ((uint32_t)__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_verbose_mode >= (uint32_t)1) {
            fprintf(*__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout, " completed!\n");
        };
    };
    {
        __insieme_fun_49();
        {
            
        };
    };
}
/* ------- External Variable Declaration ---------- */
extern FILE* stderr;

/* ------- Function Definitions --------- */
void bots_set_info() {
    snprintf(__GLOBAL__1.data, (uint64_t)256, "N Queens");
    snprintf(__GLOBAL__3.data, (uint64_t)256, "N=%d", __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_arg_size);
    snprintf(__GLOBAL__4.data, (uint64_t)256, "OpenMP (using tasks)");
    snprintf(__GLOBAL__5.data, (uint64_t)256, "%d", 65536);
    snprintf(__GLOBAL__8.data, (uint64_t)256, "");
    snprintf(__GLOBAL__9.data, (uint64_t)256, "");
    snprintf(__GLOBAL__10.data, (uint64_t)256, "");
    snprintf(__GLOBAL__11.data, (uint64_t)256, "");
    snprintf(__GLOBAL__12.data, (uint64_t)256, "");
    snprintf(__GLOBAL__13.data, (uint64_t)256, "");
    strcpy(__GLOBAL__14.data, "none");
}
/* ------- Function Definitions --------- */
int64_t bots_usecs() {
    struct timeval t;
    gettimeofday(&t, 0);
    return t.tv_sec*(int64_t)1000000+t.tv_usec;
}
/* ------- Function Definitions --------- */
int32_t main(int32_t argc, char** argv) {
    {
        {
            __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_stderr = &stderr;
            __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_verbose_mode = 1;
            __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_result = 3;
            __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_output_format = 1;
            __GLOBAL__1 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__2 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__3 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__4 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__5 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__6 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__7 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__8 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__9 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__10 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__11 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__12 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__13 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__14 = __insieme_type_9_init_uniform('\0');
            __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_number_of_tasks = (uint64_t)0;
            __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_arg_size = 14;
            __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_print_times = 1;
            __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens_nqueens_c_stdout = &stdout;
            __GLOBAL__15 = (__insieme_type_10){{1, 0, 0, 2, 10, 4, 40, 92, 352, 724, 2680, 14200, 73712, 365596}};
        };
        {
            int64_t bots_t_start = 0;
            int64_t bots_t_end = 0;
            bots_get_params(argc, argv);
            {
                
            };
            bots_set_info();
            {
                
            };
            bots_t_start = bots_usecs();
            find_queens(__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_arg_size);
            bots_t_end = bots_usecs();
            __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_time_program = (double)(bots_t_end-bots_t_start)/(double)1000000;
            {
                
            };
            if (__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_check_flag != 0) {
                __GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_result = verify_queens(__GLOBAL__0._home_herbert_insieme_test_omp_bots_nqueens____bots_main_c_bots_arg_size);
            };
            {
                
            };
            bots_print_results();
            return 0;
        };
    };
}

void* memset(void* p1, int32_t p2, uint64_t p3);

/* ------- Function Definitions --------- */
int32_t ok(int32_t var_70, char* var_71) {
    int32_t var_72 = 0;
    int32_t var_73 = 0;
    char p = '\0';
    char q = '\0';
    for (int32_t var_76 = 0; var_76 < var_70; ++var_76) {
        p = var_71[var_76];
        for (int32_t var_77 = var_76+1; var_77 < var_70; ++var_77) {
            q = var_71[var_77];
            if ((int32_t)q == (int32_t)p || (int32_t)q == (int32_t)p-(var_77-var_76) || (int32_t)q == (int32_t)p+(var_77-var_76)) {
                return 0;
            };
        };
    };
    return 1;
}
/* ------- Function Definitions --------- */
cilk void __insieme_fun_44(int32_t var_219, int32_t var_220, char* var_221, int32_t var_222, int32_t** var_223, int32_t var_224) {
    {
        char* b = (char*)__builtin_alloca((uint64_t)var_219*sizeof(char));
        memcpy((void*)b, (void*)var_221, (uint64_t)var_220*sizeof(char));
        b[var_220] = (char)var_224;
        if (ok(var_220+1, b) != 0) {
            __insieme_fun_38(var_219, var_220+1, b, &(*var_223)[var_224], var_222);
        };
    };
}
/* ------- Function Definitions --------- */
cilk void __insieme_fun_38(int32_t n, int32_t j, char* var_92, int32_t* var_217, int32_t depth) {
    int32_t* csols;
    int32_t var_96 = 0;
    if (n == j) {
        *var_217 = 1;
        return;
    };
    *var_217 = 0;
    csols = (int32_t*)__builtin_alloca((uint64_t)n*sizeof(int32_t));
    memset((void*)csols, 0, (uint64_t)n*sizeof(int32_t));
    for (int32_t var_97 = 0; var_97 < n; ++var_97) {
        {            
		spawn __insieme_fun_44(n, j, var_92, depth, &csols, var_97);
        };
    };
    {
     	sync;   
    };
    for (int32_t var_100 = 0; var_100 < n; ++var_100) {
        *var_217 = *var_217+csols[var_100];
    };
}

