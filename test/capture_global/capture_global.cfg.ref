digraph G {
0[shape=diamond,label="ENTRY"];
1[shape=diamond,label="EXIT"];
2[shape=box,label="[B2]\l0: 0\lT: RETURN\l"];
3[shape=box,label="[B3]\l0: 10 <CTRL>\lT: FOR( ... ; v12 < 10; ...)\l"];
4[shape=box,label="[B4]\l0: v12 += 1 <LOOP_INC>\l"];
5[shape=box,label="[B5]\l0: int.eq(..., 5)\lT: IF(...)\l"];
6[shape=diamond,label="ENTRY"];
7[shape=diamond,label="EXIT"];
8[shape=box,label="[B8]\l0: ref.deref(...)\lT: RETURN\l"];
10[shape=box,label="[B10]\l0: composite.ref.elem(v10, count, type<int<4>>)\l"];
11[shape=box,label="[B11]\l0: ref.assign(..., ...)\l"];
12[shape=box,label="[B12]\l0: ref.assign(..., 0)\l"];
13[shape=box,label="[B13]\l0: composite.ref.elem(v10, reset_count, type<int<4>>)\l"];
14[shape=box,label="[B14]\l0: int.add(..., 1)\l"];
15[shape=box,label="[B15]\l0: ref.deref(...)\l"];
16[shape=box,label="[B16]\l0: composite.ref.elem(v10, reset_count, type<int<4>>)\l"];
18[shape=box,label="[B18]\l0: composite.ref.elem(v10, count, type<int<4>>)\l"];
19[shape=box,label="CALL"];
20[shape=box,label="RET"];
23[shape=box,label="[B23]\l0: ref.deref(v12)\l"];
24[shape=box,label="[B24]\l0: printf(..., ...)\l"];
25[shape=box,label="[B25]\l0: printf(..., ...)\l"];
26[shape=box,label="[B26]\l0: string.as.char.pointer(\"count=%2d\n\")\l"];
27[shape=box,label="[B27]\l0: varlist.pack((fun{...}(v1, 1)))\l"];
28[shape=box,label="[B28]\l"];
29[shape=box,label="[B29]\l0: string.as.char.pointer(\"count=%2d\n\")\l"];
30[shape=box,label="[B30]\l0: varlist.pack((fun{...}(v1, 2)))\l"];
31[shape=box,label="[B31]\l0: decl ref<int<4>> v12 = ( var(0)) <LOOP_INIT>\l"];
32[shape=box,label="[B32]\l0: decl v1 = ...\l"];
33[shape=box,label="[B33]\l0: ref.new(struct{count:=0, a:=vector.init.uniform(0, 50), reset_count:=1})\l"];
2->1 [label=""];
4->3 [label=""];
8->7 [label=""];
10->8 [label="0"];
11->10 [label=""];
13->11 [label="0"];
12->13 [label=""];
14->11 [label="1"];
15->14 [label="0"];
16->15 [label="0"];
12->16 [label=""];
18->12 [label="0"];
6->18 [label=""];
19->6 [label=""];
7->20 [label=""];
20->4 [label=""];
5->19 [label="true"];
5->4 [label="false"];
23->5 [label="0"];
24->23 [label=""];
26->24 [label="0"];
25->26 [label=""];
27->24 [label="1"];
25->27 [label=""];
29->25 [label="0"];
28->29 [label=""];
30->25 [label="1"];
28->30 [label=""];
3->28 [label="true"];
3->2 [label="false"];
31->3 [label=""];
32->31 [label=""];
33->32 [label=""];
0->33 [label=""];
}
