// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0
// --- Entry Point ---

// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    int count;
    int a[50];
    int reset_count;
};

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definitions for function type: __insieme_funType_type_0 //
// Abstract prototype for lambdas of type __insieme_funType_type_0
struct __insieme_funType_type_0 { 
    int(*fun)(void*, int);
};

// Type safe function for invoking lambdas of type __insieme_funType_type_0
int call__insieme_funType_type_0(struct __insieme_funType_type_0* lambda, int p1) { return lambda->fun(lambda, p1); }

// start code fragment :: Definitions for function type: __insieme_funType_type_1 //
// Abstract prototype for lambdas of type __insieme_funType_type_1
struct __insieme_funType_type_1 { 
    int(*fun)(void*, int);
    struct __insieme_globals* p0;
};

// start code fragment :: Definition of inc //
int inc(void* _capture, int step) {
	// --------- Captured Stuff - Begin -------------
	struct __insieme_globals* var_5 = ((struct __insieme_funType_type_1*)_capture)->p0;
	// --------- Captured Stuff -  End  -------------
	{
		((((((*var_5).a))[((unsigned int)(step))]))++);
		((*(&((*var_5).count))) = ((*(&((*var_5).count)))+step));
		return (*(&((*var_5).count)));;
	}
}


// start code fragment :: Definition of dec //
int dec(void* _capture, int step) {
	// --------- Captured Stuff - Begin -------------
	struct __insieme_globals* var_8 = ((struct __insieme_funType_type_1*)_capture)->p0;
	// --------- Captured Stuff -  End  -------------
	{
		((((((*var_8).a))[((unsigned int)(step))]))--);
		((*(&((*var_8).count))) = ((*(&((*var_8).count)))-step));
		return (*(&((*var_8).count)));;
	}
}


// start code fragment :: Definitions for function type: __insieme_funType_type_2 //
// Abstract prototype for lambdas of type __insieme_funType_type_2
struct __insieme_funType_type_2 { 
    int(*fun)(void*);
};

// Type safe function for invoking lambdas of type __insieme_funType_type_2
int call__insieme_funType_type_2(struct __insieme_funType_type_2* lambda) { return lambda->fun(lambda); }

// start code fragment :: Definitions for function type: __insieme_funType_type_3 //
// Abstract prototype for lambdas of type __insieme_funType_type_3
struct __insieme_funType_type_3 { 
    int(*fun)(void*);
    struct __insieme_globals* p0;
};

// start code fragment :: Definition of reset //
int reset(void* _capture) {
	// --------- Captured Stuff - Begin -------------
	struct __insieme_globals* var_10 = ((struct __insieme_funType_type_3*)_capture)->p0;
	// --------- Captured Stuff -  End  -------------
	{
		((*(&((*var_10).count))) = 0);
		((*(&((*var_10).reset_count))) = ((*(&((*var_10).reset_count)))+1));
		return (*(&((*var_10).count)));;
	}
}


// start code fragment :: Definition of main //
int main(int argc, char** argv) {
	{
		struct __insieme_globals* var_1 = malloc(sizeof(struct __insieme_globals));
		((*(&((*var_1).count))) = 0);
		((*(&((*var_1).reset_count))) = 1);
		for(int i = 0; i < 10; i += 1) {
			printf("count=%2d\n", inc(((struct __insieme_funType_type_0*)(&((struct __insieme_funType_type_1){0,var_1}))), 2));
			printf("count=%2d\n", dec(((struct __insieme_funType_type_0*)(&((struct __insieme_funType_type_1){0,var_1}))), 1));
			if(((i)==5)) {
				reset(((struct __insieme_funType_type_2*)(&((struct __insieme_funType_type_3){0,var_1}))));
			};
		};
		return 0;;
	}
}

