// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0
// --- Entry Point ---

// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    int count;
    int a[50];
    int reset_count;
};

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of inc //
int inc(struct __insieme_globals var_4, int step) {
	{
		((((((var_4).a))[((unsigned int)(step))]))++);
		((*(&((var_4).count))) = ((*(&((var_4).count)))+step));
		return (*(&((var_4).count)));;
	}
}


// start code fragment :: Definition of dec //
int dec(struct __insieme_globals var_7, int step) {
	{
		((((((var_7).a))[((unsigned int)(step))]))--);
		((*(&((var_7).count))) = ((*(&((var_7).count)))-step));
		return (*(&((var_7).count)));;
	}
}


// start code fragment :: Definition of reset //
int reset(struct __insieme_globals var_10) {
	{
		((*(&((var_10).count))) = 0);
		((*(&((var_10).reset_count))) = ((*(&((var_10).reset_count)))+1));
		return (*(&((var_10).count)));;
	}
}


// start code fragment :: Definition of main //
int main(int argc, char** argv) {
	{
		struct __insieme_globals* var_1 = malloc(sizeof(struct __insieme_globals));
		((*(&((*var_1).count))) = 0);
		((*(&((*var_1).reset_count))) = 1);
		for(int i = 0; i < 10; i += 1) {
			printf("count=%2d\n", inc(var_1, 2));
			printf("count=%2d\n", dec(var_1, 1));
			if(((i)==5)) {
				reset(var_1);
			};
		};
		return 0;;
	}
}

