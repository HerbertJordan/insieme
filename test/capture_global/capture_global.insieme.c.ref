// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: vector_type_declaration of __insieme_type_1 <=> vector<int<4>,50> //
typedef struct ___insieme_type_1 { 
    int data[50];
} __insieme_type_1;

// A constructor initializing a vector of the type __insieme_type_1 uniformly
static inline __insieme_type_1 __insieme_type_1_init_uniform(int value) {
	__insieme_type_1 res;
	for (int i=0; i<50;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    int count;
    __insieme_type_1 a;
    int reset_count;
};

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of inc ... type: ((ref<struct<count:int<4>,a:vector<int<4>,50>,reset_count:int<4>>>,int<4>)->int<4>) //
int inc(struct __insieme_globals* var_2, int step){
	((((*(&((*var_2).a))).data[((unsigned int)(step))]))++);
	((*(&((*var_2).count))) = ((*(&((*var_2).count)))+step));
	return (*(&((*var_2).count)));
}
static int inc_wrap(void* _closure, struct __insieme_globals* var_2, int step) { return inc(var_2, step); }

// start code fragment :: Definition of dec ... type: ((ref<struct<count:int<4>,a:vector<int<4>,50>,reset_count:int<4>>>,int<4>)->int<4>) //
int dec(struct __insieme_globals* var_5, int step){
	((((*(&((*var_5).a))).data[((unsigned int)(step))]))--);
	((*(&((*var_5).count))) = ((*(&((*var_5).count)))-step));
	return (*(&((*var_5).count)));
}
static int dec_wrap(void* _closure, struct __insieme_globals* var_5, int step) { return dec(var_5, step); }

// start code fragment :: Definition of reset ... type: ((ref<struct<count:int<4>,a:vector<int<4>,50>,reset_count:int<4>>>)->int<4>) //
int reset(struct __insieme_globals* var_8){
	((*(&((*var_8).count))) = 0);
	((*(&((*var_8).reset_count))) = ((*(&((*var_8).reset_count)))+1));
	return (*(&((*var_8).count)));
}
static int reset_wrap(void* _closure, struct __insieme_globals* var_8) { return reset(var_8); }

// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	struct __insieme_globals* var_1 = malloc(sizeof(struct __insieme_globals));
	((*(&((*var_1).count))) = 0);
	((*(&((*var_1).reset_count))) = 1);
	for(int var_13 = 0; var_13 < 10; var_13 += 1) {
		printf("count=%2d\n", inc(var_1, 2));
		printf("count=%2d\n", dec(var_1, 1));
		if((var_13==5)) { reset(var_1); };
	};
	return 0;
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
