// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: Definitions for function type: __insieme_funType_2 //
//
// -------------------- Begin of constructs for function type ((int<4>,int<4>)->int<4>)---------------------
// Base-struct of describing closures of type __insieme_funType_2 <-> ((int<4>,int<4>)->int<4>)
typedef struct ___insieme_funType_2 { 
    int(*call)(void*, int, int);
} __insieme_funType_2;

// Type safe function for invoking closures of type __insieme_funType_2
static inline int __insieme_funType_2_call(__insieme_funType_2* closure, int p1, int p2) { return closure->call(closure, p1,p2); }

// A constructor for closures wrapping pure functions of type ((int<4>,int<4>)->int<4>)
static inline __insieme_funType_2* __insieme_funType_2_ctr(__insieme_funType_2* target, int(*call)(void*, int, int)) {
	*target = (__insieme_funType_2){call};
	return target;
}
// ----------------------- end of constructs for function ((int<4>,int<4>)->int<4>)-----------------------

// start code fragment :: vector_type_declaration of __insieme_type_1 <=> vector<((int<4>,int<4>)->int<4>),4> //
typedef struct ___insieme_type_1 { 
    __insieme_funType_2* data[4];
} __insieme_type_1;

// A constructor initializing a vector of the type __insieme_type_1 uniformly
static inline __insieme_type_1 __insieme_type_1_init_uniform(__insieme_funType_2* value) {
	__insieme_type_1 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of min ... type: ((int<4>,int<4>)->int<4>) //
int min(int a, int b) { return (((a<b))?(a):(b)); }
static int min_wrap(void* _closure, int a, int b) { return min(a, b); }

// start code fragment :: Definition of max ... type: ((int<4>,int<4>)->int<4>) //
int max(int a, int b) { return (((a>b))?(a):(b)); }
static int max_wrap(void* _closure, int a, int b) { return max(a, b); }

// start code fragment :: Definition of sum ... type: ((int<4>,int<4>)->int<4>) //
int sum(int a, int b) { return (a+b); }
static int sum_wrap(void* _closure, int a, int b) { return sum(a, b); }

// start code fragment :: Definition of avg ... type: ((int<4>,int<4>)->int<4>) //
int avg(int a, int b) { return (sum(a, b)/2); }
static int avg_wrap(void* _closure, int a, int b) { return avg(a, b); }

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of f ... type: ((ref<array<int<4>,1>>,int<4>)->int<4>) //
int f(int* v, int size) { for(int var_24 = 0; var_24 < size; var_24 += 1)  { printf("%d,", ((v[((unsigned int)(var_24))]))); }; }
static int f_wrap(void* _closure, int* v, int size) { return f(v, size); }

// start code fragment :: vector_type_declaration of __insieme_type_3 <=> vector<int<4>,3> //
typedef struct ___insieme_type_3 { 
    int data[3];
} __insieme_type_3;

// A constructor initializing a vector of the type __insieme_type_3 uniformly
static inline __insieme_type_3 __insieme_type_3_init_uniform(int value) {
	__insieme_type_3 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of f2 ... type: ((ref<array<vector<((int<4>,int<4>)->int<4>),4>,1>>)->int<4>) //
int f2(__insieme_type_1* fun) { return __insieme_funType_2_call(((((fun[0])).data[((unsigned int)(1))])), 1, 2); }
static int f2_wrap(void* _closure, __insieme_type_1* fun) { return f2(fun); }

// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	__insieme_type_1 funcs = ((__insieme_type_1){{(__insieme_funType_2*)__insieme_funType_2_ctr((__insieme_funType_2*)alloca(sizeof(__insieme_funType_2)),&min_wrap), (__insieme_funType_2*)__insieme_funType_2_ctr((__insieme_funType_2*)alloca(sizeof(__insieme_funType_2)),&max_wrap), (__insieme_funType_2*)__insieme_funType_2_ctr((__insieme_funType_2*)alloca(sizeof(__insieme_funType_2)),&sum_wrap), (__insieme_funType_2*)__insieme_funType_2_ctr((__insieme_funType_2*)alloca(sizeof(__insieme_funType_2)),&avg_wrap)}});
	for(int var_32 = 0; var_32 < 4; var_32 += 1)  { printf("Applying func: %d\n", __insieme_funType_2_call((((funcs).data[((unsigned int)(var_32))])), 10, 20)); };
	f(((((__insieme_type_3){{2, 3, 4}})).data), 3);
	if((!(2!=0))){};
	__insieme_type_1 list = ((__insieme_type_1){{(__insieme_funType_2*)__insieme_funType_2_ctr((__insieme_funType_2*)alloca(sizeof(__insieme_funType_2)),&min_wrap), (__insieme_funType_2*)__insieme_funType_2_ctr((__insieme_funType_2*)alloca(sizeof(__insieme_funType_2)),&max_wrap), (__insieme_funType_2*)__insieme_funType_2_ctr((__insieme_funType_2*)alloca(sizeof(__insieme_funType_2)),&sum_wrap), (__insieme_funType_2*)__insieme_funType_2_ctr((__insieme_funType_2*)alloca(sizeof(__insieme_funType_2)),&avg_wrap)}});
	printf("Sum: %d\n", f2((&list)));
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
