digraph G {
0[shape=diamond,label="ENTRY"];
1[shape=diamond,label="EXIT"];
2[shape=box,label="[B2]\l0: bool.not(...)\lT: IF(...)\l"];
4[shape=box,label="[B4]\l0: int.ne(2, 0)\l"];
5[shape=diamond,label="ENTRY"];
6[shape=diamond,label="EXIT"];
7[shape=box,label="[B7]\l0: v22 <CTRL>\lT: FOR( ... ; v24 < v22; ...)\l"];
8[shape=box,label="[B8]\l0: v24 += 1 <LOOP_INC>\l"];
9[shape=box,label="[B9]\l0: printf(..., ...)\l"];
10[shape=box,label="[B10]\l"];
11[shape=box,label="[B11]\l0: string.as.char.pointer(\"%d,\")\l"];
12[shape=box,label="[B12]\l0: varlist.pack((( *array.ref.elem.1D(v21, CAST<uint<4>>(v24)))))\l"];
13[shape=box,label="[B13]\l0: decl int<4> v24 = 0 <LOOP_INIT>\l"];
14[shape=box,label="CALL"];
15[shape=box,label="RET"];
17[shape=box,label="[B17]\l0: ref.var(...)\l"];
18[shape=box,label="[B18]\l0: vector.to.array([2, 3, 4])\l"];
19[shape=box,label="[B19]\l0: 4 <CTRL>\lT: FOR( ... ; v42 < 4; ...)\l"];
20[shape=box,label="[B20]\l0: v42 += 1 <LOOP_INC>\l"];
21[shape=box,label="[B21]\l0: printf(..., ...)\l"];
22[shape=box,label="[B22]\l"];
23[shape=box,label="[B23]\l0: string.as.char.pointer(\"Applying func: %d\n\")\l"];
24[shape=box,label="[B24]\l0: varlist.pack(((( *vector.ref.elem(v28, CAST<uint<4>>(v42)))[0])(10, 20)))\l"];
25[shape=box,label="[B25]\l0: decl int<4> v42 = 0 <LOOP_INIT>\l"];
26[shape=box,label="[B26]\l0: decl v28 = ...\l"];
27[shape=box,label="[B27]\l0: ref.var([vector.to.array(vector.init.uniform(fun{...}, 1)), vector.to.array(vector.init.uniform(fun{...}, 1)), vector.to.array(vector.init.uniform(fun{...}, 1)), vector.to.array(vector.init.uniform(fun{...}, 1))])\l"];
2->1 [label="true"];
2->1 [label="false"];
4->2 [label="0"];
8->7 [label=""];
9->8 [label=""];
11->9 [label="0"];
10->11 [label=""];
12->9 [label="1"];
10->12 [label=""];
7->10 [label="true"];
7->6 [label="false"];
13->7 [label=""];
5->13 [label=""];
14->5 [label=""];
6->15 [label=""];
15->4 [label=""];
17->14 [label="0"];
18->17 [label="0"];
20->19 [label=""];
21->20 [label=""];
23->21 [label="0"];
22->23 [label=""];
24->21 [label="1"];
22->24 [label=""];
19->22 [label="true"];
19->18 [label="false"];
25->19 [label=""];
26->25 [label=""];
27->26 [label=""];
0->27 [label=""];
}
