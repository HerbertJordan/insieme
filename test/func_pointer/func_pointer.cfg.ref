digraph G {
0[shape=diamond,label="ENTRY"];
1[shape=diamond,label="EXIT"];
2[shape=box,label="[B2]\l0: printf(..., ...)\l"];
3[shape=box,label="[B3]\l0: decl v57 = ...\l"];
4[shape=box,label="[B4]\l0: string.as.char.pointer(\"Sum: %d\n\")\l"];
5[shape=box,label="[B5]\l0: varlist.pack((fun{...}(scalar.to.array(v57))))\l"];
6[shape=box,label="[B6]\l0: ref.var([fun{...}, fun{...}, fun{...}, fun{...}])\l"];
8[shape=box,label="[B8]\l0: bool.not(...)\lT: IF(...)\l"];
10[shape=box,label="[B10]\l0: int.ne(2, 0)\l"];
11[shape=diamond,label="ENTRY"];
12[shape=diamond,label="EXIT"];
13[shape=box,label="[B13]\l0: v22 <CTRL>\lT: FOR( ... ; v24 < v22; ...)\l"];
14[shape=box,label="[B14]\l0: v24 += 1 <LOOP_INC>\l"];
15[shape=box,label="[B15]\l0: printf(..., ...)\l"];
16[shape=box,label="[B16]\l"];
17[shape=box,label="[B17]\l0: string.as.char.pointer(\"%d,\")\l"];
18[shape=box,label="[B18]\l0: varlist.pack((( *array.ref.elem.1D(v21, CAST<uint<4>>(v24)))))\l"];
19[shape=box,label="[B19]\l0: decl int<4> v24 = 0 <LOOP_INIT>\l"];
20[shape=box,label="CALL"];
21[shape=box,label="RET"];
23[shape=box,label="[B23]\l0: ref.var(...)\l"];
24[shape=box,label="[B24]\l0: vector.to.array([2, 3, 4])\l"];
25[shape=box,label="[B25]\l0: 4 <CTRL>\lT: FOR( ... ; v56 < 4; ...)\l"];
26[shape=box,label="[B26]\l0: v56 += 1 <LOOP_INC>\l"];
27[shape=box,label="[B27]\l0: printf(..., ...)\l"];
28[shape=box,label="[B28]\l"];
29[shape=box,label="[B29]\l0: string.as.char.pointer(\"Applying func: %d\n\")\l"];
30[shape=box,label="[B30]\l0: varlist.pack((( *vector.ref.elem(v30, CAST<uint<4>>(v56)))(10, 20)))\l"];
31[shape=box,label="[B31]\l0: decl int<4> v56 = 0 <LOOP_INIT>\l"];
32[shape=box,label="[B32]\l0: decl v30 = ...\l"];
33[shape=box,label="[B33]\l0: ref.var([fun{...}, fun{...}, fun{...}, fun{...}])\l"];
2->1 [label=""];
4->2 [label="0"];
3->4 [label=""];
5->2 [label="1"];
3->5 [label=""];
6->3 [label=""];
8->6 [label="true"];
8->6 [label="false"];
10->8 [label="0"];
14->13 [label=""];
15->14 [label=""];
17->15 [label="0"];
16->17 [label=""];
18->15 [label="1"];
16->18 [label=""];
13->16 [label="true"];
13->12 [label="false"];
19->13 [label=""];
11->19 [label=""];
20->11 [label=""];
12->21 [label=""];
21->10 [label=""];
23->20 [label="0"];
24->23 [label="0"];
26->25 [label=""];
27->26 [label=""];
29->27 [label="0"];
28->29 [label=""];
30->27 [label="1"];
28->30 [label=""];
25->28 [label="true"];
25->24 [label="false"];
31->25 [label=""];
32->31 [label=""];
33->32 [label=""];
0->33 [label=""];
}
