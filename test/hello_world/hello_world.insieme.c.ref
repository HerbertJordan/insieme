// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<char,1> //
typedef struct ___insieme_type_1 { 
    char* data;
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<char,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
} __insieme_type_0;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of fun ... type: ((anyRef)->unit) //
void fun(void* x){}
static void fun_wrap(void* _closure, void* x) { fun(x); }

// start code fragment :: array type definition of __insieme_type_3 <=> array<int<4>,1> //
typedef struct ___insieme_type_3 { 
    int* data;
} __insieme_type_3;

// start code fragment :: main function //
int main(int __argc, char** __argv) {
	
	// encapsulating arguments within Insieme Types ...
	int argc = __argc;
	__insieme_type_0 argv = (__insieme_type_0){alloca(sizeof(__insieme_type_1) * argc)};
	for(int i=0; i<argc; ++i) {
		argv.data[i] = (__insieme_type_1){__argv[i]};
	}
	
	// ---- begin of actual code body ----
	{
		 { printf(((char*)((*(&((__insieme_type_1){"Hallo Insieme, \n\t\"the number %d in compilers!\""}))).data)), 1); };
		fun((void*)((int*)((*(((__insieme_type_3*)memcpy(alloca(sizeof(__insieme_type_3)), &((__insieme_type_3){0}), sizeof(__insieme_type_3))))).data)));
		return 0;
	}
	// ----  end of actual code body  ----
	
}

