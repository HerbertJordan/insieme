// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<char,1> //
typedef struct ___insieme_type_1 { 
    char* data;
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<char,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
} __insieme_type_0;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of g ... type: ((int<4>)->int<4>) //
int g(int a) { return (a-1); }
static int g_wrap(void* _closure, int a) { return g(a); }

// start code fragment :: Definition of f ... type: ((int<4>,int<4>)->int<4>) //
int f(int a, int b) { return (g((a+b))+1000); }
static int f_wrap(void* _closure, int a, int b) { return f(a, b); }

// start code fragment :: main function //
int main(int __argc, char** __argv) {
	
	// encapsulating arguments within Insieme Types ...
	int argc = __argc;
	__insieme_type_0 argv = (__insieme_type_0){alloca(sizeof(__insieme_type_1) * argc)};
	for(int i=0; i<argc; ++i) {
		argv.data[i] = (__insieme_type_1){__argv[i]};
	}
	
	// ---- begin of actual code body ----
	 { printf(((char*)((*(&((__insieme_type_1){"res=%d\n"}))).data)), f(argc, argc)); }
	// ----  end of actual code body  ----
	
}

