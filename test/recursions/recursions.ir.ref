// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v1, ref<array<array<char,1>,1>> v2){
        decl ref<int<4>> v3 =  var(10);
        printf(string.as.char.pointer("x=%d\n"), varlist.pack((v3)));
        printf(string.as.char.pointer("fac(x)=%d\n"), varlist.pack((recFun v4 {
            v4 = fun(uint<4> v5){
                if(v5>1) {
                    return v5*v4(v5-1);
                } else {
                    return 1;
                };
            };
        }(v3))));
        printf(string.as.char.pointer("fac(x+1)=%d\n"), varlist.pack((recFun v4 {
            v4 = fun(uint<4> v5){
                if(v5>1) {
                    return v5*v4(v5-1);
                } else {
                    return 1;
                };
            };
        }(v3+1))));
        printf(string.as.char.pointer("even(x)=%s\n"), varlist.pack((fun(int<4> v10){
            if(int.ne(v10, 0)) return string.as.char.pointer("true") else { };
            return string.as.char.pointer("false");
        }(recFun v6 {
            v6 = fun(uint<4> v8){
                if(v8==0) {
                    return 1;
                } else {
                    return v7(v8-1);
                };
            };
            v7 = fun(uint<4> v9){
                if(v9==0) {
                    return 0;
                } else {
                    return v6(v9-1);
                };
            };
        }(v3)))));
        printf(string.as.char.pointer("odd(x)=%s\n"), varlist.pack((fun(int<4> v10){
            if(int.ne(v10, 0)) return string.as.char.pointer("true") else { };
            return string.as.char.pointer("false");
        }(recFun v7 {
            v6 = fun(uint<4> v8){
                if(v8==0) {
                    return 1;
                } else {
                    return v7(v8-1);
                };
            };
            v7 = fun(uint<4> v9){
                if(v9==0) {
                    return 0;
                } else {
                    return v6(v9-1);
                };
            };
        }(v3)))));
        printf(string.as.char.pointer("ack(1,x)=%d\n"), varlist.pack((recFun v12 {
            v12 = fun(uint<4> v13, uint<4> v14){
                if(v13==0) return v14+1 else { };
                if(v14==0) return v12(v13-1, 1) else { };
                return v12(v13-1, v12(v13, v14-1));
            };
        }(1, v3))));
        printf(string.as.char.pointer("ack(2,x)=%d\n"), varlist.pack((recFun v12 {
            v12 = fun(uint<4> v13, uint<4> v14){
                if(v13==0) return v14+1 else { };
                if(v14==0) return v12(v13-1, 1) else { };
                return v12(v13-1, v12(v13, v14-1));
            };
        }(2, v3))));
        return 0;
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v1, ref<array<array<char,1>,1>> v2){
        decl ref<int<4>> v3 = ( var(10));
        printf(string.as.char.pointer("x=%d\n"), varlist.pack((( *v3))));
        printf(string.as.char.pointer("fac(x)=%d\n"), varlist.pack((recFun v4 {
            v4 = fun(uint<4> v5){
                if((v5>CAST<uint<4>>(1))) {
                    return (v5*v4((v5-CAST<uint<4>>(1))));
                } else {
                    return CAST<uint<4>>(1);
                };
            };
        }(CAST<uint<4>>(( *v3))))));
        printf(string.as.char.pointer("fac(x+1)=%d\n"), varlist.pack((recFun v4 {
            v4 = fun(uint<4> v5){
                if((v5>CAST<uint<4>>(1))) {
                    return (v5*v4((v5-CAST<uint<4>>(1))));
                } else {
                    return CAST<uint<4>>(1);
                };
            };
        }(CAST<uint<4>>((( *v3)+1))))));
        printf(string.as.char.pointer("even(x)=%s\n"), varlist.pack((fun(int<4> v10){
            if(int.ne(v10, 0)) return string.as.char.pointer("true") else { };
            return string.as.char.pointer("false");
        }(recFun v6 {
            v6 = fun(uint<4> v8){
                if((v8==CAST<uint<4>>(0))) {
                    return 1;
                } else {
                    return v7((v8-CAST<uint<4>>(1)));
                };
            };
            v7 = fun(uint<4> v9){
                if((v9==CAST<uint<4>>(0))) {
                    return 0;
                } else {
                    return v6((v9-CAST<uint<4>>(1)));
                };
            };
        }(CAST<uint<4>>(( *v3)))))));
        printf(string.as.char.pointer("odd(x)=%s\n"), varlist.pack((fun(int<4> v10){
            if(int.ne(v10, 0)) return string.as.char.pointer("true") else { };
            return string.as.char.pointer("false");
        }(recFun v7 {
            v6 = fun(uint<4> v8){
                if((v8==CAST<uint<4>>(0))) {
                    return 1;
                } else {
                    return v7((v8-CAST<uint<4>>(1)));
                };
            };
            v7 = fun(uint<4> v9){
                if((v9==CAST<uint<4>>(0))) {
                    return 0;
                } else {
                    return v6((v9-CAST<uint<4>>(1)));
                };
            };
        }(CAST<uint<4>>(( *v3)))))));
        printf(string.as.char.pointer("ack(1,x)=%d\n"), varlist.pack((recFun v12 {
            v12 = fun(uint<4> v13, uint<4> v14){
                if((v13==CAST<uint<4>>(0))) return (v14+CAST<uint<4>>(1)) else { };
                if((v14==CAST<uint<4>>(0))) return v12((v13-CAST<uint<4>>(1)), CAST<uint<4>>(1)) else { };
                return v12((v13-CAST<uint<4>>(1)), v12(v13, (v14-CAST<uint<4>>(1))));
            };
        }(CAST<uint<4>>(1), CAST<uint<4>>(( *v3))))));
        printf(string.as.char.pointer("ack(2,x)=%d\n"), varlist.pack((recFun v12 {
            v12 = fun(uint<4> v13, uint<4> v14){
                if((v13==CAST<uint<4>>(0))) return (v14+CAST<uint<4>>(1)) else { };
                if((v14==CAST<uint<4>>(0))) return v12((v13-CAST<uint<4>>(1)), CAST<uint<4>>(1)) else { };
                return v12((v13-CAST<uint<4>>(1)), v12(v13, (v14-CAST<uint<4>>(1))));
            };
        }(CAST<uint<4>>(2), CAST<uint<4>>(( *v3))))));
        return 0;
    }

