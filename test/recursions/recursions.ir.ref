// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v12, ref<array<ref<array<char,1>>,1>> v13){
        decl ref<int<4>> v14 =  var(10);
        printf(string.as.char.pointer("x=%d\n"), varlist.pack((v14)));
        printf(string.as.char.pointer("fac(x)=%d\n"), varlist.pack((recFun v1 {
            v1 = fun(uint<4> v2){
                if(v2>1) {
                    return v2*v1(v2-1);
                } else {
                    return 1;
                };
            };
        }(v14))));
        printf(string.as.char.pointer("fac(x+1)=%d\n"), varlist.pack((recFun v1 {
            v1 = fun(uint<4> v2){
                if(v2>1) {
                    return v2*v1(v2-1);
                } else {
                    return 1;
                };
            };
        }(v14+1))));
        printf(string.as.char.pointer("even(x)=%s\n"), varlist.pack((fun(int<4> v10){
            if(int.ne(v10, 0)) return string.as.char.pointer("true") else { };
            return string.as.char.pointer("false");
        }(recFun v3 {
            v3 = fun(uint<4> v5){
                if(v5==0) {
                    return 1;
                } else {
                    return v4(v5-1);
                };
            };
            v4 = fun(uint<4> v6){
                if(v6==0) {
                    return 0;
                } else {
                    return v3(v6-1);
                };
            };
        }(v14)))));
        printf(string.as.char.pointer("odd(x)=%s\n"), varlist.pack((fun(int<4> v10){
            if(int.ne(v10, 0)) return string.as.char.pointer("true") else { };
            return string.as.char.pointer("false");
        }(recFun v4 {
            v3 = fun(uint<4> v5){
                if(v5==0) {
                    return 1;
                } else {
                    return v4(v5-1);
                };
            };
            v4 = fun(uint<4> v6){
                if(v6==0) {
                    return 0;
                } else {
                    return v3(v6-1);
                };
            };
        }(v14)))));
        printf(string.as.char.pointer("ack(1,x)=%d\n"), varlist.pack((recFun v7 {
            v7 = fun(uint<4> v8, uint<4> v9){
                if(v8==0) return v9+1 else { };
                if(v9==0) return v7(v8-1, 1) else { };
                return v7(v8-1, v7(v8, v9-1));
            };
        }(1, v14))));
        printf(string.as.char.pointer("ack(2,x)=%d\n"), varlist.pack((recFun v7 {
            v7 = fun(uint<4> v8, uint<4> v9){
                if(v8==0) return v9+1 else { };
                if(v9==0) return v7(v8-1, 1) else { };
                return v7(v8-1, v7(v8, v9-1));
            };
        }(2, v14))));
        return 0;
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v12, ref<array<ref<array<char,1>>,1>> v13){
        decl ref<int<4>> v14 = ( var(10));
        printf(string.as.char.pointer("x=%d\n"), varlist.pack((( *v14))));
        printf(string.as.char.pointer("fac(x)=%d\n"), varlist.pack((recFun v1 {
            v1 = fun(uint<4> v2){
                if((v2>CAST<uint<4>>(1))) {
                    return (v2*v1((v2-CAST<uint<4>>(1))));
                } else {
                    return CAST<uint<4>>(1);
                };
            };
        }(CAST<uint<4>>(( *v14))))));
        printf(string.as.char.pointer("fac(x+1)=%d\n"), varlist.pack((recFun v1 {
            v1 = fun(uint<4> v2){
                if((v2>CAST<uint<4>>(1))) {
                    return (v2*v1((v2-CAST<uint<4>>(1))));
                } else {
                    return CAST<uint<4>>(1);
                };
            };
        }(CAST<uint<4>>((( *v14)+1))))));
        printf(string.as.char.pointer("even(x)=%s\n"), varlist.pack((fun(int<4> v10){
            if(int.ne(v10, 0)) return string.as.char.pointer("true") else { };
            return string.as.char.pointer("false");
        }(recFun v3 {
            v3 = fun(uint<4> v5){
                if((v5==CAST<uint<4>>(0))) {
                    return 1;
                } else {
                    return v4((v5-CAST<uint<4>>(1)));
                };
            };
            v4 = fun(uint<4> v6){
                if((v6==CAST<uint<4>>(0))) {
                    return 0;
                } else {
                    return v3((v6-CAST<uint<4>>(1)));
                };
            };
        }(CAST<uint<4>>(( *v14)))))));
        printf(string.as.char.pointer("odd(x)=%s\n"), varlist.pack((fun(int<4> v10){
            if(int.ne(v10, 0)) return string.as.char.pointer("true") else { };
            return string.as.char.pointer("false");
        }(recFun v4 {
            v3 = fun(uint<4> v5){
                if((v5==CAST<uint<4>>(0))) {
                    return 1;
                } else {
                    return v4((v5-CAST<uint<4>>(1)));
                };
            };
            v4 = fun(uint<4> v6){
                if((v6==CAST<uint<4>>(0))) {
                    return 0;
                } else {
                    return v3((v6-CAST<uint<4>>(1)));
                };
            };
        }(CAST<uint<4>>(( *v14)))))));
        printf(string.as.char.pointer("ack(1,x)=%d\n"), varlist.pack((recFun v7 {
            v7 = fun(uint<4> v8, uint<4> v9){
                if((v8==CAST<uint<4>>(0))) return (v9+CAST<uint<4>>(1)) else { };
                if((v9==CAST<uint<4>>(0))) return v7((v8-CAST<uint<4>>(1)), CAST<uint<4>>(1)) else { };
                return v7((v8-CAST<uint<4>>(1)), v7(v8, (v9-CAST<uint<4>>(1))));
            };
        }(CAST<uint<4>>(1), CAST<uint<4>>(( *v14))))));
        printf(string.as.char.pointer("ack(2,x)=%d\n"), varlist.pack((recFun v7 {
            v7 = fun(uint<4> v8, uint<4> v9){
                if((v8==CAST<uint<4>>(0))) return (v9+CAST<uint<4>>(1)) else { };
                if((v9==CAST<uint<4>>(0))) return v7((v8-CAST<uint<4>>(1)), CAST<uint<4>>(1)) else { };
                return v7((v8-CAST<uint<4>>(1)), v7(v8, (v9-CAST<uint<4>>(1))));
            };
        }(CAST<uint<4>>(2), CAST<uint<4>>(( *v14))))));
        return 0;
    }

