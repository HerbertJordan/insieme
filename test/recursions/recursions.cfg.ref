digraph G {
0[shape=diamond,label="ENTRY"];
1[shape=diamond,label="EXIT"];
2[shape=box,label="[B2]\l0: 0\lT: RETURN\l"];
3[shape=box,label="[B3]\l0: printf(..., ...)\l"];
4[shape=box,label="[B4]\l0: printf(..., ...)\l"];
5[shape=box,label="[B5]\l0: string.as.char.pointer(\"ack(2,x)=%d\n\")\l"];
6[shape=box,label="[B6]\l0: varlist.pack((fun{...}(CAST<uint<4>>(2), CAST<uint<4>>(( *v14)))))\l"];
7[shape=box,label="[B7]\l0: printf(..., ...)\l"];
8[shape=box,label="[B8]\l0: string.as.char.pointer(\"ack(1,x)=%d\n\")\l"];
9[shape=box,label="[B9]\l0: varlist.pack((fun{...}(CAST<uint<4>>(1), CAST<uint<4>>(( *v14)))))\l"];
10[shape=box,label="[B10]\l0: printf(..., ...)\l"];
11[shape=box,label="[B11]\l0: string.as.char.pointer(\"odd(x)=%s\n\")\l"];
12[shape=box,label="[B12]\l0: varlist.pack((fun{...}(fun{...}(CAST<uint<4>>(( *v14))))))\l"];
13[shape=box,label="[B13]\l0: printf(..., ...)\l"];
14[shape=box,label="[B14]\l0: string.as.char.pointer(\"even(x)=%s\n\")\l"];
15[shape=box,label="[B15]\l0: varlist.pack((fun{...}(fun{...}(CAST<uint<4>>(( *v14))))))\l"];
16[shape=box,label="[B16]\l0: printf(..., ...)\l"];
17[shape=box,label="[B17]\l0: string.as.char.pointer(\"fac(x+1)=%d\n\")\l"];
18[shape=box,label="[B18]\l0: varlist.pack((fun{...}(CAST<uint<4>>((( *v14)+1)))))\l"];
19[shape=box,label="[B19]\l0: printf(..., ...)\l"];
20[shape=box,label="[B20]\l0: string.as.char.pointer(\"fac(x)=%d\n\")\l"];
21[shape=box,label="[B21]\l0: varlist.pack((fun{...}(CAST<uint<4>>(( *v14)))))\l"];
22[shape=box,label="[B22]\l0: decl v14 = ...\l"];
23[shape=box,label="[B23]\l0: string.as.char.pointer(\"x=%d\n\")\l"];
24[shape=box,label="[B24]\l0: varlist.pack((( *v14)))\l"];
25[shape=box,label="[B25]\l0: ref.var(10)\l"];
2->1 [label=""];
3->2 [label=""];
5->3 [label="0"];
4->5 [label=""];
6->3 [label="1"];
4->6 [label=""];
8->4 [label="0"];
7->8 [label=""];
9->4 [label="1"];
7->9 [label=""];
11->7 [label="0"];
10->11 [label=""];
12->7 [label="1"];
10->12 [label=""];
14->10 [label="0"];
13->14 [label=""];
15->10 [label="1"];
13->15 [label=""];
17->13 [label="0"];
16->17 [label=""];
18->13 [label="1"];
16->18 [label=""];
20->16 [label="0"];
19->20 [label=""];
21->16 [label="1"];
19->21 [label=""];
23->19 [label="0"];
22->23 [label=""];
24->19 [label="1"];
22->24 [label=""];
25->22 [label=""];
0->25 [label=""];
}
