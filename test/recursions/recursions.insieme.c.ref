// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Prototype of fac ... type: ((uint<4>)->uint<4>) //
unsigned int fac(unsigned int);

// start code fragment :: Definition of fac ... type: ((uint<4>)->uint<4>) //
unsigned int fac(unsigned int x) { if((x>((unsigned int)(1)))) { return (x*fac((x-((unsigned int)(1))))); } else  { return ((unsigned int)(1)); }; }
static unsigned int fac_wrap(void* _closure, unsigned int x) { return fac(x); }

// start code fragment :: Definition of toStr ... type: ((int<4>)->ref<array<char,1>>) //
char* toStr(int value){
	if((value!=0)) { return "true"; };
	return "false";
}
static char* toStr_wrap(void* _closure, int value) { return toStr(value); }

// start code fragment :: Prototype of even ... type: ((uint<4>)->int<4>) //
int even(unsigned int);

// start code fragment :: Prototype of odd ... type: ((uint<4>)->int<4>) //
int odd(unsigned int);

// start code fragment :: Definition of even ... type: ((uint<4>)->int<4>) //
int even(unsigned int x) { if((x==((unsigned int)(0)))) { return 1; } else  { return odd((x-((unsigned int)(1)))); }; }
static int even_wrap(void* _closure, unsigned int x) { return even(x); }

// start code fragment :: Definition of odd ... type: ((uint<4>)->int<4>) //
int odd(unsigned int x) { if((x==((unsigned int)(0)))) { return 0; } else  { return even((x-((unsigned int)(1)))); }; }
static int odd_wrap(void* _closure, unsigned int x) { return odd(x); }

// start code fragment :: Prototype of ack ... type: ((uint<4>,uint<4>)->uint<4>) //
unsigned int ack(unsigned int, unsigned int);

// start code fragment :: Definition of ack ... type: ((uint<4>,uint<4>)->uint<4>) //
unsigned int ack(unsigned int n, unsigned int m){
	if((n==((unsigned int)(0)))) { return (m+((unsigned int)(1))); };
	if((m==((unsigned int)(0)))) { return ack((n-((unsigned int)(1))), ((unsigned int)(1))); };
	return ack((n-((unsigned int)(1))), ack(n, (m-((unsigned int)(1)))));
}
static unsigned int ack_wrap(void* _closure, unsigned int n, unsigned int m) { return ack(n, m); }

// start code fragment :: Definition of main ... type: ((int<4>,ref<array<ref<array<char,1>>,1>>)->int<4>) //
int main(int argc, char** argv){
	int x = 10;
	printf("x=%d\n", (x));
	printf("fac(x)=%d\n", fac(((unsigned int)((x)))));
	printf("fac(x+1)=%d\n", fac(((unsigned int)(((x)+1)))));
	printf("even(x)=%s\n", toStr(even(((unsigned int)((x))))));
	printf("odd(x)=%s\n", toStr(odd(((unsigned int)((x))))));
	printf("ack(1,x)=%d\n", ack(((unsigned int)(1)), ((unsigned int)((x)))));
	printf("ack(2,x)=%d\n", ack(((unsigned int)(2)), ((unsigned int)((x)))));
	return 0;
}
static int main_wrap(void* _closure, int argc, char** argv) { return main(argc, argv); }
