// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<real<8>,1> //
typedef struct ___insieme_type_1 { 
    double* data;
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<real<8>,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
} __insieme_type_0;

// start code fragment :: New operator for type ref<array<real<8>,1>> //
static inline __insieme_type_1* _ref_new___insieme_type_3(__insieme_type_1 value) {
    __insieme_type_1* res = malloc(sizeof(__insieme_type_1));
    *res = value;
    return res;
}


// start code fragment :: array type utils of __insieme_type_1 <=> array<real<8>,1> //
// A constructor for the array type __insieme_type_1
static inline __insieme_type_1 __insieme_type_1_ctr(unsigned s1) {
    return ((__insieme_type_1){malloc(sizeof(double)*s1)});
}

// start code fragment :: New operator for type ref<array<array<real<8>,1>,1>> //
static inline __insieme_type_0* _ref_new___insieme_type_2(__insieme_type_0 value) {
    __insieme_type_0* res = malloc(sizeof(__insieme_type_0));
    *res = value;
    return res;
}


// start code fragment :: array type utils of __insieme_type_0 <=> array<array<real<8>,1>,1> //
// A constructor for the array type __insieme_type_0
static inline __insieme_type_0 __insieme_type_0_ctr(unsigned s1) {
    return ((__insieme_type_0){malloc(sizeof(__insieme_type_1)*s1)});
}

// start code fragment :: Definition of createMatrix ... type: ((uint<4>,uint<4>)->ref<array<array<real<8>,1>,1>>) //
__insieme_type_0* createMatrix(unsigned int x, unsigned int y){
	__insieme_type_1* data = _ref_new___insieme_type_3((__insieme_type_1_ctr(((((unsigned long)((x*y)))*sizeof(double))/sizeof(double)))));
	__insieme_type_0* index = _ref_new___insieme_type_2((__insieme_type_0_ctr(((((unsigned long)(x))*sizeof(__insieme_type_1))/sizeof(__insieme_type_1)))));
	((((*index).data[((unsigned int)(0))])) = (*data));
	for(unsigned int i = ((unsigned int)(1)); i < x; i += 1)  { ((((*index).data[((unsigned int)((i)))])) = (*(&((__insieme_type_1){&((*data).data[((unsigned int)(((i)*y)))])})))); };
	return index;
}
static __insieme_type_0* createMatrix_wrap(void* _closure, unsigned int x, unsigned int y) { return createMatrix(x, y); }

// start code fragment :: struct for job __insieme_job_5 //
struct __insieme_job_5 { 
	unsigned structSize;
	unsigned min, max;
	void (*fun)(isbr_JobArgs*);
	// ---- additional captured variables -----
	__insieme_type_0* var_54;
	__insieme_type_0* var_55;
	__insieme_type_0* var_56;
};

// start code fragment :: Definitions for function type: __insieme_funType_6 //
//
// -------------------- Begin of constructs for function type (()->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_6 <-> (()->unit)
typedef struct ___insieme_funType_6 { 
    void(*call)(void*);
} __insieme_funType_6;

// Type safe function for invoking closures of type __insieme_funType_6
static inline void __insieme_funType_6_call(__insieme_funType_6* closure) {  closure->call(closure); }

// A constructor for closures wrapping pure functions of type (()->unit)
static inline __insieme_funType_6* __insieme_funType_6_ctr(__insieme_funType_6* target, void(*call)(void*)) {
	*target = (__insieme_funType_6){call};
	return target;
}
// ----------------------- end of constructs for function (()->unit)-----------------------

// start code fragment :: Definitions for function type: __insieme_funType_8 //
//
// -------------------- Begin of constructs for function type ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_8 <-> ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit)
typedef struct ___insieme_funType_8 { 
    void(*call)(void*, __insieme_type_0*, __insieme_type_0*, __insieme_type_0*);
} __insieme_funType_8;

// Type safe function for invoking closures of type __insieme_funType_8
static inline void __insieme_funType_8_call(__insieme_funType_8* closure, __insieme_type_0* p1, __insieme_type_0* p2, __insieme_type_0* p3) {  closure->call(closure, p1,p2,p3); }

// A constructor for closures wrapping pure functions of type ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit)
static inline __insieme_funType_8* __insieme_funType_8_ctr(__insieme_funType_8* target, void(*call)(void*, __insieme_type_0*, __insieme_type_0*, __insieme_type_0*)) {
	*target = (__insieme_funType_8){call};
	return target;
}
// ----------------------- end of constructs for function ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit)-----------------------

// start code fragment :: Definition of __insieme_closure_7 ... type: (()->unit) //
// -- Begin - Closure Constructs ------------------------------------------------------------
// struct definition a closure of type (()->unit)
typedef struct ___insieme_closure_7 {
    void(*call)(void*);
    __insieme_funType_8* nested;
    __insieme_type_0* c1;
    __insieme_type_0* c2;
    __insieme_type_0* c3;
} __insieme_closure_7;

static inline void __insieme_closure_7_bind(__insieme_closure_7* closure) {  closure->nested->call(closure->nested, closure->c1,closure->c2,closure->c3); }

static inline __insieme_closure_7* __insieme_closure_7_ctr(__insieme_closure_7* closure, __insieme_funType_8* nested, __insieme_type_0* c1, __insieme_type_0* c2, __insieme_type_0* c3) {
    *closure = (__insieme_closure_7){&__insieme_closure_7_bind, nested, c1, c2, c3};
    return closure;
}
// -- End - Closure Constructs --------------------------------------------------------------

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_10_fun //
struct __insieme_pfor_body_10_fun_capture {
	__insieme_type_0* var_38;
};

// start code fragment :: Definition of __insieme_supp_11 ... type: ((ref<array<array<real<8>,1>,1>>,int<4>)->unit) //
void __insieme_supp_11(__insieme_type_0* var_42, int var_41) { for(int j = 0; j < 1000; j += 1)  { ((((((*var_42).data[((unsigned int)(var_41))])).data[((unsigned int)((j)))])) = ((double)((var_41*(j))))); }; }
static void __insieme_supp_11_wrap(void* _closure, __insieme_type_0* var_42, int var_41) { __insieme_supp_11(var_42, var_41); }

// start code fragment :: function for pfor-body __insieme_pfor_body_10_fun //
void __insieme_pfor_body_10_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_0* var_57 = ((struct __insieme_pfor_body_10_fun_capture*)(range.context))->var_38;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_11(var_57, __it);
	}
	
}

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_13_fun //
struct __insieme_pfor_body_13_fun_capture {
	__insieme_type_0* var_37;
};

// start code fragment :: Definition of __insieme_supp_14 ... type: ((ref<array<array<real<8>,1>,1>>,int<4>)->unit) //
void __insieme_supp_14(__insieme_type_0* var_46, int var_45) { for(int j = 0; j < 1000; j += 1)  { ((((((*var_46).data[((unsigned int)(var_45))])).data[((unsigned int)((j)))])) = ((double)((((var_45==(j)))?(1):(0))))); }; }
static void __insieme_supp_14_wrap(void* _closure, __insieme_type_0* var_46, int var_45) { __insieme_supp_14(var_46, var_45); }

// start code fragment :: function for pfor-body __insieme_pfor_body_13_fun //
void __insieme_pfor_body_13_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_0* var_59 = ((struct __insieme_pfor_body_13_fun_capture*)(range.context))->var_37;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_14(var_59, __it);
	}
	
}

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_15_fun //
struct __insieme_pfor_body_15_fun_capture {
	__insieme_type_0* var_36;
	__insieme_type_0* var_37;
	__insieme_type_0* var_38;
};

// start code fragment :: Definition of __insieme_supp_16 ... type: ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,int<4>)->unit) //
void __insieme_supp_16(__insieme_type_0* var_52, __insieme_type_0* var_51, __insieme_type_0* var_50, int var_49) { for(int j = 0; j < 1000; j += 1) {
	double sum = ((double)(0));
	for(int k = 0; k < 1000; k += 1)  { ((sum) = ((sum)+((((((*var_50).data[((unsigned int)(var_49))])).data[((unsigned int)((k)))]))*(((((*var_51).data[((unsigned int)((k)))])).data[((unsigned int)((j)))]))))); };
	((((((*var_52).data[((unsigned int)(var_49))])).data[((unsigned int)((j)))])) = (sum));
}; }
static void __insieme_supp_16_wrap(void* _closure, __insieme_type_0* var_52, __insieme_type_0* var_51, __insieme_type_0* var_50, int var_49) { __insieme_supp_16(var_52, var_51, var_50, var_49); }

// start code fragment :: function for pfor-body __insieme_pfor_body_15_fun //
void __insieme_pfor_body_15_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_0* var_61 = ((struct __insieme_pfor_body_15_fun_capture*)(range.context))->var_36;
	__insieme_type_0* var_62 = ((struct __insieme_pfor_body_15_fun_capture*)(range.context))->var_37;
	__insieme_type_0* var_63 = ((struct __insieme_pfor_body_15_fun_capture*)(range.context))->var_38;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_16(var_61, var_62, var_63, __it);
	}
	
}

// start code fragment :: Definition of __insieme_supp_9 ... type: ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit) //
void __insieme_supp_9(__insieme_type_0* var_36, __insieme_type_0* var_37, __insieme_type_0* var_38){
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_10_fun_capture){var_38})},&__insieme_pfor_body_10_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_13_fun_capture){var_37})},&__insieme_pfor_body_13_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_15_fun_capture){var_36, var_37, var_38})},&__insieme_pfor_body_15_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
}
static void __insieme_supp_9_wrap(void* _closure, __insieme_type_0* var_36, __insieme_type_0* var_37, __insieme_type_0* var_38) { __insieme_supp_9(var_36, var_37, var_38); }

// start code fragment :: function for job __insieme_job_5 //
void fun__insieme_job_5(isbr_JobArgs* args) {
	// ----------- Unpacking local scope variables ----------
	// ---------- Unpacking auto-captured variables ---------
	__insieme_type_0* var_54 = ((struct __insieme_job_5*)args)->var_54;
	__insieme_type_0* var_55 = ((struct __insieme_job_5*)args)->var_55;
	__insieme_type_0* var_56 = ((struct __insieme_job_5*)args)->var_56;
	// ------------------ Processing Guards -----------------
	// ------------------ Default processing -----------------
	__insieme_funType_6_call((__insieme_funType_6*)__insieme_closure_7_ctr((__insieme_closure_7*)alloca(sizeof(__insieme_closure_7)),(__insieme_funType_8*)__insieme_funType_8_ctr((__insieme_funType_8*)alloca(sizeof(__insieme_funType_8)),&__insieme_supp_9_wrap), var_54, var_55, var_56));
}

// start code fragment :: array type definition of __insieme_type_18 <=> array<char,1> //
typedef struct ___insieme_type_18 { 
    char* data;
} __insieme_type_18;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: vector_type_declaration of __insieme_type_20 <=> vector<char,3> //
typedef struct ___insieme_type_20 { 
    char data[3];
} __insieme_type_20;

// A constructor initializing a vector of the type __insieme_type_20 uniformly
static inline __insieme_type_20 __insieme_type_20_init_uniform(char value) {
	__insieme_type_20 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_21 <=> vector<char,4> //
typedef struct ___insieme_type_21 { 
    char data[4];
} __insieme_type_21;

// A constructor initializing a vector of the type __insieme_type_21 uniformly
static inline __insieme_type_21 __insieme_type_21_init_uniform(char value) {
	__insieme_type_21 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of freeMatrix ... type: ((ref<array<array<real<8>,1>,1>>)->unit) //
void freeMatrix(__insieme_type_0* matrix){
	__insieme_type_0* var_33 = matrix;
	{
		free((((*(var_33)).data[((unsigned int)(0))])).data);
		;
	};
}
static void freeMatrix_wrap(void* _closure, __insieme_type_0* matrix) { freeMatrix(matrix); }

// start code fragment :: main function //
int main() {
	{
		__insieme_type_0 A = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		__insieme_type_0 B = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		__insieme_type_0 C = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		isbr_merge(isbr_parallel(memcpy(malloc(sizeof(struct __insieme_job_5)),&((struct __insieme_job_5){sizeof(struct __insieme_job_5),1,isbr_getMaxThreads(),&fun__insieme_job_5,&C,&B,&A}),sizeof(struct __insieme_job_5))));
		int success = 1;
		for(int i = 0; i < 1000; i += 1) {
			for(int j = 0; j < (((1000<1000))?(1000):(1000)); j += 1)  { if(((((((A).data[((unsigned int)((i)))])).data[((unsigned int)((j)))]))!=(((((C).data[((unsigned int)((i)))])).data[((unsigned int)((j)))])))) { ((success) = 0); }; };
			for(int j = (((1000<1000))?(1000):(1000)); j < (((1000>1000))?(1000):(1000)); j += 1)  { if(((((((C).data[((unsigned int)((i)))])).data[((unsigned int)((j)))]))!=((double)(0)))) { ((success) = 0); }; };
		};
		printf(((char*)((*(&((__insieme_type_18){"Verification: %s\n"}))).data)), (((((success)!=0))?((((__insieme_type_18){(((__insieme_type_20){{'O', 'K', '\0'}})).data}))):((((__insieme_type_18){(((__insieme_type_21){{'E', 'R', 'R', '\0'}})).data}))))).data);
		freeMatrix(&A);
		freeMatrix(&B);
		freeMatrix(&C);
	}
}
