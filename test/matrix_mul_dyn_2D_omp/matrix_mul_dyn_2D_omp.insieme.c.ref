// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<real<8>,1> //
typedef struct ___insieme_type_1 { 
    double* data;
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<real<8>,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
} __insieme_type_0;

// start code fragment :: New operator for type ref<array<real<8>,1>> //
static inline __insieme_type_1* _ref_new___insieme_type_3(__insieme_type_1 value) {
    __insieme_type_1* res = malloc(sizeof(__insieme_type_1));
    *res = value;
    return res;
}


// start code fragment :: array type utils of __insieme_type_1 <=> array<real<8>,1> //
// A constructor for the array type __insieme_type_1
static inline __insieme_type_1 __insieme_type_1_ctr(unsigned s1) {
    return ((__insieme_type_1){malloc(sizeof(double)*s1)});
}

// start code fragment :: New operator for type ref<array<array<real<8>,1>,1>> //
static inline __insieme_type_0* _ref_new___insieme_type_2(__insieme_type_0 value) {
    __insieme_type_0* res = malloc(sizeof(__insieme_type_0));
    *res = value;
    return res;
}


// start code fragment :: array type utils of __insieme_type_0 <=> array<array<real<8>,1>,1> //
// A constructor for the array type __insieme_type_0
static inline __insieme_type_0 __insieme_type_0_ctr(unsigned s1) {
    return ((__insieme_type_0){malloc(sizeof(__insieme_type_1)*s1)});
}

// start code fragment :: Definition of createMatrix ... type: ((uint<4>,uint<4>)->ref<array<array<real<8>,1>,1>>) //
__insieme_type_0* createMatrix(unsigned int x, unsigned int y){
	__insieme_type_1* data = _ref_new___insieme_type_3((__insieme_type_1_ctr(((((unsigned long)((x*y)))*sizeof(double))/sizeof(double)))));
	__insieme_type_0* index = _ref_new___insieme_type_2((__insieme_type_0_ctr(((((unsigned long)(x))*sizeof(__insieme_type_1))/sizeof(__insieme_type_1)))));
	((((*index).data[((unsigned int)(0))])) = (*data));
	for(unsigned int var_6 = ((unsigned int)(1)); var_6 < x; var_6 += 1)  { ((((*index).data[((unsigned int)(var_6))])) = (*(&((__insieme_type_1){&((*data).data[((unsigned int)((var_6*y)))])})))); };
	return index;
}
static __insieme_type_0* createMatrix_wrap(void* _closure, unsigned int x, unsigned int y) { return createMatrix(x, y); }

// start code fragment :: struct for job __insieme_job_4 //
struct __insieme_job_4 { 
	unsigned structSize;
	unsigned min, max;
	void (*fun)(isbr_JobArgs*);
	// ---- additional captured variables -----
	__insieme_type_0* var_65;
	__insieme_type_0* var_66;
	__insieme_type_0* var_67;
};

// start code fragment :: Definitions for function type: __insieme_funType_5 //
//
// -------------------- Begin of constructs for function type (()->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_5 <-> (()->unit)
typedef struct ___insieme_funType_5 { 
    void(*call)(void*);
} __insieme_funType_5;

// Type safe function for invoking closures of type __insieme_funType_5
static inline void __insieme_funType_5_call(__insieme_funType_5* closure) {  closure->call(closure); }

// A constructor for closures wrapping pure functions of type (()->unit)
static inline __insieme_funType_5* __insieme_funType_5_ctr(__insieme_funType_5* target, void(*call)(void*)) {
	*target = (__insieme_funType_5){call};
	return target;
}
// ----------------------- end of constructs for function (()->unit)-----------------------

// start code fragment :: Definitions for function type: __insieme_funType_7 //
//
// -------------------- Begin of constructs for function type ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit)---------------------
// Base-struct of describing closures of type __insieme_funType_7 <-> ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit)
typedef struct ___insieme_funType_7 { 
    void(*call)(void*, __insieme_type_0*, __insieme_type_0*, __insieme_type_0*);
} __insieme_funType_7;

// Type safe function for invoking closures of type __insieme_funType_7
static inline void __insieme_funType_7_call(__insieme_funType_7* closure, __insieme_type_0* p1, __insieme_type_0* p2, __insieme_type_0* p3) {  closure->call(closure, p1,p2,p3); }

// A constructor for closures wrapping pure functions of type ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit)
static inline __insieme_funType_7* __insieme_funType_7_ctr(__insieme_funType_7* target, void(*call)(void*, __insieme_type_0*, __insieme_type_0*, __insieme_type_0*)) {
	*target = (__insieme_funType_7){call};
	return target;
}
// ----------------------- end of constructs for function ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit)-----------------------

// start code fragment :: Definition of __insieme_closure_6 ... type: (()->unit) //
// -- Begin - Closure Constructs ------------------------------------------------------------
// struct definition a closure of type (()->unit)
typedef struct ___insieme_closure_6 {
    void(*call)(void*);
    __insieme_funType_7* nested;
    __insieme_type_0* c1;
    __insieme_type_0* c2;
    __insieme_type_0* c3;
} __insieme_closure_6;

static inline void __insieme_closure_6_bind(__insieme_closure_6* closure) {  closure->nested->call(closure->nested, closure->c1,closure->c2,closure->c3); }

static inline __insieme_closure_6* __insieme_closure_6_ctr(__insieme_closure_6* closure, __insieme_funType_7* nested, __insieme_type_0* c1, __insieme_type_0* c2, __insieme_type_0* c3) {
    *closure = (__insieme_closure_6){&__insieme_closure_6_bind, nested, c1, c2, c3};
    return closure;
}
// -- End - Closure Constructs --------------------------------------------------------------

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_9_fun //
struct __insieme_pfor_body_9_fun_capture {
	__insieme_type_0* var_49;
};

// start code fragment :: Definition of __insieme_supp_10 ... type: ((ref<array<array<real<8>,1>,1>>,int<4>)->unit) //
void __insieme_supp_10(__insieme_type_0* var_53, int var_52) { for(int var_16 = 0; var_16 < 1000; var_16 += 1)  { ((((((*var_53).data[((unsigned int)(var_52))])).data[((unsigned int)(var_16))])) = ((double)((var_52*var_16)))); }; }
static void __insieme_supp_10_wrap(void* _closure, __insieme_type_0* var_53, int var_52) { __insieme_supp_10(var_53, var_52); }

// start code fragment :: function for pfor-body __insieme_pfor_body_9_fun //
void __insieme_pfor_body_9_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_0* var_68 = ((struct __insieme_pfor_body_9_fun_capture*)(range.context))->var_49;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_10(var_68, __it);
	}
	
}

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_11_fun //
struct __insieme_pfor_body_11_fun_capture {
	__insieme_type_0* var_48;
};

// start code fragment :: Definition of __insieme_supp_12 ... type: ((ref<array<array<real<8>,1>,1>>,int<4>)->unit) //
void __insieme_supp_12(__insieme_type_0* var_57, int var_56) { for(int var_22 = 0; var_22 < 1000; var_22 += 1)  { ((((((*var_57).data[((unsigned int)(var_56))])).data[((unsigned int)(var_22))])) = ((double)((((var_56==var_22))?(1):(0))))); }; }
static void __insieme_supp_12_wrap(void* _closure, __insieme_type_0* var_57, int var_56) { __insieme_supp_12(var_57, var_56); }

// start code fragment :: function for pfor-body __insieme_pfor_body_11_fun //
void __insieme_pfor_body_11_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_0* var_70 = ((struct __insieme_pfor_body_11_fun_capture*)(range.context))->var_48;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_12(var_70, __it);
	}
	
}

// start code fragment :: capture-struct for pfor-body __insieme_pfor_body_13_fun //
struct __insieme_pfor_body_13_fun_capture {
	__insieme_type_0* var_49;
	__insieme_type_0* var_47;
	__insieme_type_0* var_48;
};

// start code fragment :: Definition of __insieme_supp_14 ... type: ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,int<4>)->unit) //
void __insieme_supp_14(__insieme_type_0* var_61, __insieme_type_0* var_63, __insieme_type_0* var_62, int var_60) { for(int var_29 = 0; var_29 < 1000; var_29 += 1) {
	double sum = ((double)(0));
	for(int var_28 = 0; var_28 < 1000; var_28 += 1)  { ((sum) = ((sum)+((((((*var_61).data[((unsigned int)(var_60))])).data[((unsigned int)(var_28))]))*(((((*var_62).data[((unsigned int)(var_28))])).data[((unsigned int)(var_29))]))))); };
	((((((*var_63).data[((unsigned int)(var_60))])).data[((unsigned int)(var_29))])) = (sum));
}; }
static void __insieme_supp_14_wrap(void* _closure, __insieme_type_0* var_61, __insieme_type_0* var_63, __insieme_type_0* var_62, int var_60) { __insieme_supp_14(var_61, var_63, var_62, var_60); }

// start code fragment :: function for pfor-body __insieme_pfor_body_13_fun //
void __insieme_pfor_body_13_fun(const isbr_PForRange range) {
	// ----- captured variables -----
	__insieme_type_0* var_72 = ((struct __insieme_pfor_body_13_fun_capture*)(range.context))->var_49;
	__insieme_type_0* var_73 = ((struct __insieme_pfor_body_13_fun_capture*)(range.context))->var_47;
	__insieme_type_0* var_74 = ((struct __insieme_pfor_body_13_fun_capture*)(range.context))->var_48;
	
	// ----- process iterations -----
	for(int __it = range.start; __it<range.end; __it+=range.step) {
		__insieme_supp_14(var_72, var_73, var_74, __it);
	}
	
}

// start code fragment :: Definition of __insieme_supp_8 ... type: ((ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>,ref<array<array<real<8>,1>,1>>)->unit) //
void __insieme_supp_8(__insieme_type_0* var_49, __insieme_type_0* var_48, __insieme_type_0* var_47){
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_9_fun_capture){var_49})},&__insieme_pfor_body_9_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_11_fun_capture){var_48})},&__insieme_pfor_body_11_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
	{
		isbr_pfor(isbr_getThreadGroup(0),(isbr_PForRange){0, 1000, 1, &((struct __insieme_pfor_body_13_fun_capture){var_49, var_47, var_48})},&__insieme_pfor_body_13_fun);
		isbr_barrier(isbr_getThreadGroup(0));
	};
}
static void __insieme_supp_8_wrap(void* _closure, __insieme_type_0* var_49, __insieme_type_0* var_48, __insieme_type_0* var_47) { __insieme_supp_8(var_49, var_48, var_47); }

// start code fragment :: function for job __insieme_job_4 //
void fun__insieme_job_4(isbr_JobArgs* args) {
	// ----------- Unpacking local scope variables ----------
	// ---------- Unpacking auto-captured variables ---------
	__insieme_type_0* var_65 = ((struct __insieme_job_4*)args)->var_65;
	__insieme_type_0* var_66 = ((struct __insieme_job_4*)args)->var_66;
	__insieme_type_0* var_67 = ((struct __insieme_job_4*)args)->var_67;
	// ------------------ Processing Guards -----------------
	// ------------------ Default processing -----------------
	__insieme_funType_5_call((__insieme_funType_5*)__insieme_closure_6_ctr((__insieme_closure_6*)alloca(sizeof(__insieme_closure_6)),(__insieme_funType_7*)__insieme_funType_7_ctr((__insieme_funType_7*)alloca(sizeof(__insieme_funType_7)),&__insieme_supp_8_wrap), var_65, var_66, var_67));
}

// start code fragment :: array type definition of __insieme_type_17 <=> array<char,1> //
typedef struct ___insieme_type_17 { 
    char* data;
} __insieme_type_17;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: vector_type_declaration of __insieme_type_19 <=> vector<char,3> //
typedef struct ___insieme_type_19 { 
    char data[3];
} __insieme_type_19;

// A constructor initializing a vector of the type __insieme_type_19 uniformly
static inline __insieme_type_19 __insieme_type_19_init_uniform(char value) {
	__insieme_type_19 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_20 <=> vector<char,4> //
typedef struct ___insieme_type_20 { 
    char data[4];
} __insieme_type_20;

// A constructor initializing a vector of the type __insieme_type_20 uniformly
static inline __insieme_type_20 __insieme_type_20_init_uniform(char value) {
	__insieme_type_20 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of freeMatrix ... type: ((ref<array<array<real<8>,1>,1>>)->unit) //
void freeMatrix(__insieme_type_0* matrix){
	__insieme_type_0* var_9 = matrix;
	{
		free((((*(var_9)).data[((unsigned int)(0))])).data);
		;
	};
}
static void freeMatrix_wrap(void* _closure, __insieme_type_0* matrix) { freeMatrix(matrix); }

// start code fragment :: main function //
int main() {
	{
		__insieme_type_0 A = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		__insieme_type_0 B = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		__insieme_type_0 C = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		isbr_merge(isbr_parallel(memcpy(malloc(sizeof(struct __insieme_job_4)),&((struct __insieme_job_4){sizeof(struct __insieme_job_4),1,isbr_getMaxThreads(),&fun__insieme_job_4,&A,&B,&C}),sizeof(struct __insieme_job_4))));
		int success = 1;
		for(int var_43 = 0; var_43 < 1000; var_43 += 1) {
			for(int var_36 = 0; var_36 < (((1000<1000))?(1000):(1000)); var_36 += 1)  { if(((((((A).data[((unsigned int)(var_43))])).data[((unsigned int)(var_36))]))!=(((((C).data[((unsigned int)(var_43))])).data[((unsigned int)(var_36))])))) { ((success) = 0); }; };
			for(int var_42 = (((1000<1000))?(1000):(1000)); var_42 < (((1000>1000))?(1000):(1000)); var_42 += 1)  { if(((((((C).data[((unsigned int)(var_43))])).data[((unsigned int)(var_42))]))!=((double)(0)))) { ((success) = 0); }; };
		};
		printf(((char*)((*(&((__insieme_type_17){"Verification: %s\n"}))).data)), (((((success)!=0))?((((__insieme_type_17){(((__insieme_type_19){{'O', 'K', '\0'}})).data}))):((((__insieme_type_17){(((__insieme_type_20){{'E', 'R', 'R', '\0'}})).data}))))).data);
		freeMatrix(&A);
		freeMatrix(&B);
		freeMatrix(&C);
	};
}
