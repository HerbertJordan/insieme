// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: vector_type_declaration of __insieme_type_4 <=> vector<real<8>,2> //
typedef struct ___insieme_type_4 { 
    double data[2];
} __insieme_type_4;

// A constructor initializing a vector of the type __insieme_type_4 uniformly
static inline __insieme_type_4 __insieme_type_4_init_uniform(double value) {
	__insieme_type_4 res;
	for (int i=0; i<2;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: type_declaration_Source //
struct Source { 
    int type;
    __insieme_type_4 pos;
    double mult;
    double size;
};

// start code fragment :: vector_type_declaration of __insieme_type_3 <=> vector<struct<type:int<4>,pos:vector<real<8>,2>,mult:real<8>,size:real<8>>,4> //
typedef struct ___insieme_type_3 { 
    struct Source data[4];
} __insieme_type_3;

// A constructor initializing a vector of the type __insieme_type_3 uniformly
static inline __insieme_type_3 __insieme_type_3_init_uniform(struct Source value) {
	__insieme_type_3 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: array type definition of __insieme_type_7 <=> array<uint<4>,1> //
typedef struct ___insieme_type_7 { 
    unsigned int* data;
} __insieme_type_7;

// start code fragment :: array type definition of __insieme_type_6 <=> array<array<uint<4>,1>,1> //
typedef struct ___insieme_type_6 { 
    __insieme_type_7* data;
} __insieme_type_6;

// start code fragment :: type_declaration_Image //
struct Image { 
    __insieme_type_6 data;
    int x;
    int y;
};

// start code fragment :: New operator for type ref<array<uint<4>,1>> //
static inline __insieme_type_7* _ref_new___insieme_type_9(__insieme_type_7 value) {
    __insieme_type_7* res = malloc(sizeof(__insieme_type_7));
    *res = value;
    return res;
}


// start code fragment :: array type utils of __insieme_type_7 <=> array<uint<4>,1> //
// A constructor for the array type __insieme_type_7
static inline __insieme_type_7 __insieme_type_7_ctr(unsigned s1) {
    return ((__insieme_type_7){malloc(sizeof(unsigned int)*s1)});
}

// start code fragment :: New operator for type ref<array<array<uint<4>,1>,1>> //
static inline __insieme_type_6* _ref_new___insieme_type_10(__insieme_type_6 value) {
    __insieme_type_6* res = malloc(sizeof(__insieme_type_6));
    *res = value;
    return res;
}


// start code fragment :: array type utils of __insieme_type_6 <=> array<array<uint<4>,1>,1> //
// A constructor for the array type __insieme_type_6
static inline __insieme_type_6 __insieme_type_6_ctr(unsigned s1) {
    return ((__insieme_type_6){malloc(sizeof(__insieme_type_7)*s1)});
}

// start code fragment :: Definition of create_image ... type: ((int<4>,int<4>)->struct<data:array<array<uint<4>,1>,1>,x:int<4>,y:int<4>>) //
struct Image create_image(int x, int y){
	__insieme_type_7* block = _ref_new___insieme_type_9((__insieme_type_7_ctr((((sizeof(unsigned int)*((unsigned long)(x)))*((unsigned long)(y)))/sizeof(unsigned int)))));
	__insieme_type_6* index = _ref_new___insieme_type_10((__insieme_type_6_ctr(((sizeof(__insieme_type_7)*((unsigned long)(x)))/sizeof(__insieme_type_7)))));
	for(int var_6 = 0; var_6 < x; var_6 += 1)  { ((((*index).data[((unsigned int)(var_6))])) = (*(&((__insieme_type_7){&((*block).data[((unsigned int)((var_6*x)))])})))); };
	return ((struct Image){(*index),
		x,
		y
	});
}
static struct Image create_image_wrap(void* _closure, int x, int y) { return create_image(x, y); }

// start code fragment :: type_declaration_Trace //
struct Trace { 
    unsigned int target;
    unsigned int numSteps;
};

// start code fragment :: array type definition of __insieme_type_12 <=> array<struct<type:int<4>,pos:vector<real<8>,2>,mult:real<8>,size:real<8>>,1> //
typedef struct ___insieme_type_12 { 
    struct Source* data;
} __insieme_type_12;

// start code fragment :: Prototype for external function: sqrt ... type: ((real<8>)->real<8>) //
double sqrt(double);
static double sqrt_wrap(void* _closure, double var_76) { return sqrt(var_76); }

// start code fragment :: Definition of __insieme_supp_15 ... type: ((ref<vector<real<8>,2>>,ref<vector<real<8>,2>>)->unit) //
void __insieme_supp_15(__insieme_type_4* var_45, __insieme_type_4* var_46){
	((((*var_46).data[((unsigned int)(0))])) = (((*var_45).data[((unsigned int)(0))])));
	((((*var_46).data[((unsigned int)(1))])) = (((*var_45).data[((unsigned int)(1))])));
}
static void __insieme_supp_15_wrap(void* _closure, __insieme_type_4* var_45, __insieme_type_4* var_46) { __insieme_supp_15(var_45, var_46); }

// start code fragment :: Definition of __insieme_supp_16 ... type: ((ref<vector<real<8>,2>>,ref<vector<real<8>,2>>)->unit) //
void __insieme_supp_16(__insieme_type_4* var_48, __insieme_type_4* var_49){
	((((*var_48).data[((unsigned int)(0))])) = (((*var_49).data[((unsigned int)(0))])));
	((((*var_48).data[((unsigned int)(1))])) = (((*var_49).data[((unsigned int)(1))])));
}
static void __insieme_supp_16_wrap(void* _closure, __insieme_type_4* var_48, __insieme_type_4* var_49) { __insieme_supp_16(var_48, var_49); }

// start code fragment :: Definition of getTarget ... type: ((real<8>,real<8>,ref<array<struct<type:int<4>,pos:vector<real<8>,2>,mult:real<8>,size:real<8>>,1>>,uint<4>,real<8>,real<8>,real<8>,uint<4>,uint<4>,real<8>)->struct<target:uint<4>,numSteps:uint<4>>) //
struct Trace getTarget(double i, double j, __insieme_type_12* sources, unsigned int num_sources, double dt, double friction, double height, unsigned int min_steps, unsigned int max_steps, double abortVelocity){
	__insieme_type_4 pos = ((__insieme_type_4){{i, j}});
	__insieme_type_4 vel = ((__insieme_type_4){{((double)(0)), ((double)(0))}});
	__insieme_type_4 acc = ((__insieme_type_4){{((double)(0)), ((double)(0))}});
	__insieme_type_4 acc_new = ((__insieme_type_4){{((double)(0)), ((double)(0))}});
	__insieme_type_4 acc_old = ((__insieme_type_4){{((double)(0)), ((double)(0))}});
	double sqrt_dt = sqrt(dt);
	for(unsigned int var_51 = ((unsigned int)(0)); var_51 < max_steps; var_51 += 1) {
		((((pos).data[((unsigned int)(0))])) = ((((pos).data[((unsigned int)(0))]))+(((((vel).data[((unsigned int)(0))]))*dt)+((sqrt_dt)*(((2.0/3.0)*(((acc).data[((unsigned int)(0))])))-((1.0/6.0)*(((acc_old).data[((unsigned int)(0))]))))))));
		((((pos).data[((unsigned int)(1))])) = ((((pos).data[((unsigned int)(1))]))+(((((vel).data[((unsigned int)(1))]))*dt)+((sqrt_dt)*(((2.0/3.0)*(((acc).data[((unsigned int)(1))])))-((1.0/6.0)*(((acc_old).data[((unsigned int)(1))]))))))));
		((((acc_new).data[((unsigned int)(0))])) = ((double)(0)));
		((((acc_new).data[((unsigned int)(1))])) = ((double)(0)));
		for(unsigned int var_44 = ((unsigned int)(0)); var_44 < num_sources; var_44 += 1) {
			__insieme_type_12 cur = *(&((__insieme_type_12){&((*sources).data[((unsigned int)(var_44))])}));
			__insieme_type_4 r = ((__insieme_type_4){{((((pos).data[((unsigned int)(0))]))-(((*(&((((cur).data[0])).pos))).data[((unsigned int)(0))]))), ((((pos).data[((unsigned int)(1))]))-(((*(&((((cur).data[0])).pos))).data[((unsigned int)(1))])))}});
			if(((*(&((((cur).data[0])).type)))==((int)(((unsigned int)(0)))))){
				((((acc_new).data[((unsigned int)(0))])) = ((((acc_new).data[((unsigned int)(0))]))-((*(&((((cur).data[0])).mult)))*(((r).data[((unsigned int)(0))])))));
				((((acc_new).data[((unsigned int)(1))])) = ((((acc_new).data[((unsigned int)(1))]))-((*(&((((cur).data[0])).mult)))*(((r).data[((unsigned int)(1))])))));
			} else {
				double dist = sqrt((((((((pos).data[((unsigned int)(0))]))-(((*(&((((cur).data[0])).pos))).data[((unsigned int)(0))])))*((((pos).data[((unsigned int)(0))]))-(((*(&((((cur).data[0])).pos))).data[((unsigned int)(0))]))))+(((((pos).data[((unsigned int)(1))]))-(((*(&((((cur).data[0])).pos))).data[((unsigned int)(1))])))*((((pos).data[((unsigned int)(1))]))-(((*(&((((cur).data[0])).pos))).data[((unsigned int)(1))])))))+(height*height)));
				((((acc_new).data[((unsigned int)(0))])) = ((((acc_new).data[((unsigned int)(0))]))-(((*(&((((cur).data[0])).mult)))/(((dist)*(dist))*(dist)))*(((r).data[((unsigned int)(0))])))));
				((((acc_new).data[((unsigned int)(1))])) = ((((acc_new).data[((unsigned int)(1))]))-(((*(&((((cur).data[0])).mult)))/(((dist)*(dist))*(dist)))*(((r).data[((unsigned int)(1))])))));
			};
			if((((var_51>min_steps)&&(sqrt((((((r).data[((unsigned int)(0))]))*(((r).data[((unsigned int)(0))])))+((((r).data[((unsigned int)(1))]))*(((r).data[((unsigned int)(1))])))))<(*(&((((cur).data[0])).size)))))&&(sqrt((((((vel).data[((unsigned int)(0))]))*(((vel).data[((unsigned int)(0))])))+((((vel).data[((unsigned int)(1))]))*(((vel).data[((unsigned int)(1))])))))<abortVelocity))) { return ((struct Trace){var_44,
				var_51
			}); };
		};
		((((acc_new).data[((unsigned int)(0))])) = ((((acc_new).data[((unsigned int)(0))]))-((((vel).data[((unsigned int)(0))]))*friction)));
		((((acc_new).data[((unsigned int)(1))])) = ((((acc_new).data[((unsigned int)(1))]))-((((vel).data[((unsigned int)(1))]))*friction)));
		((((vel).data[((unsigned int)(0))])) = ((((vel).data[((unsigned int)(0))]))+(dt*((((1.0/3.0)*(((acc_new).data[((unsigned int)(0))])))+((5.0/6.0)*(((acc).data[((unsigned int)(0))]))))-((1.0/6.0)*(((acc_old).data[((unsigned int)(0))])))))));
		((((vel).data[((unsigned int)(1))])) = ((((vel).data[((unsigned int)(1))]))+(dt*((((1.0/3.0)*(((acc_new).data[((unsigned int)(1))])))+((5.0/6.0)*(((acc).data[((unsigned int)(1))]))))-((1.0/6.0)*(((acc_old).data[((unsigned int)(1))])))))));
		__insieme_supp_15(&acc, &acc_old);
		__insieme_supp_16(&acc, &acc_new);
	};
	return ((struct Trace){(num_sources+((unsigned int)(1))),
		max_steps
	});
}
static struct Trace getTarget_wrap(void* _closure, double i, double j, __insieme_type_12* sources, unsigned int num_sources, double dt, double friction, double height, unsigned int min_steps, unsigned int max_steps, double abortVelocity) { return getTarget(i, j, sources, num_sources, dt, friction, height, min_steps, max_steps, abortVelocity); }

// start code fragment :: array type definition of __insieme_type_17 <=> array<char,1> //
typedef struct ___insieme_type_17 { 
    char* data;
} __insieme_type_17;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of print_target_image_ASCII ... type: ((struct<data:array<array<uint<4>,1>,1>,x:int<4>,y:int<4>>)->unit) //
void print_target_image_ASCII(struct Image image) { for(int var_15 = 0; var_15 < (image.x); var_15 += 1) {
	for(int var_14 = 0; var_14 < (image.y); var_14 += 1)  { {
		int var_13 = ((int)((image.data).data[((unsigned int)(var_15))].data[((unsigned int)(var_14))]));
		switch(var_13) {
		case ((unsigned int)(0)):
			printf(((char*)((*(&((__insieme_type_17){" "}))).data)), 0); break;
		case ((unsigned int)(1)):
			printf(((char*)((*(&((__insieme_type_17){"A"}))).data)), 0); break;
		case ((unsigned int)(2)):
			printf(((char*)((*(&((__insieme_type_17){"B"}))).data)), 0); break;
		case ((unsigned int)(3)):
			printf(((char*)((*(&((__insieme_type_17){"C"}))).data)), 0); break;
		case ((unsigned int)(4)):
			printf(((char*)((*(&((__insieme_type_17){"X"}))).data)), 0); break;
		};
	}; };
	printf(((char*)((*(&((__insieme_type_17){"\n"}))).data)), 0);
}; }
static void print_target_image_ASCII_wrap(void* _closure, struct Image image) { print_target_image_ASCII(image); }

// start code fragment :: array type definition of __insieme_type_19 <=> array<struct<data:array<array<uint<4>,1>,1>,x:int<4>,y:int<4>>,1> //
typedef struct ___insieme_type_19 { 
    struct Image* data;
} __insieme_type_19;

// start code fragment :: Definition of delete_image ... type: ((ref<array<struct<data:array<array<uint<4>,1>,1>,x:int<4>,y:int<4>>,1>>)->unit) //
void delete_image(__insieme_type_19* image){
	free((((*(&((((*image).data[0])).data))).data[((unsigned int)(0))])).data);
	free((*(&((((*image).data[0])).data))).data);
}
static void delete_image_wrap(void* _closure, __insieme_type_19* image) { delete_image(image); }

// start code fragment :: main function //
int main() {
	{
		int x = 12;
		int y = 12;
		((x) = ((int)(((y) = 60))));
		double scale = ((double)(800));
		double magSize = 0.02;
		double magPower = 0.08;
		unsigned int num_sources = ((unsigned int)(4));
		__insieme_type_3 sources = ((__insieme_type_3){{((struct Source){0,
			((__insieme_type_4){{((double)(0)), ((double)(0))}}),
			0.01,
			(magSize)
		}), ((struct Source){1,
			((__insieme_type_4){{((double)(1)), ((double)(0))}}),
			(magPower),
			(magSize)
		}), ((struct Source){1,
			((__insieme_type_4){{(((double)(0))-0.5), 0.866025404}}),
			(magPower),
			(magSize)
		}), ((struct Source){1,
			((__insieme_type_4){{(((double)(0))-0.5), (((double)(0))-0.866025404)}}),
			(magPower),
			(magSize)
		})}});
		double dt = 0.01;
		double friction = 0.01;
		double height = 0.3;
		unsigned int min_steps = ((unsigned int)(400));
		unsigned int max_steps = ((unsigned int)(100000));
		double abortVelocity = 0.01;
		struct Image image = create_image((x), (y));
		struct Image dist = create_image((x), (y));
		for(int var_74 = 0; var_74 < (x); var_74 += 1)  { for(int var_73 = 0; var_73 < (y); var_73 += 1) {
			double curX = (((((double)(0))-1.0)+((((double)(var_74))/((double)(((x)-1))))*2.0))*(scale));
			double curY = (((((double)(0))-1.0)+((((double)(var_73))/((double)(((y)-1))))*2.0))*(scale));
			struct Trace res = getTarget((curX), (curY), (&((__insieme_type_12){(sources).data})), (num_sources), (dt), (friction), (height), (min_steps), (max_steps), (abortVelocity));
			((((((*(&((image).data))).data[((unsigned int)(var_74))])).data[((unsigned int)(var_73))])) = (*(&((res).target))));
			((((((*(&((dist).data))).data[((unsigned int)(var_74))])).data[((unsigned int)(var_73))])) = (*(&((res).numSteps))));
		}; };
		print_target_image_ASCII((image));
		delete_image((&((__insieme_type_19){&image})));
		delete_image((&((__insieme_type_19){&dist})));
	};
}
