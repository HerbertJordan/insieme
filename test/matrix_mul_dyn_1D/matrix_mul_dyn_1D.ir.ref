// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<ref<array<real<8>,1>>> v7 =  var(fun(uint<4> v1, uint<4> v2){
            return  new(array.create.1D(type<real<8>>, v1*v2*sizeof(type<real<8>>)/sizeof(type<real<8>>)));
        }(1000, 1000));
        decl ref<ref<array<real<8>,1>>> v8 =  var(fun(uint<4> v1, uint<4> v2){
            return  new(array.create.1D(type<real<8>>, v1*v2*sizeof(type<real<8>>)/sizeof(type<real<8>>)));
        }(1000, 1000));
        decl ref<ref<array<real<8>,1>>> v9 =  var(fun(uint<4> v1, uint<4> v2){
            return  new(array.create.1D(type<real<8>>, v1*v2*sizeof(type<real<8>>)/sizeof(type<real<8>>)));
        }(1000, 1000));
        {
            for(decl int<4> v13 = 0 .. 1000 : 1) {
                for(decl int<4> v12 = 0 .. 1000 : 1) {
                    array.ref.elem.1D(v7, v13*1000+v12) := v13*v12;
                };
            };
            for(decl int<4> v21 = 0 .. 1000 : 1) {
                for(decl int<4> v20 = 0 .. 1000 : 1) {
                    array.ref.elem.1D(v8, v21*1000+v20) := ite(v21==v20, bind(){fun()return 1()}, bind(){fun()return 0()});
                };
            };
            for(decl int<4> v28 = 0 .. 1000 : 1) {
                for(decl int<4> v27 = 0 .. 1000 : 1) {
                    decl ref<real<8>> v22 =  var(0);
                    for(decl int<4> v26 = 0 .. 1000 : 1) {
                        v22 := v22+array.ref.elem.1D(v7, v28*1000+v26)*array.ref.elem.1D(v8, v26*1000+v27);
                    };
                    array.ref.elem.1D(v9, v28*1000+v27) := v22;
                };
            };
        };
        decl ref<int<4>> v29 =  var(1);
        for(decl int<4> v41 = 0 .. 1000 : 1) {
            for(decl int<4> v34 = 0 .. ite(1000<1000, bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(array.ref.elem.1D(v7, v41*1000+v34), array.ref.elem.1D(v9, v41*1000+v34))) {
                    v29 := 0;
                } else { };
            };
            for(decl int<4> v40 = ite(1000<1000, bind(){fun()return 1000()}, bind(){fun()return 1000()}) .. ite(1000>1000, bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(array.ref.elem.1D(v9, v41*1000+v40), 0)) {
                    v29 := 0;
                } else { };
            };
        };
        printf(string.as.char.pointer("Verification: %s\n"), varlist.pack((ite(int.ne(v29, 0), bind(){fun()return vector.to.array(['O', 'K', '\0'])()}, bind(){fun()return vector.to.array(['E', 'R', 'R', '\0'])()}))));
        fun(ref<array<real<8>,1>> v4){
            decl ref<ref<array<real<8>,1>>> v5 =  var(v4);
            {
                 del(v5);
            };
        }(v7);
        fun(ref<array<real<8>,1>> v4){
            decl ref<ref<array<real<8>,1>>> v5 =  var(v4);
            {
                 del(v5);
            };
        }(v8);
        fun(ref<array<real<8>,1>> v4){
            decl ref<ref<array<real<8>,1>>> v5 =  var(v4);
            {
                 del(v5);
            };
        }(v9);
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(){
        decl ref<ref<array<real<8>,1>>> v7 = ( var(fun(uint<4> v1, uint<4> v2){
            return ( new(array.create.1D(type<real<8>>, ((CAST<uint<8>>((v1*v2))*sizeof(type<real<8>>))/sizeof(type<real<8>>)))));
        }(CAST<uint<4>>(1000), CAST<uint<4>>(1000))));
        decl ref<ref<array<real<8>,1>>> v8 = ( var(fun(uint<4> v1, uint<4> v2){
            return ( new(array.create.1D(type<real<8>>, ((CAST<uint<8>>((v1*v2))*sizeof(type<real<8>>))/sizeof(type<real<8>>)))));
        }(CAST<uint<4>>(1000), CAST<uint<4>>(1000))));
        decl ref<ref<array<real<8>,1>>> v9 = ( var(fun(uint<4> v1, uint<4> v2){
            return ( new(array.create.1D(type<real<8>>, ((CAST<uint<8>>((v1*v2))*sizeof(type<real<8>>))/sizeof(type<real<8>>)))));
        }(CAST<uint<4>>(1000), CAST<uint<4>>(1000))));
        <m id=4>{
            <m id=1>for(decl int<4> v13 = 0 .. 1000 : 1) {
                for(decl int<4> v12 = 0 .. 1000 : 1) {
                    (array.ref.elem.1D(( *v7), CAST<uint<4>>(((v13*1000)+v12))) := CAST<real<8>>((v13*v12)));
                };
            }</m>;
            <m id=2>for(decl int<4> v21 = 0 .. 1000 : 1) {
                for(decl int<4> v20 = 0 .. 1000 : 1) {
                    (array.ref.elem.1D(( *v8), CAST<uint<4>>(((v21*1000)+v20))) := CAST<real<8>>(ite((v21==v20), bind(){fun()return 1()}, bind(){fun()return 0()})));
                };
            }</m>;
            <m id=3>for(decl int<4> v28 = 0 .. 1000 : 1) {
                for(decl int<4> v27 = 0 .. 1000 : 1) {
                    decl ref<real<8>> v22 = ( var(CAST<real<8>>(0)));
                    for(decl int<4> v26 = 0 .. 1000 : 1) {
                        (v22 := (( *v22)+(( *array.ref.elem.1D(( *v7), CAST<uint<4>>(((v28*1000)+v26))))*( *array.ref.elem.1D(( *v8), CAST<uint<4>>(((v26*1000)+v27)))))));
                    };
                    (array.ref.elem.1D(( *v9), CAST<uint<4>>(((v28*1000)+v27))) := ( *v22));
                };
            }</m>;
        }</m>;
        decl ref<int<4>> v29 = ( var(1));
        for(decl int<4> v41 = 0 .. 1000 : 1) {
            for(decl int<4> v34 = 0 .. ite((1000<1000), bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(( *array.ref.elem.1D(( *v7), CAST<uint<4>>(((v41*1000)+v34)))), ( *array.ref.elem.1D(( *v9), CAST<uint<4>>(((v41*1000)+v34)))))) {
                    (v29 := 0);
                } else { };
            };
            for(decl int<4> v40 = ite((1000<1000), bind(){fun()return 1000()}, bind(){fun()return 1000()}) .. ite((1000>1000), bind(){fun()return 1000()}, bind(){fun()return 1000()}) : 1) {
                if(real.ne(( *array.ref.elem.1D(( *v9), CAST<uint<4>>(((v41*1000)+v40)))), CAST<real<8>>(0))) {
                    (v29 := 0);
                } else { };
            };
        };
        printf(string.as.char.pointer("Verification: %s\n"), varlist.pack((ite(int.ne(( *v29), 0), bind(){fun()return vector.to.array(['O', 'K', '\0'])()}, bind(){fun()return vector.to.array(['E', 'R', 'R', '\0'])()}))));
        fun(ref<array<real<8>,1>> v4){
            decl ref<ref<array<real<8>,1>>> v5 = ( var(v4));
            {
                ( del(v5));
            };
        }(( *v7));
        fun(ref<array<real<8>,1>> v4){
            decl ref<ref<array<real<8>,1>>> v5 = ( var(v4));
            {
                ( del(v5));
            };
        }(( *v8));
        fun(ref<array<real<8>,1>> v4){
            decl ref<ref<array<real<8>,1>>> v5 = ( var(v4));
            {
                ( del(v5));
            };
        }(( *v9));
    }

