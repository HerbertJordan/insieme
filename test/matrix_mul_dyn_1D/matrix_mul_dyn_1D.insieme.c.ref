// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_0 <=> array<real<8>,1> //
typedef struct ___insieme_type_0 { 
    double* data;
} __insieme_type_0;

// start code fragment :: New operator for type ref<array<real<8>,1>> //
static inline __insieme_type_0* _ref_new___insieme_type_1(__insieme_type_0 value) {
    __insieme_type_0* res = malloc(sizeof(__insieme_type_0));
    *res = value;
    return res;
}


// start code fragment :: array type utils of __insieme_type_0 <=> array<real<8>,1> //
// A constructor for the array type __insieme_type_0
static inline __insieme_type_0 __insieme_type_0_ctr(unsigned s1) {
    return ((__insieme_type_0){malloc(sizeof(double)*s1)});
}

// start code fragment :: Definition of createMatrix ... type: ((uint<4>,uint<4>)->ref<array<real<8>,1>>) //
__insieme_type_0* createMatrix(unsigned int x, unsigned int y) { return _ref_new___insieme_type_1((__insieme_type_0_ctr(((((unsigned long)((x*y)))*sizeof(double))/sizeof(double))))); }
static __insieme_type_0* createMatrix_wrap(void* _closure, unsigned int x, unsigned int y) { return createMatrix(x, y); }

// start code fragment :: array type definition of __insieme_type_4 <=> array<char,1> //
typedef struct ___insieme_type_4 { 
    char* data;
} __insieme_type_4;

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: vector_type_declaration of __insieme_type_6 <=> vector<char,3> //
typedef struct ___insieme_type_6 { 
    char data[3];
} __insieme_type_6;

// A constructor initializing a vector of the type __insieme_type_6 uniformly
static inline __insieme_type_6 __insieme_type_6_init_uniform(char value) {
	__insieme_type_6 res;
	for (int i=0; i<3;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_7 <=> vector<char,4> //
typedef struct ___insieme_type_7 { 
    char data[4];
} __insieme_type_7;

// A constructor initializing a vector of the type __insieme_type_7 uniformly
static inline __insieme_type_7 __insieme_type_7_init_uniform(char value) {
	__insieme_type_7 res;
	for (int i=0; i<4;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of freeMatrix ... type: ((ref<array<real<8>,1>>)->unit) //
void freeMatrix(__insieme_type_0* matrix){
	__insieme_type_0* var_40 = matrix;
	 { ; };
}
static void freeMatrix_wrap(void* _closure, __insieme_type_0* matrix) { freeMatrix(matrix); }

// start code fragment :: main function //
int main() {
	{
		__insieme_type_0 A = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		__insieme_type_0 B = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		__insieme_type_0 C = *createMatrix(((unsigned int)(1000)), ((unsigned int)(1000)));
		{
			for(int var_10 = 0; var_10 < 1000; var_10 += 1)  { for(int var_9 = 0; var_9 < 1000; var_9 += 1)  { ((((A).data[((unsigned int)(((var_10*1000)+var_9)))])) = ((double)((var_10*var_9)))); }; };
			for(int var_16 = 0; var_16 < 1000; var_16 += 1)  { for(int var_15 = 0; var_15 < 1000; var_15 += 1)  { ((((B).data[((unsigned int)(((var_16*1000)+var_15)))])) = ((double)((((var_16==var_15))?(1):(0))))); }; };
			for(int var_23 = 0; var_23 < 1000; var_23 += 1)  { for(int var_22 = 0; var_22 < 1000; var_22 += 1) {
				double sum = ((double)(0));
				for(int var_21 = 0; var_21 < 1000; var_21 += 1)  { ((sum) = ((sum)+((((A).data[((unsigned int)(((var_23*1000)+var_21)))]))*(((B).data[((unsigned int)(((var_21*1000)+var_22)))]))))); };
				((((C).data[((unsigned int)(((var_23*1000)+var_22)))])) = (sum));
			}; };
		};
		int success = 1;
		for(int var_36 = 0; var_36 < 1000; var_36 += 1) {
			for(int var_29 = 0; var_29 < (((1000<1000))?(1000):(1000)); var_29 += 1)  { if(((((A).data[((unsigned int)(((var_36*1000)+var_29)))]))!=(((C).data[((unsigned int)(((var_36*1000)+var_29)))])))) { ((success) = 0); }; };
			for(int var_35 = (((1000<1000))?(1000):(1000)); var_35 < (((1000>1000))?(1000):(1000)); var_35 += 1)  { if(((((C).data[((unsigned int)(((var_36*1000)+var_35)))]))!=((double)(0)))) { ((success) = 0); }; };
		};
		printf(((char*)((*(&((__insieme_type_4){"Verification: %s\n"}))).data)), (((((success)!=0))?((((__insieme_type_4){(((__insieme_type_6){{'O', 'K', '\0'}})).data}))):((((__insieme_type_4){(((__insieme_type_7){{'E', 'R', 'R', '\0'}})).data}))))).data);
		freeMatrix(&A);
		freeMatrix(&B);
		freeMatrix(&C);
	};
}
