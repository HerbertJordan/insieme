// --- Generated Inspire Code ---
#include <alloca.h>
#include <stddef.h>
#include <stdlib.h>
#include <runtime.h>
#define bool int
#define true 1
#define false 0
#define null 0

// start code fragment :: array type definition of __insieme_type_1 <=> array<char,1> //
typedef struct ___insieme_type_1 { 
    char* data;
} __insieme_type_1;

// start code fragment :: array type definition of __insieme_type_0 <=> array<array<char,1>,1> //
typedef struct ___insieme_type_0 { 
    __insieme_type_1* data;
} __insieme_type_0;

// start code fragment :: vector_type_declaration of __insieme_type_2 <=> vector<real<8>,64> //
typedef struct ___insieme_type_2 { 
    double data[64];
} __insieme_type_2;

// A constructor initializing a vector of the type __insieme_type_2 uniformly
static inline __insieme_type_2 __insieme_type_2_init_uniform(double value) {
	__insieme_type_2 res;
	for (int i=0; i<64;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: vector_type_declaration of __insieme_type_3 <=> vector<int<4>,5> //
typedef struct ___insieme_type_3 { 
    int data[5];
} __insieme_type_3;

// A constructor initializing a vector of the type __insieme_type_3 uniformly
static inline __insieme_type_3 __insieme_type_3_init_uniform(int value) {
	__insieme_type_3 res;
	for (int i=0; i<5;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: array type definition of __insieme_type_4 <=> array<int<4>,1> //
typedef struct ___insieme_type_4 { 
    int* data;
} __insieme_type_4;

// start code fragment :: vector_type_declaration of __insieme_type_5 <=> vector<int<4>,1048576> //
typedef struct ___insieme_type_5 { 
    int data[1048576];
} __insieme_type_5;

// A constructor initializing a vector of the type __insieme_type_5 uniformly
static inline __insieme_type_5 __insieme_type_5_init_uniform(int value) {
	__insieme_type_5 res;
	for (int i=0; i<1048576;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: type_declaration___insieme_globals //
struct __insieme_globals { 
    __insieme_type_2 start;
    __insieme_type_2 elapsed;
    int sec;
    __insieme_type_3 B_test_index_array;
    __insieme_type_3 B_test_rank_array;
    __insieme_type_3 C_test_index_array;
    __insieme_type_3 C_test_rank_array;
    int KS;
    double R23;
    double R46;
    __insieme_type_4 key_buff_ptr_global;
    int passed_verification;
    __insieme_type_5 key_array;
    __insieme_type_5 key_buff1;
    __insieme_type_5 key_buff2;
    __insieme_type_3 partial_verify_vals;
    __insieme_type_3 test_index_array;
    __insieme_type_3 test_rank_array;
    __insieme_type_3 S_test_index_array;
    __insieme_type_3 S_test_rank_array;
    __insieme_type_3 W_test_index_array;
    __insieme_type_3 W_test_rank_array;
    __insieme_type_3 A_test_index_array;
    __insieme_type_3 A_test_rank_array;
    double T23;
    double T46;
};

// start code fragment :: global data //
struct __insieme_globals __GLOBAL__;

// start code fragment :: vector_type_declaration of __insieme_type_6 <=> vector<int<4>,1> //
typedef struct ___insieme_type_6 { 
    int data[1];
} __insieme_type_6;

// A constructor initializing a vector of the type __insieme_type_6 uniformly
static inline __insieme_type_6 __insieme_type_6_init_uniform(int value) {
	__insieme_type_6 res;
	for (int i=0; i<1;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Prototype for external function: ceil ... type: ((real<8>)->real<8>) //
double ceil(double);
static double ceil_wrap(void* _closure, double var_139) { return ceil(var_139); }

// start code fragment :: Prototype for external function: printf ... type: ((ref<array<char,1>>,var_list)->int<4>) //
int printf(char*, ...);

// start code fragment :: Definition of __insieme_supp_10 ... type: ((int<4>)->unit) //
void __insieme_supp_10(int n) { ((((*(&((__GLOBAL__).elapsed))).data[((unsigned int)(n))])) = 0.0); }
static void __insieme_supp_10_wrap(void* _closure, int n) { __insieme_supp_10(n); }

// start code fragment :: array type definition of __insieme_type_13 <=> array<real<8>,1> //
typedef struct ___insieme_type_13 { 
    double* data;
} __insieme_type_13;

// start code fragment :: Definition of __insieme_supp_12 ... type: ((ref<array<real<8>,1>>,ref<array<real<8>,1>>)->real<8>) //
double __insieme_supp_12(__insieme_type_13* X, __insieme_type_13* A){
	double T1 = 0.0;
	double T2 = 0.0;
	double T3 = 0.0;
	double T4 = 0.0;
	double A1 = 0.0;
	double A2 = 0.0;
	double X1 = 0.0;
	double X2 = 0.0;
	double Z = 0.0;
	int i = 0;
	int j = 0;
	if(((*(&((__GLOBAL__).KS)))==0)){
		((*(&((__GLOBAL__).R23))) = 1.0);
		((*(&((__GLOBAL__).R46))) = 1.0);
		((*(&((__GLOBAL__).T23))) = 1.0);
		((*(&((__GLOBAL__).T46))) = 1.0);
		{
			for(int var_38 = 1; var_38 < (23+1); var_38 += 1) {
				((*(&((__GLOBAL__).R23))) = (0.50*(*(&((__GLOBAL__).R23)))));
				((*(&((__GLOBAL__).T23))) = (2.0*(*(&((__GLOBAL__).T23)))));
			};
			((i) = (1+(((int)(ceil((((double)(((23+1)-1)))/((double)(1))))))*1)));
		};
		{
			for(int var_39 = 1; var_39 < (46+1); var_39 += 1) {
				((*(&((__GLOBAL__).R46))) = (0.50*(*(&((__GLOBAL__).R46)))));
				((*(&((__GLOBAL__).T46))) = (2.0*(*(&((__GLOBAL__).T46)))));
			};
			((i) = (1+(((int)(ceil((((double)(((46+1)-1)))/((double)(1))))))*1)));
		};
		((*(&((__GLOBAL__).KS))) = 1);
	};
	((T1) = ((*(&((__GLOBAL__).R23)))*(((*A).data[0]))));
	((j) = ((int)(T1)));
	((A1) = ((double)((j))));
	((A2) = ((((*A).data[0]))-((*(&((__GLOBAL__).T23)))*(A1))));
	((T1) = ((*(&((__GLOBAL__).R23)))*(((*X).data[0]))));
	((j) = ((int)(T1)));
	((X1) = ((double)((j))));
	((X2) = ((((*X).data[0]))-((*(&((__GLOBAL__).T23)))*(X1))));
	((T1) = (((A1)*(X2))+((A2)*(X1))));
	((j) = ((int)(((*(&((__GLOBAL__).R23)))*(T1)))));
	((T2) = ((double)((j))));
	((Z) = ((T1)-((*(&((__GLOBAL__).T23)))*(T2))));
	((T3) = (((*(&((__GLOBAL__).T23)))*(Z))+((A2)*(X2))));
	((j) = ((int)(((*(&((__GLOBAL__).R46)))*(T3)))));
	((T4) = ((double)((j))));
	((((*X).data[0])) = ((T3)-((*(&((__GLOBAL__).T46)))*(T4))));
	return ((*(&((__GLOBAL__).R46)))*(((*X).data[0])));
}
static double __insieme_supp_12_wrap(void* _closure, __insieme_type_13* X, __insieme_type_13* A) { return __insieme_supp_12(X, A); }

// start code fragment :: Definition of __insieme_supp_11 ... type: ((real<8>,real<8>)->unit) //
void __insieme_supp_11(double seed, double a){
	double var_22 = seed;
	double var_23 = a;
	{
		double x = 0.0;
		int i = 0;
		int j = 0;
		int k = 0;
		((k) = ((1<<16)/4));
		{
			for(int var_41 = 0; var_41 < (1<<20); var_41 += 1) {
				((x) = __insieme_supp_12((&((__insieme_type_13){&var_22})), (&((__insieme_type_13){&var_23}))));
				((x) = ((x)+__insieme_supp_12((&((__insieme_type_13){&var_22})), (&((__insieme_type_13){&var_23})))));
				((x) = ((x)+__insieme_supp_12((&((__insieme_type_13){&var_22})), (&((__insieme_type_13){&var_23})))));
				((x) = ((x)+__insieme_supp_12((&((__insieme_type_13){&var_22})), (&((__insieme_type_13){&var_23})))));
				((((*(&((__GLOBAL__).key_array))).data[((unsigned int)((var_41)))])) = ((int)((((double)((k)))*(x)))));
			};
			((i) = (0+(((int)(ceil((((double)(((1<<20)-0)))/((double)(1))))))*1)));
		};
	};
}
static void __insieme_supp_11_wrap(void* _closure, double seed, double a) { __insieme_supp_11(seed, a); }

// start code fragment :: vector_type_declaration of __insieme_type_16 <=> vector<int<4>,65536> //
typedef struct ___insieme_type_16 { 
    int data[65536];
} __insieme_type_16;

// A constructor initializing a vector of the type __insieme_type_16 uniformly
static inline __insieme_type_16 __insieme_type_16_init_uniform(int value) {
	__insieme_type_16 res;
	for (int i=0; i<65536;++i) {
	    res.data[i] = value;
	}
	return res;
}


// start code fragment :: Definition of __insieme_supp_15 ... type: ((int<4>)->unit) //
void __insieme_supp_15(int iteration){
	int i = 0;
	int j = 0;
	int k = 0;
	int l = 0;
	int m = 0;
	int shift = (16-10);
	int key = 0;
	int min_key_val = 0;
	int max_key_val = 0;
	__insieme_type_16 prv_buff1;
	{
		((((*(&((__GLOBAL__).key_array))).data[((unsigned int)(iteration))])) = iteration);
		((((*(&((__GLOBAL__).key_array))).data[((unsigned int)((iteration+10)))])) = ((1<<16)-iteration));
		{
			for(int var_55 = 0; var_55 < 5; var_55 += 1)  { ((((*(&((__GLOBAL__).partial_verify_vals))).data[((unsigned int)((var_55)))])) = (((*(&((__GLOBAL__).key_array))).data[((unsigned int)((((*(&((__GLOBAL__).test_index_array))).data[((unsigned int)((var_55)))]))))]))); };
			((i) = (0+(((int)(ceil((((double)((5-0)))/((double)(1))))))*1)));
		};
		{
			for(int var_56 = 0; var_56 < (1<<16); var_56 += 1)  { ((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)((var_56)))])) = 0); };
			((i) = (0+(((int)(ceil((((double)(((1<<16)-0)))/((double)(1))))))*1)));
		};
	};
	{
		for(int var_57 = 0; var_57 < (1<<16); var_57 += 1)  { ((((prv_buff1).data[((unsigned int)((var_57)))])) = 0); };
		((i) = (0+(((int)(ceil((((double)(((1<<16)-0)))/((double)(1))))))*1)));
	};
	{
		for(int var_58 = 0; var_58 < (1<<20); var_58 += 1) {
			((((*(&((__GLOBAL__).key_buff2))).data[((unsigned int)((var_58)))])) = (((*(&((__GLOBAL__).key_array))).data[((unsigned int)((var_58)))])));
			((((prv_buff1).data[((unsigned int)((((*(&((__GLOBAL__).key_buff2))).data[((unsigned int)((var_58)))]))))]))++);
		};
		((i) = (0+(((int)(ceil((((double)(((1<<20)-0)))/((double)(1))))))*1)));
	};
	{
		for(int var_59 = 0; var_59 < ((1<<16)-1); var_59 += 1)  { ((((prv_buff1).data[((unsigned int)(((var_59)+1)))])) = ((((prv_buff1).data[((unsigned int)(((var_59)+1)))]))+(((prv_buff1).data[((unsigned int)((var_59)))])))); };
		((i) = (0+(((int)(ceil((((double)((((1<<16)-1)-0)))/((double)(1))))))*1)));
	};
	 { {
		for(int var_60 = 0; var_60 < (1<<16); var_60 += 1)  { ((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)((var_60)))])) = ((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)((var_60)))]))+(((prv_buff1).data[((unsigned int)((var_60)))])))); };
		((i) = (0+(((int)(ceil((((double)(((1<<16)-0)))/((double)(1))))))*1)));
	}; };
	{
		{
			for(int var_68 = 0; var_68 < 5; var_68 += 1) {
				((k) = (((*(&((__GLOBAL__).partial_verify_vals))).data[((unsigned int)((var_68)))])));
				if(((0<=(k))&&((k)<=((1<<20)-1)))){
					int var_61 = ((int)('W'));
					switch(var_61) {
					case 'S':
						if(((var_68)<=2)) { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))+iteration))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; } else  { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))-iteration))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; }; break;
					case 'W':
						if(((var_68)<2)) { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))+(iteration-2)))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; } else  { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))-iteration))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; }; break;
					case 'A':
						if(((var_68)<=2)) { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))+(iteration-1)))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; } else  { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))-(iteration-1)))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; }; break;
					case 'B':
						if(((((var_68)==1)||((var_68)==2))||((var_68)==4))) { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))+iteration))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; } else  { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))-iteration))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; }; break;
					case 'C':
						if(((var_68)<=2)) { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))+iteration))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; } else  { if(((((*(&((__GLOBAL__).key_buff1))).data[((unsigned int)(((k)-1)))]))!=((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_68)))]))-iteration))) { printf(((char*)((*(&((__insieme_type_1){"Failed partial verification: iteration %d, test key %d\n"}))).data)), iteration, (var_68)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); }; }; break;
					};
				};
			};
			((i) = (0+(((int)(ceil((((double)((5-0)))/((double)(1))))))*1)));
		};
		if((iteration==10)) { ((*(&((__GLOBAL__).key_buff_ptr_global))) = (((__insieme_type_4){((*(&((__GLOBAL__).key_buff1)))).data}))); };
	};
}
static void __insieme_supp_15_wrap(void* _closure, int iteration) { __insieme_supp_15(iteration); }

// start code fragment :: type_declaration_timeval //
struct timeval { 
    long tv_sec;
    long tv_usec;
};

// start code fragment :: array type definition of __insieme_type_22 <=> array<struct<tv_sec:int<8>,tv_usec:int<8>>,1> //
typedef struct ___insieme_type_22 { 
    struct timeval* data;
} __insieme_type_22;

// start code fragment :: type_declaration_timezone //
struct timezone { 
    int tz_minuteswest;
    int tz_dsttime;
};

// start code fragment :: array type definition of __timezone_ptr_t <=> array<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>,1> //
typedef struct ___timezone_ptr_t { 
    struct timezone* data;
} __timezone_ptr_t;

// start code fragment :: Prototype for external function: gettimeofday ... type: ((ref<array<struct<tv_sec:int<8>,tv_usec:int<8>>,1>>,ref<array<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>,1>>)->int<4>) //
int gettimeofday(struct timeval*, struct timezone*);
static int gettimeofday_wrap(void* _closure, __insieme_type_22* var_140, __timezone_ptr_t* var_141) { return gettimeofday(((struct timeval*)((*(var_140)).data)), ((struct timezone*)((*(var_141)).data))); }

// start code fragment :: Definition of __insieme_supp_20 ... type: ((ref<array<real<8>,1>>)->unit) //
void __insieme_supp_20(__insieme_type_13* t){
	struct timeval tv;
	gettimeofday(((struct timeval*)((*((&((__insieme_type_22){&tv})))).data)), ((struct timezone*)((*(((__timezone_ptr_t*)memcpy(alloca(sizeof(__timezone_ptr_t)), &((__timezone_ptr_t){0}), sizeof(__timezone_ptr_t))))).data)));
	if(((*(&((__GLOBAL__).sec)))<0)) { ((*(&((__GLOBAL__).sec))) = ((int)((*(&((tv).tv_sec)))))); };
	((((*t).data[0])) = (((double)(((*(&((tv).tv_sec)))-((long)((*(&((__GLOBAL__).sec))))))))+(1.0e-6*((double)((*(&((tv).tv_usec))))))));
}
static void __insieme_supp_20_wrap(void* _closure, __insieme_type_13* t) { __insieme_supp_20(t); }

// start code fragment :: Definition of __insieme_supp_19 ... type: (()->real<8>) //
double __insieme_supp_19(){
	double t = 0.0;
	__insieme_supp_20((&((__insieme_type_13){&t})));
	return (t);
}
static double __insieme_supp_19_wrap(void* _closure) { return __insieme_supp_19(); }

// start code fragment :: Definition of __insieme_supp_18 ... type: ((int<4>)->unit) //
void __insieme_supp_18(int n) { ((((*(&((__GLOBAL__).start))).data[((unsigned int)(n))])) = __insieme_supp_19()); }
static void __insieme_supp_18_wrap(void* _closure, int n) { __insieme_supp_18(n); }

// start code fragment :: Definition of __insieme_supp_26 ... type: (()->real<8>) //
double __insieme_supp_26(){
	double t = 0.0;
	__insieme_supp_20((&((__insieme_type_13){&t})));
	return (t);
}
static double __insieme_supp_26_wrap(void* _closure) { return __insieme_supp_26(); }

// start code fragment :: Definition of __insieme_supp_25 ... type: ((int<4>)->unit) //
void __insieme_supp_25(int n){
	double t = 0.0;
	double now = 0.0;
	((now) = __insieme_supp_26());
	((t) = ((now)-(((*(&((__GLOBAL__).start))).data[((unsigned int)(n))]))));
	((((*(&((__GLOBAL__).elapsed))).data[((unsigned int)(n))])) = ((((*(&((__GLOBAL__).elapsed))).data[((unsigned int)(n))]))+(t)));
}
static void __insieme_supp_25_wrap(void* _closure, int n) { __insieme_supp_25(n); }

// start code fragment :: Definition of __insieme_supp_27 ... type: ((int<4>)->real<8>) //
double __insieme_supp_27(int n) { return (((*(&((__GLOBAL__).elapsed))).data[((unsigned int)(n))])); }
static double __insieme_supp_27_wrap(void* _closure, int n) { return __insieme_supp_27(n); }

// start code fragment :: Definition of __insieme_supp_28 ... type: (()->unit) //
void __insieme_supp_28(){
	int i = 0;
	int j = 0;
	int k = 0;
	int m = 0;
	int unique_keys = 0;
	{
		for(int var_95 = 0; var_95 < (1<<20); var_95 += 1)  { ((((*(&((__GLOBAL__).key_array))).data[((unsigned int)((--(((*(&((__GLOBAL__).key_buff_ptr_global))).data[((unsigned int)((((*(&((__GLOBAL__).key_buff2))).data[((unsigned int)((var_95)))]))))])))))])) = (((*(&((__GLOBAL__).key_buff2))).data[((unsigned int)((var_95)))]))); };
		((i) = (0+(((int)(ceil((((double)(((1<<20)-0)))/((double)(1))))))*1)));
	};
	((j) = 0);
	{
		for(int var_96 = 1; var_96 < (1<<20); var_96 += 1)  { if(((((*(&((__GLOBAL__).key_array))).data[((unsigned int)(((var_96)-1)))]))>(((*(&((__GLOBAL__).key_array))).data[((unsigned int)((var_96)))])))) { ((j)++); }; };
		((i) = (1+(((int)(ceil((((double)(((1<<20)-1)))/((double)(1))))))*1)));
	};
	if(((j)!=0)) { printf(((char*)((*(&((__insieme_type_1){"Full_verify: number of keys out of sort: %d\n"}))).data)), (j)); } else  { ((*(&((__GLOBAL__).passed_verification)))++); };
}
static void __insieme_supp_28_wrap(void* _closure) { __insieme_supp_28(); }

// start code fragment :: Definition of c_print_results ... type: ((ref<array<char,1>>,char,int<4>,int<4>,int<4>,int<4>,int<4>,real<8>,real<8>,ref<array<char,1>>,int<4>,ref<array<char,1>>,ref<array<char,1>>,ref<array<char,1>>,ref<array<char,1>>,ref<array<char,1>>,ref<array<char,1>>,ref<array<char,1>>,ref<array<char,1>>,ref<array<char,1>>)->unit) //
void c_print_results(__insieme_type_1* name, char class, int n1, int n2, int n3, int niter, int nthreads, double t, double mops, __insieme_type_1* optype, int passed_verification, __insieme_type_1* npbversion, __insieme_type_1* compiletime, __insieme_type_1* cc, __insieme_type_1* clink, __insieme_type_1* c_lib, __insieme_type_1* c_inc, __insieme_type_1* cflags, __insieme_type_1* clinkflags, __insieme_type_1* rand){
	__insieme_type_1 evalue = ((__insieme_type_1){"1000"});
	printf(((char*)((*(&((__insieme_type_1){"\n\n %s Benchmark Completed\n"}))).data)), ((char*)((*(name)).data)));
	printf(((char*)((*(&((__insieme_type_1){" Class           =                        %c\n"}))).data)), ((int)(class)));
	if(((n2==0)&&(n3==0))) { printf(((char*)((*(&((__insieme_type_1){" Size            =             %12d\n"}))).data)), n1); } else  { printf(((char*)((*(&((__insieme_type_1){" Size            =              %3dx%3dx%3d\n"}))).data)), n1, n2, n3); };
	printf(((char*)((*(&((__insieme_type_1){" Iterations      =             %12d\n"}))).data)), niter);
	printf(((char*)((*(&((__insieme_type_1){" Threads         =             %12d\n"}))).data)), nthreads);
	printf(((char*)((*(&((__insieme_type_1){" Time in seconds =             %12.2f\n"}))).data)), 0.0);
	printf(((char*)((*(&((__insieme_type_1){" Mop/s total     =             %12.2f\n"}))).data)), 0.0);
	printf(((char*)((*(&((__insieme_type_1){" Operation type  = %24s\n"}))).data)), ((char*)((*(optype)).data)));
	if((passed_verification!=0)) { printf(((char*)((*(&((__insieme_type_1){" Verification    =               SUCCESSFUL\n"}))).data)), 0); } else  { printf(((char*)((*(&((__insieme_type_1){" Verification    =             UNSUCCESSFUL\n"}))).data)), 0); };
	printf(((char*)((*(&((__insieme_type_1){" Version         =             %12s\n"}))).data)), ((char*)((*(npbversion)).data)));
	printf(((char*)((*(&((__insieme_type_1){" Compile date    =             %12s\n"}))).data)), ((char*)((*(compiletime)).data)));
	printf(((char*)((*(&((__insieme_type_1){"\n Compile options:\n"}))).data)), 0);
	printf(((char*)((*(&((__insieme_type_1){"    CC           = %s\n"}))).data)), ((char*)((*(cc)).data)));
	printf(((char*)((*(&((__insieme_type_1){"    CLINK        = %s\n"}))).data)), ((char*)((*(clink)).data)));
	printf(((char*)((*(&((__insieme_type_1){"    C_LIB        = %s\n"}))).data)), ((char*)((*(c_lib)).data)));
	printf(((char*)((*(&((__insieme_type_1){"    C_INC        = %s\n"}))).data)), ((char*)((*(c_inc)).data)));
	printf(((char*)((*(&((__insieme_type_1){"    CFLAGS       = %s\n"}))).data)), ((char*)((*(cflags)).data)));
	printf(((char*)((*(&((__insieme_type_1){"    CLINKFLAGS   = %s\n"}))).data)), ((char*)((*(clinkflags)).data)));
	printf(((char*)((*(&((__insieme_type_1){"    RAND         = %s\n"}))).data)), ((char*)((*(rand)).data)));
}
static void c_print_results_wrap(void* _closure, __insieme_type_1* name, char class, int n1, int n2, int n3, int niter, int nthreads, double t, double mops, __insieme_type_1* optype, int passed_verification, __insieme_type_1* npbversion, __insieme_type_1* compiletime, __insieme_type_1* cc, __insieme_type_1* clink, __insieme_type_1* c_lib, __insieme_type_1* c_inc, __insieme_type_1* cflags, __insieme_type_1* clinkflags, __insieme_type_1* rand) { c_print_results(name, class, n1, n2, n3, niter, nthreads, t, mops, optype, passed_verification, npbversion, compiletime, cc, clink, c_lib, c_inc, cflags, clinkflags, rand); }

// start code fragment :: main function //
int main(int __argc, char** __argv) {
	
	// encapsulating arguments within Insieme Types ...
	int argc = __argc;
	__insieme_type_0 argv = (__insieme_type_0){alloca(sizeof(__insieme_type_1) * argc)};
	for(int i=0; i<argc; ++i) {
		argv.data[i] = (__insieme_type_1){__argv[i]};
	}
	
	// ---- begin of actual code body ----
	{
		;
		((*(&((__GLOBAL__).sec))) = (((int)(0))-1));
		((*(&((__GLOBAL__).B_test_index_array))) = ((__insieme_type_3){{41869, 812306, 5102857, 18232239, 26860214}}));
		((*(&((__GLOBAL__).B_test_rank_array))) = ((__insieme_type_3){{33422937, 10244, 59149, 33135281, 99}}));
		((*(&((__GLOBAL__).C_test_index_array))) = ((__insieme_type_3){{44172927, 72999161, 74326391, 129606274, 21736814}}));
		((*(&((__GLOBAL__).C_test_rank_array))) = ((__insieme_type_3){{61147, 882988, 266290, 133997595, 133525895}}));
		((*(&((__GLOBAL__).KS))) = 0);
		((*(&((__GLOBAL__).R23))) = 0.0);
		((*(&((__GLOBAL__).R46))) = 0.0);
		((*(&((__GLOBAL__).key_buff_ptr_global))) = (((__insieme_type_4){(__insieme_type_6_init_uniform(0)).data})));
		((*(&((__GLOBAL__).passed_verification))) = 0);
		((*(&((__GLOBAL__).S_test_index_array))) = ((__insieme_type_3){{48427, 17148, 23627, 62548, 4431}}));
		((*(&((__GLOBAL__).S_test_rank_array))) = ((__insieme_type_3){{0, 18, 346, 64917, 65463}}));
		((*(&((__GLOBAL__).W_test_index_array))) = ((__insieme_type_3){{357773, 934767, 875723, 898999, 404505}}));
		((*(&((__GLOBAL__).W_test_rank_array))) = ((__insieme_type_3){{1249, 11698, 1039987, 1043896, 1048018}}));
		((*(&((__GLOBAL__).A_test_index_array))) = ((__insieme_type_3){{2112377, 662041, 5336171, 3642833, 4250760}}));
		((*(&((__GLOBAL__).A_test_rank_array))) = ((__insieme_type_3){{104, 17523, 123928, 8288932, 8388264}}));
		((*(&((__GLOBAL__).T23))) = 0.0);
		((*(&((__GLOBAL__).T46))) = 0.0);
		int i = 0;
		int iteration = 0;
		int itemp = 0;
		int nthreads = 1;
		double timecounter = 0.0;
		double maxtime = 0.0;
		{
			for(int var_11 = 0; var_11 < 5; var_11 += 1) {
				int var_10 = ((int)('W'));
				switch(var_10) {
				case 'S':
					{
						((((*(&((__GLOBAL__).test_index_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).S_test_index_array))).data[((unsigned int)((var_11)))])));
						((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).S_test_rank_array))).data[((unsigned int)((var_11)))])));
					}; break;
				case 'A':
					{
						((((*(&((__GLOBAL__).test_index_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).A_test_index_array))).data[((unsigned int)((var_11)))])));
						((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).A_test_rank_array))).data[((unsigned int)((var_11)))])));
					}; break;
				case 'W':
					{
						((((*(&((__GLOBAL__).test_index_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).W_test_index_array))).data[((unsigned int)((var_11)))])));
						((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).W_test_rank_array))).data[((unsigned int)((var_11)))])));
					}; break;
				case 'B':
					{
						((((*(&((__GLOBAL__).test_index_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).B_test_index_array))).data[((unsigned int)((var_11)))])));
						((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).B_test_rank_array))).data[((unsigned int)((var_11)))])));
					}; break;
				case 'C':
					{
						((((*(&((__GLOBAL__).test_index_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).C_test_index_array))).data[((unsigned int)((var_11)))])));
						((((*(&((__GLOBAL__).test_rank_array))).data[((unsigned int)((var_11)))])) = (((*(&((__GLOBAL__).C_test_rank_array))).data[((unsigned int)((var_11)))])));
					}; break;
				};
			};
			((i) = (0+(((int)(ceil((((double)((5-0)))/((double)(1))))))*1)));
		};
		{};
		printf(((char*)((*(&((__insieme_type_1){"\n\n NAS Parallel Benchmarks 2.3 OpenMP C version - IS Benchmark\n\n"}))).data)), 0);
		printf(((char*)((*(&((__insieme_type_1){" Size:  %d  (class %c)\n"}))).data)), (1<<20), 'W');
		printf(((char*)((*(&((__insieme_type_1){" Iterations:   %d\n"}))).data)), 10);
		__insieme_supp_10(0);
		__insieme_supp_11(314159265.00, 1220703125.00);
		__insieme_supp_15(1);
		((*(&((__GLOBAL__).passed_verification))) = 0);
		if(('W'!='S')) { printf(((char*)((*(&((__insieme_type_1){"\n   iteration\n"}))).data)), 0); };
		__insieme_supp_18(0);
		{
			for(int var_80 = 1; var_80 < (10+1); var_80 += 1) {
				if(('W'!='S')) { printf(((char*)((*(&((__insieme_type_1){"        %d\n"}))).data)), (var_80)); };
				__insieme_supp_15((var_80));
			};
			((iteration) = (1+(((int)(ceil((((double)(((10+1)-1)))/((double)(1))))))*1)));
		};
		__insieme_supp_25(0);
		((timecounter) = __insieme_supp_27(0));
		__insieme_supp_28();
		if(((*(&((__GLOBAL__).passed_verification)))!=((5*10)+1))) { ((*(&((__GLOBAL__).passed_verification))) = 0); };
		c_print_results(&((__insieme_type_1){"IS"}), 'W', (1<<20), 0, 0, 10, (nthreads), (timecounter), ((((double)((10*(1<<20))))/(timecounter))/1000000.), &((__insieme_type_1){"keys ranked"}), (*(&((__GLOBAL__).passed_verification))), &((__insieme_type_1){"2.3"}), &((__insieme_type_1){"02 Dec 2010"}), &((__insieme_type_1){"cc"}), &((__insieme_type_1){"cc"}), &((__insieme_type_1){"-lm"}), &((__insieme_type_1){"-I../common"}), &((__insieme_type_1){"-O3 "}), &((__insieme_type_1){"-lm"}), &((__insieme_type_1){"randlc"}));
	}
	// ----  end of actual code body  ----
	
}

