// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v2, ref<array<array<char,1>,1>> v3){
        decl ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v1 =  new(struct{start:=vector.init.uniform(0.0, 64), elapsed:=vector.init.uniform(0.0, 64), sec:=0-1, B_test_index_array:=[41869, 812306, 5102857, 18232239, 26860214], B_test_rank_array:=[33422937, 10244, 59149, 33135281, 99], C_test_index_array:=[44172927, 72999161, 74326391, 129606274, 21736814], C_test_rank_array:=[61147, 882988, 266290, 133997595, 133525895], KS:=0, R23:=0.0, R46:=0.0, key_buff_ptr_global:=vector.to.array(vector.init.uniform(0, 1)), passed_verification:=0, key_array:=vector.init.uniform(0, 1048576), key_buff1:=vector.init.uniform(0, 1048576), key_buff2:=vector.init.uniform(0, 1048576), partial_verify_vals:=vector.init.uniform(0, 5), test_index_array:=vector.init.uniform(0, 5), test_rank_array:=vector.init.uniform(0, 5), S_test_index_array:=[48427, 17148, 23627, 62548, 4431], S_test_rank_array:=[0, 18, 346, 64917, 65463], W_test_index_array:=[357773, 934767, 875723, 898999, 404505], W_test_rank_array:=[1249, 11698, 1039987, 1043896, 1048018], A_test_index_array:=[2112377, 662041, 5336171, 3642833, 4250760], A_test_rank_array:=[104, 17523, 123928, 8288932, 8388264], T23:=0.0, T46:=0.0});
        decl ref<int<4>> v4 =  var(0);
        decl ref<int<4>> v5 =  var(0);
        decl ref<int<4>> v6 =  var(0);
        decl ref<int<4>> v7 =  var(1);
        decl ref<real<8>> v8 =  var(0.0);
        decl ref<real<8>> v9 =  var(0.0);
        {
            for(decl int<4> v12 = 0 .. 5 : 1) {
                decl int<4> v10 = 'W';
                switch(v10) {
                    case 'S': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, S_test_index_array, type<vector<int<4>,5>>), v12);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, S_test_rank_array, type<vector<int<4>,5>>), v12);
                    }
                    case 'A': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, A_test_index_array, type<vector<int<4>,5>>), v12);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, A_test_rank_array, type<vector<int<4>,5>>), v12);
                    }
                    case 'W': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, W_test_index_array, type<vector<int<4>,5>>), v12);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, W_test_rank_array, type<vector<int<4>,5>>), v12);
                    }
                    case 'B': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, B_test_index_array, type<vector<int<4>,5>>), v12);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, B_test_rank_array, type<vector<int<4>,5>>), v12);
                    }
                    case 'C': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, C_test_index_array, type<vector<int<4>,5>>), v12);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v12) := vector.ref.elem(composite.ref.elem(v1, C_test_rank_array, type<vector<int<4>,5>>), v12);
                    }
                    default: { }
                };
            };
            v4 := 0+ceil(5-0/1)*1;
        };
        { };
        printf(string.as.char.pointer("\n\n NAS Parallel Benchmarks 2.3 OpenMP C version - IS Benchmark\n\n"), varlist.pack(()));
        printf(string.as.char.pointer(" Size:  %d  (class %c)\n"), varlist.pack((int.lshift(1, 20), 'W')));
        printf(string.as.char.pointer(" Iterations:   %d\n"), varlist.pack((10)));
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v13, int<4> v14){
            vector.ref.elem(composite.ref.elem(v13, elapsed, type<vector<real<8>,64>>), v14) := 0.0;
        }(v1, 0);
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v16, real<8> v17, real<8> v18){
            decl ref<real<8>> v23 =  var(v17);
            decl ref<real<8>> v24 =  var(v18);
            {
                decl ref<real<8>> v19 =  var(0.0);
                decl ref<int<4>> v20 =  var(0);
                decl ref<int<4>> v21 =  var(0);
                decl ref<int<4>> v22 =  var(0);
                v22 := int.lshift(1, 16)/4;
                {
                    for(decl int<4> v45 = 0 .. int.lshift(1, 20) : 1) {
                        v19 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v25, ref<array<real<8>,1>> v26, ref<array<real<8>,1>> v27){
                            decl ref<real<8>> v28 =  var(0.0);
                            decl ref<real<8>> v29 =  var(0.0);
                            decl ref<real<8>> v30 =  var(0.0);
                            decl ref<real<8>> v31 =  var(0.0);
                            decl ref<real<8>> v32 =  var(0.0);
                            decl ref<real<8>> v33 =  var(0.0);
                            decl ref<real<8>> v34 =  var(0.0);
                            decl ref<real<8>> v35 =  var(0.0);
                            decl ref<real<8>> v36 =  var(0.0);
                            decl ref<int<4>> v37 =  var(0);
                            decl ref<int<4>> v38 =  var(0);
                            if(composite.ref.elem(v25, KS, type<int<4>>)==0) {
                                composite.ref.elem(v25, R23, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, R46, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, T23, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, T46, type<real<8>>) := 1.0;
                                {
                                    for(decl int<4> v40 = 1 .. 23+1 : 1) {
                                        composite.ref.elem(v25, R23, type<real<8>>) := 0.50*composite.ref.elem(v25, R23, type<real<8>>);
                                        composite.ref.elem(v25, T23, type<real<8>>) := 2.0*composite.ref.elem(v25, T23, type<real<8>>);
                                    };
                                    v37 := 1+ceil(23+1-1/1)*1;
                                };
                                {
                                    for(decl int<4> v42 = 1 .. 46+1 : 1) {
                                        composite.ref.elem(v25, R46, type<real<8>>) := 0.50*composite.ref.elem(v25, R46, type<real<8>>);
                                        composite.ref.elem(v25, T46, type<real<8>>) := 2.0*composite.ref.elem(v25, T46, type<real<8>>);
                                    };
                                    v37 := 1+ceil(46+1-1/1)*1;
                                };
                                composite.ref.elem(v25, KS, type<int<4>>) := 1;
                            } else { };
                            v28 := composite.ref.elem(v25, R23, type<real<8>>)*array.ref.elem.1D(v27, 0);
                            v38 := real.to.int(v28, 4);
                            v32 := v38;
                            v33 := array.ref.elem.1D(v27, 0)-composite.ref.elem(v25, T23, type<real<8>>)*v32;
                            v28 := composite.ref.elem(v25, R23, type<real<8>>)*array.ref.elem.1D(v26, 0);
                            v38 := real.to.int(v28, 4);
                            v34 := v38;
                            v35 := array.ref.elem.1D(v26, 0)-composite.ref.elem(v25, T23, type<real<8>>)*v34;
                            v28 := v32*v35+v33*v34;
                            v38 := composite.ref.elem(v25, R23, type<real<8>>)*v28;
                            v29 := v38;
                            v36 := v28-composite.ref.elem(v25, T23, type<real<8>>)*v29;
                            v30 := composite.ref.elem(v25, T23, type<real<8>>)*v36+v33*v35;
                            v38 := composite.ref.elem(v25, R46, type<real<8>>)*v30;
                            v31 := v38;
                            array.ref.elem.1D(v26, 0) := v30-composite.ref.elem(v25, T46, type<real<8>>)*v31;
                            return composite.ref.elem(v25, R46, type<real<8>>)*array.ref.elem.1D(v26, 0);
                        }(v16, scalar.to.array(v23), scalar.to.array(v24));
                        v19 := v19+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v25, ref<array<real<8>,1>> v26, ref<array<real<8>,1>> v27){
                            decl ref<real<8>> v28 =  var(0.0);
                            decl ref<real<8>> v29 =  var(0.0);
                            decl ref<real<8>> v30 =  var(0.0);
                            decl ref<real<8>> v31 =  var(0.0);
                            decl ref<real<8>> v32 =  var(0.0);
                            decl ref<real<8>> v33 =  var(0.0);
                            decl ref<real<8>> v34 =  var(0.0);
                            decl ref<real<8>> v35 =  var(0.0);
                            decl ref<real<8>> v36 =  var(0.0);
                            decl ref<int<4>> v37 =  var(0);
                            decl ref<int<4>> v38 =  var(0);
                            if(composite.ref.elem(v25, KS, type<int<4>>)==0) {
                                composite.ref.elem(v25, R23, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, R46, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, T23, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, T46, type<real<8>>) := 1.0;
                                {
                                    for(decl int<4> v40 = 1 .. 23+1 : 1) {
                                        composite.ref.elem(v25, R23, type<real<8>>) := 0.50*composite.ref.elem(v25, R23, type<real<8>>);
                                        composite.ref.elem(v25, T23, type<real<8>>) := 2.0*composite.ref.elem(v25, T23, type<real<8>>);
                                    };
                                    v37 := 1+ceil(23+1-1/1)*1;
                                };
                                {
                                    for(decl int<4> v42 = 1 .. 46+1 : 1) {
                                        composite.ref.elem(v25, R46, type<real<8>>) := 0.50*composite.ref.elem(v25, R46, type<real<8>>);
                                        composite.ref.elem(v25, T46, type<real<8>>) := 2.0*composite.ref.elem(v25, T46, type<real<8>>);
                                    };
                                    v37 := 1+ceil(46+1-1/1)*1;
                                };
                                composite.ref.elem(v25, KS, type<int<4>>) := 1;
                            } else { };
                            v28 := composite.ref.elem(v25, R23, type<real<8>>)*array.ref.elem.1D(v27, 0);
                            v38 := real.to.int(v28, 4);
                            v32 := v38;
                            v33 := array.ref.elem.1D(v27, 0)-composite.ref.elem(v25, T23, type<real<8>>)*v32;
                            v28 := composite.ref.elem(v25, R23, type<real<8>>)*array.ref.elem.1D(v26, 0);
                            v38 := real.to.int(v28, 4);
                            v34 := v38;
                            v35 := array.ref.elem.1D(v26, 0)-composite.ref.elem(v25, T23, type<real<8>>)*v34;
                            v28 := v32*v35+v33*v34;
                            v38 := composite.ref.elem(v25, R23, type<real<8>>)*v28;
                            v29 := v38;
                            v36 := v28-composite.ref.elem(v25, T23, type<real<8>>)*v29;
                            v30 := composite.ref.elem(v25, T23, type<real<8>>)*v36+v33*v35;
                            v38 := composite.ref.elem(v25, R46, type<real<8>>)*v30;
                            v31 := v38;
                            array.ref.elem.1D(v26, 0) := v30-composite.ref.elem(v25, T46, type<real<8>>)*v31;
                            return composite.ref.elem(v25, R46, type<real<8>>)*array.ref.elem.1D(v26, 0);
                        }(v16, scalar.to.array(v23), scalar.to.array(v24));
                        v19 := v19+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v25, ref<array<real<8>,1>> v26, ref<array<real<8>,1>> v27){
                            decl ref<real<8>> v28 =  var(0.0);
                            decl ref<real<8>> v29 =  var(0.0);
                            decl ref<real<8>> v30 =  var(0.0);
                            decl ref<real<8>> v31 =  var(0.0);
                            decl ref<real<8>> v32 =  var(0.0);
                            decl ref<real<8>> v33 =  var(0.0);
                            decl ref<real<8>> v34 =  var(0.0);
                            decl ref<real<8>> v35 =  var(0.0);
                            decl ref<real<8>> v36 =  var(0.0);
                            decl ref<int<4>> v37 =  var(0);
                            decl ref<int<4>> v38 =  var(0);
                            if(composite.ref.elem(v25, KS, type<int<4>>)==0) {
                                composite.ref.elem(v25, R23, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, R46, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, T23, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, T46, type<real<8>>) := 1.0;
                                {
                                    for(decl int<4> v40 = 1 .. 23+1 : 1) {
                                        composite.ref.elem(v25, R23, type<real<8>>) := 0.50*composite.ref.elem(v25, R23, type<real<8>>);
                                        composite.ref.elem(v25, T23, type<real<8>>) := 2.0*composite.ref.elem(v25, T23, type<real<8>>);
                                    };
                                    v37 := 1+ceil(23+1-1/1)*1;
                                };
                                {
                                    for(decl int<4> v42 = 1 .. 46+1 : 1) {
                                        composite.ref.elem(v25, R46, type<real<8>>) := 0.50*composite.ref.elem(v25, R46, type<real<8>>);
                                        composite.ref.elem(v25, T46, type<real<8>>) := 2.0*composite.ref.elem(v25, T46, type<real<8>>);
                                    };
                                    v37 := 1+ceil(46+1-1/1)*1;
                                };
                                composite.ref.elem(v25, KS, type<int<4>>) := 1;
                            } else { };
                            v28 := composite.ref.elem(v25, R23, type<real<8>>)*array.ref.elem.1D(v27, 0);
                            v38 := real.to.int(v28, 4);
                            v32 := v38;
                            v33 := array.ref.elem.1D(v27, 0)-composite.ref.elem(v25, T23, type<real<8>>)*v32;
                            v28 := composite.ref.elem(v25, R23, type<real<8>>)*array.ref.elem.1D(v26, 0);
                            v38 := real.to.int(v28, 4);
                            v34 := v38;
                            v35 := array.ref.elem.1D(v26, 0)-composite.ref.elem(v25, T23, type<real<8>>)*v34;
                            v28 := v32*v35+v33*v34;
                            v38 := composite.ref.elem(v25, R23, type<real<8>>)*v28;
                            v29 := v38;
                            v36 := v28-composite.ref.elem(v25, T23, type<real<8>>)*v29;
                            v30 := composite.ref.elem(v25, T23, type<real<8>>)*v36+v33*v35;
                            v38 := composite.ref.elem(v25, R46, type<real<8>>)*v30;
                            v31 := v38;
                            array.ref.elem.1D(v26, 0) := v30-composite.ref.elem(v25, T46, type<real<8>>)*v31;
                            return composite.ref.elem(v25, R46, type<real<8>>)*array.ref.elem.1D(v26, 0);
                        }(v16, scalar.to.array(v23), scalar.to.array(v24));
                        v19 := v19+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v25, ref<array<real<8>,1>> v26, ref<array<real<8>,1>> v27){
                            decl ref<real<8>> v28 =  var(0.0);
                            decl ref<real<8>> v29 =  var(0.0);
                            decl ref<real<8>> v30 =  var(0.0);
                            decl ref<real<8>> v31 =  var(0.0);
                            decl ref<real<8>> v32 =  var(0.0);
                            decl ref<real<8>> v33 =  var(0.0);
                            decl ref<real<8>> v34 =  var(0.0);
                            decl ref<real<8>> v35 =  var(0.0);
                            decl ref<real<8>> v36 =  var(0.0);
                            decl ref<int<4>> v37 =  var(0);
                            decl ref<int<4>> v38 =  var(0);
                            if(composite.ref.elem(v25, KS, type<int<4>>)==0) {
                                composite.ref.elem(v25, R23, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, R46, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, T23, type<real<8>>) := 1.0;
                                composite.ref.elem(v25, T46, type<real<8>>) := 1.0;
                                {
                                    for(decl int<4> v40 = 1 .. 23+1 : 1) {
                                        composite.ref.elem(v25, R23, type<real<8>>) := 0.50*composite.ref.elem(v25, R23, type<real<8>>);
                                        composite.ref.elem(v25, T23, type<real<8>>) := 2.0*composite.ref.elem(v25, T23, type<real<8>>);
                                    };
                                    v37 := 1+ceil(23+1-1/1)*1;
                                };
                                {
                                    for(decl int<4> v42 = 1 .. 46+1 : 1) {
                                        composite.ref.elem(v25, R46, type<real<8>>) := 0.50*composite.ref.elem(v25, R46, type<real<8>>);
                                        composite.ref.elem(v25, T46, type<real<8>>) := 2.0*composite.ref.elem(v25, T46, type<real<8>>);
                                    };
                                    v37 := 1+ceil(46+1-1/1)*1;
                                };
                                composite.ref.elem(v25, KS, type<int<4>>) := 1;
                            } else { };
                            v28 := composite.ref.elem(v25, R23, type<real<8>>)*array.ref.elem.1D(v27, 0);
                            v38 := real.to.int(v28, 4);
                            v32 := v38;
                            v33 := array.ref.elem.1D(v27, 0)-composite.ref.elem(v25, T23, type<real<8>>)*v32;
                            v28 := composite.ref.elem(v25, R23, type<real<8>>)*array.ref.elem.1D(v26, 0);
                            v38 := real.to.int(v28, 4);
                            v34 := v38;
                            v35 := array.ref.elem.1D(v26, 0)-composite.ref.elem(v25, T23, type<real<8>>)*v34;
                            v28 := v32*v35+v33*v34;
                            v38 := composite.ref.elem(v25, R23, type<real<8>>)*v28;
                            v29 := v38;
                            v36 := v28-composite.ref.elem(v25, T23, type<real<8>>)*v29;
                            v30 := composite.ref.elem(v25, T23, type<real<8>>)*v36+v33*v35;
                            v38 := composite.ref.elem(v25, R46, type<real<8>>)*v30;
                            v31 := v38;
                            array.ref.elem.1D(v26, 0) := v30-composite.ref.elem(v25, T46, type<real<8>>)*v31;
                            return composite.ref.elem(v25, R46, type<real<8>>)*array.ref.elem.1D(v26, 0);
                        }(v16, scalar.to.array(v23), scalar.to.array(v24));
                        vector.ref.elem(composite.ref.elem(v16, key_array, type<vector<int<4>,1048576>>), v45) := v22*v19;
                    };
                    v20 := 0+ceil(int.lshift(1, 20)-0/1)*1;
                };
            };
        }(v1, 314159265.00, 1220703125.00);
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, int<4> v48){
            decl ref<int<4>> v49 =  var(0);
            decl ref<int<4>> v50 =  var(0);
            decl ref<int<4>> v51 =  var(0);
            decl ref<int<4>> v52 =  var(0);
            decl ref<int<4>> v53 =  var(0);
            decl ref<int<4>> v54 =  var(16-10);
            decl ref<int<4>> v55 =  var(0);
            decl ref<int<4>> v56 =  var(0);
            decl ref<int<4>> v57 =  var(0);
            decl ref<vector<int<4>,65536>> v58 =  var(undefined(type<vector<int<4>,65536>>));
            {
                vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), v48) := v48;
                vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), v48+10) := int.lshift(1, 16)-v48;
                {
                    for(decl int<4> v60 = 0 .. 5 : 1) 
                        vector.ref.elem(composite.ref.elem(v47, partial_verify_vals, type<vector<int<4>,5>>), v60) := vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), vector.ref.elem(composite.ref.elem(v47, test_index_array, type<vector<int<4>,5>>), v60))
                    ;
                    v49 := 0+ceil(5-0/1)*1;
                };
                {
                    for(decl int<4> v62 = 0 .. int.lshift(1, 16) : 1) 
                        vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v62) := 0
                    ;
                    v49 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                };
            };
            {
                for(decl int<4> v64 = 0 .. int.lshift(1, 16) : 1) 
                    vector.ref.elem(v58, v64) := 0
                ;
                v49 := 0+ceil(int.lshift(1, 16)-0/1)*1;
            };
            {
                for(decl int<4> v66 = 0 .. int.lshift(1, 20) : 1) {
                    vector.ref.elem(composite.ref.elem(v47, key_buff2, type<vector<int<4>,1048576>>), v66) := vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), v66);
                    int.postInc(vector.ref.elem(v58, vector.ref.elem(composite.ref.elem(v47, key_buff2, type<vector<int<4>,1048576>>), v66)));
                };
                v49 := 0+ceil(int.lshift(1, 20)-0/1)*1;
            };
            {
                for(decl int<4> v68 = 0 .. int.lshift(1, 16)-1 : 1) 
                    vector.ref.elem(v58, v68+1) := vector.ref.elem(v58, v68+1)+vector.ref.elem(v58, v68)
                ;
                v49 := 0+ceil(int.lshift(1, 16)-1-0/1)*1;
            };
            {
                {
                    for(decl int<4> v70 = 0 .. int.lshift(1, 16) : 1) 
                        vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v70) := vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v70)+vector.ref.elem(v58, v70)
                    ;
                    v49 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                };
            };
            {
                {
                    for(decl int<4> v79 = 0 .. 5 : 1) {
                        v51 := vector.ref.elem(composite.ref.elem(v47, partial_verify_vals, type<vector<int<4>,5>>), v79);
                        if(0<=v51&&bind(){fun(ref<int<4>> v76)return v76<=int.lshift(1, 20)-1(v51)}) {
                            decl int<4> v71 = 'W';
                            switch(v71) {
                                case 'S': if(v79<=2) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                case 'W': if(v79<2) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48-2)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                case 'A': if(v79<=2) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48-1)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48-1)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                case 'B': if(v79==1||bind(){fun(ref<int<4>> v72)return v72==2( var(v79))}||bind(){fun(ref<int<4>> v74)return v74==4( var(v79))}) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                case 'C': if(v79<=2) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                default: { }
                            };
                        } else { };
                    };
                    v49 := 0+ceil(5-0/1)*1;
                };
                if(v48==10) composite.ref.elem(v47, key_buff_ptr_global, type<array<int<4>,1>>) := vector.to.array(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>)) else { };
            };
        }(v1, 1);
        composite.ref.elem(v1, passed_verification, type<int<4>>) := 0;
        if('W'!='S') printf(string.as.char.pointer("\n   iteration\n"), varlist.pack(())) else { };
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v81, int<4> v82){
            vector.ref.elem(composite.ref.elem(v81, start, type<vector<real<8>,64>>), v82) := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v83){
                decl ref<real<8>> v84 =  var(0.0);
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v85, ref<array<real<8>,1>> v86){
                    decl ref<struct<tv_sec:int<8>,tv_usec:int<8>>> v87 =  var(undefined(type<struct<tv_sec:int<8>,tv_usec:int<8>>>));
                    gettimeofday(scalar.to.array(v87),  var(get.null(type<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>>)));
                    if(composite.ref.elem(v85, sec, type<int<4>>)<0) composite.ref.elem(v85, sec, type<int<4>>) := composite.ref.elem(v87, tv_sec, type<int<8>>) else { };
                    array.ref.elem.1D(v86, 0) := composite.ref.elem(v87, tv_sec, type<int<8>>)-composite.ref.elem(v85, sec, type<int<4>>)+1.0e-6*composite.ref.elem(v87, tv_usec, type<int<8>>);
                }(v83, scalar.to.array(v84));
                return v84;
            }(v81);
        }(v1, 0);
        {
            for(decl int<4> v92 = 1 .. 10+1 : 1) {
                if('W'!='S') printf(string.as.char.pointer("        %d\n"), varlist.pack((v92))) else { };
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, int<4> v48){
                    decl ref<int<4>> v49 =  var(0);
                    decl ref<int<4>> v50 =  var(0);
                    decl ref<int<4>> v51 =  var(0);
                    decl ref<int<4>> v52 =  var(0);
                    decl ref<int<4>> v53 =  var(0);
                    decl ref<int<4>> v54 =  var(16-10);
                    decl ref<int<4>> v55 =  var(0);
                    decl ref<int<4>> v56 =  var(0);
                    decl ref<int<4>> v57 =  var(0);
                    decl ref<vector<int<4>,65536>> v58 =  var(undefined(type<vector<int<4>,65536>>));
                    {
                        vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), v48) := v48;
                        vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), v48+10) := int.lshift(1, 16)-v48;
                        {
                            for(decl int<4> v60 = 0 .. 5 : 1) 
                                vector.ref.elem(composite.ref.elem(v47, partial_verify_vals, type<vector<int<4>,5>>), v60) := vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), vector.ref.elem(composite.ref.elem(v47, test_index_array, type<vector<int<4>,5>>), v60))
                            ;
                            v49 := 0+ceil(5-0/1)*1;
                        };
                        {
                            for(decl int<4> v62 = 0 .. int.lshift(1, 16) : 1) 
                                vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v62) := 0
                            ;
                            v49 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                        };
                    };
                    {
                        for(decl int<4> v64 = 0 .. int.lshift(1, 16) : 1) 
                            vector.ref.elem(v58, v64) := 0
                        ;
                        v49 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                    };
                    {
                        for(decl int<4> v66 = 0 .. int.lshift(1, 20) : 1) {
                            vector.ref.elem(composite.ref.elem(v47, key_buff2, type<vector<int<4>,1048576>>), v66) := vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), v66);
                            int.postInc(vector.ref.elem(v58, vector.ref.elem(composite.ref.elem(v47, key_buff2, type<vector<int<4>,1048576>>), v66)));
                        };
                        v49 := 0+ceil(int.lshift(1, 20)-0/1)*1;
                    };
                    {
                        for(decl int<4> v68 = 0 .. int.lshift(1, 16)-1 : 1) 
                            vector.ref.elem(v58, v68+1) := vector.ref.elem(v58, v68+1)+vector.ref.elem(v58, v68)
                        ;
                        v49 := 0+ceil(int.lshift(1, 16)-1-0/1)*1;
                    };
                    {
                        {
                            for(decl int<4> v70 = 0 .. int.lshift(1, 16) : 1) 
                                vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v70) := vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v70)+vector.ref.elem(v58, v70)
                            ;
                            v49 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                        };
                    };
                    {
                        {
                            for(decl int<4> v79 = 0 .. 5 : 1) {
                                v51 := vector.ref.elem(composite.ref.elem(v47, partial_verify_vals, type<vector<int<4>,5>>), v79);
                                if(0<=v51&&bind(){fun(ref<int<4>> v76)return v76<=int.lshift(1, 20)-1(v51)}) {
                                    decl int<4> v71 = 'W';
                                    switch(v71) {
                                        case 'S': if(v79<=2) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        case 'W': if(v79<2) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48-2)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        case 'A': if(v79<=2) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48-1)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48-1)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        case 'B': if(v79==1||bind(){fun(ref<int<4>> v72)return v72==2( var(v79))}||bind(){fun(ref<int<4>> v74)return v74==4( var(v79))}) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        case 'C': if(v79<=2) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)+v48)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), v51-1), vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), v79)-v48)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        default: { }
                                    };
                                } else { };
                            };
                            v49 := 0+ceil(5-0/1)*1;
                        };
                        if(v48==10) composite.ref.elem(v47, key_buff_ptr_global, type<array<int<4>,1>>) := vector.to.array(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>)) else { };
                    };
                }(v1, v92);
            };
            v5 := 1+ceil(10+1-1/1)*1;
        };
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v93, int<4> v94){
            decl ref<real<8>> v95 =  var(0.0);
            decl ref<real<8>> v96 =  var(0.0);
            v96 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v83){
                decl ref<real<8>> v84 =  var(0.0);
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v85, ref<array<real<8>,1>> v86){
                    decl ref<struct<tv_sec:int<8>,tv_usec:int<8>>> v87 =  var(undefined(type<struct<tv_sec:int<8>,tv_usec:int<8>>>));
                    gettimeofday(scalar.to.array(v87),  var(get.null(type<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>>)));
                    if(composite.ref.elem(v85, sec, type<int<4>>)<0) composite.ref.elem(v85, sec, type<int<4>>) := composite.ref.elem(v87, tv_sec, type<int<8>>) else { };
                    array.ref.elem.1D(v86, 0) := composite.ref.elem(v87, tv_sec, type<int<8>>)-composite.ref.elem(v85, sec, type<int<4>>)+1.0e-6*composite.ref.elem(v87, tv_usec, type<int<8>>);
                }(v83, scalar.to.array(v84));
                return v84;
            }(v93);
            v95 := v96-vector.ref.elem(composite.ref.elem(v93, start, type<vector<real<8>,64>>), v94);
            vector.ref.elem(composite.ref.elem(v93, elapsed, type<vector<real<8>,64>>), v94) := vector.ref.elem(composite.ref.elem(v93, elapsed, type<vector<real<8>,64>>), v94)+v95;
        }(v1, 0);
        v8 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v98, int<4> v99){
            return vector.ref.elem(composite.ref.elem(v98, elapsed, type<vector<real<8>,64>>), v99);
        }(v1, 0);
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v101){
            decl ref<int<4>> v102 =  var(0);
            decl ref<int<4>> v103 =  var(0);
            decl ref<int<4>> v104 =  var(0);
            decl ref<int<4>> v105 =  var(0);
            decl ref<int<4>> v106 =  var(0);
            {
                for(decl int<4> v108 = 0 .. int.lshift(1, 20) : 1) 
                    vector.ref.elem(composite.ref.elem(v101, key_array, type<vector<int<4>,1048576>>), int.preDec(array.ref.elem.1D(composite.ref.elem(v101, key_buff_ptr_global, type<array<int<4>,1>>), vector.ref.elem(composite.ref.elem(v101, key_buff2, type<vector<int<4>,1048576>>), v108)))) := vector.ref.elem(composite.ref.elem(v101, key_buff2, type<vector<int<4>,1048576>>), v108)
                ;
                v102 := 0+ceil(int.lshift(1, 20)-0/1)*1;
            };
            v103 := 0;
            {
                for(decl int<4> v110 = 1 .. int.lshift(1, 20) : 1) 
                    if(vector.ref.elem(composite.ref.elem(v101, key_array, type<vector<int<4>,1048576>>), v110-1)>vector.ref.elem(composite.ref.elem(v101, key_array, type<vector<int<4>,1048576>>), v110)) int.postInc(v103) else { }
                ;
                v102 := 1+ceil(int.lshift(1, 20)-1/1)*1;
            };
            if(int.ne(v103, 0)) {
                printf(string.as.char.pointer("Full_verify: number of keys out of sort: %d\n"), varlist.pack((v103)));
            } else int.postInc(composite.ref.elem(v101, passed_verification, type<int<4>>));
        }(v1);
        if(int.ne(composite.ref.elem(v1, passed_verification, type<int<4>>), 5*10+1)) composite.ref.elem(v1, passed_verification, type<int<4>>) := 0 else { };
        fun(ref<array<char,1>> v112, char v113, int<4> v114, int<4> v115, int<4> v116, int<4> v117, int<4> v118, real<8> v119, real<8> v120, ref<array<char,1>> v121, int<4> v122, ref<array<char,1>> v123, ref<array<char,1>> v124, ref<array<char,1>> v125, ref<array<char,1>> v126, ref<array<char,1>> v127, ref<array<char,1>> v128, ref<array<char,1>> v129, ref<array<char,1>> v130, ref<array<char,1>> v131){
            decl ref<array<char,1>> v132 = string.as.char.pointer("1000");
            printf(string.as.char.pointer("\n\n %s Benchmark Completed\n"), varlist.pack((v112)));
            printf(string.as.char.pointer(" Class           =                        %c\n"), varlist.pack((v113)));
            if(v115==0&&bind(){fun(int<4> v133)return v133==0(v116)}) printf(string.as.char.pointer(" Size            =             %12d\n"), varlist.pack((v114))) else printf(string.as.char.pointer(" Size            =              %3dx%3dx%3d\n"), varlist.pack((v114, v115, v116)));
            printf(string.as.char.pointer(" Iterations      =             %12d\n"), varlist.pack((v117)));
            printf(string.as.char.pointer(" Threads         =             %12d\n"), varlist.pack((v118)));
            printf(string.as.char.pointer(" Time in seconds =             %12.2f\n"), varlist.pack((0.0)));
            printf(string.as.char.pointer(" Mop/s total     =             %12.2f\n"), varlist.pack((0.0)));
            printf(string.as.char.pointer(" Operation type  = %24s\n"), varlist.pack((v121)));
            if(int.ne(v122, 0)) printf(string.as.char.pointer(" Verification    =               SUCCESSFUL\n"), varlist.pack(())) else printf(string.as.char.pointer(" Verification    =             UNSUCCESSFUL\n"), varlist.pack(()));
            printf(string.as.char.pointer(" Version         =             %12s\n"), varlist.pack((v123)));
            printf(string.as.char.pointer(" Compile date    =             %12s\n"), varlist.pack((v124)));
            printf(string.as.char.pointer("\n Compile options:\n"), varlist.pack(()));
            printf(string.as.char.pointer("    CC           = %s\n"), varlist.pack((v125)));
            printf(string.as.char.pointer("    CLINK        = %s\n"), varlist.pack((v126)));
            printf(string.as.char.pointer("    C_LIB        = %s\n"), varlist.pack((v127)));
            printf(string.as.char.pointer("    C_INC        = %s\n"), varlist.pack((v128)));
            printf(string.as.char.pointer("    CFLAGS       = %s\n"), varlist.pack((v129)));
            printf(string.as.char.pointer("    CLINKFLAGS   = %s\n"), varlist.pack((v130)));
            printf(string.as.char.pointer("    RAND         = %s\n"), varlist.pack((v131)));
        }(string.as.char.pointer("IS"), 'W', int.lshift(1, 20), 0, 0, 10, v7, v8, 10*int.lshift(1, 20)/v8/1000000., string.as.char.pointer("keys ranked"), composite.ref.elem(v1, passed_verification, type<int<4>>), string.as.char.pointer("2.3"), string.as.char.pointer("02 Dec 2010"), string.as.char.pointer("cc"), string.as.char.pointer("cc"), string.as.char.pointer("-lm"), string.as.char.pointer("-I../common"), string.as.char.pointer("-O3 "), string.as.char.pointer("-lm"), string.as.char.pointer("randlc"));
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v2, ref<array<array<char,1>,1>> v3){
        decl ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v1 = ( new(struct{start:=vector.init.uniform(0.0, 64), elapsed:=vector.init.uniform(0.0, 64), sec:=(CAST<int<4>>(0)-1), B_test_index_array:=[41869, 812306, 5102857, 18232239, 26860214], B_test_rank_array:=[33422937, 10244, 59149, 33135281, 99], C_test_index_array:=[44172927, 72999161, 74326391, 129606274, 21736814], C_test_rank_array:=[61147, 882988, 266290, 133997595, 133525895], KS:=0, R23:=0.0, R46:=0.0, key_buff_ptr_global:=vector.to.array(vector.init.uniform(0, 1)), passed_verification:=0, key_array:=vector.init.uniform(0, 1048576), key_buff1:=vector.init.uniform(0, 1048576), key_buff2:=vector.init.uniform(0, 1048576), partial_verify_vals:=vector.init.uniform(0, 5), test_index_array:=vector.init.uniform(0, 5), test_rank_array:=vector.init.uniform(0, 5), S_test_index_array:=[48427, 17148, 23627, 62548, 4431], S_test_rank_array:=[0, 18, 346, 64917, 65463], W_test_index_array:=[357773, 934767, 875723, 898999, 404505], W_test_rank_array:=[1249, 11698, 1039987, 1043896, 1048018], A_test_index_array:=[2112377, 662041, 5336171, 3642833, 4250760], A_test_rank_array:=[104, 17523, 123928, 8288932, 8388264], T23:=0.0, T46:=0.0}));
        decl ref<int<4>> v4 = ( var(0));
        decl ref<int<4>> v5 = ( var(0));
        decl ref<int<4>> v6 = ( var(0));
        decl ref<int<4>> v7 = ( var(1));
        decl ref<real<8>> v8 = ( var(0.0));
        decl ref<real<8>> v9 = ( var(0.0));
        {
            for(decl int<4> v12 = 0 .. 5 : 1) {
                decl int<4> v10 = CAST<int<4>>('W');
                switch(v10) {
                    case 'S': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, S_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, S_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                    }
                    case 'A': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, A_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, A_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                    }
                    case 'W': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, W_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, W_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                    }
                    case 'B': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, B_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, B_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                    }
                    case 'C': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, C_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12)) := ( *vector.ref.elem(composite.ref.elem(v1, C_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v12))));
                    }
                    default: { }
                };
            };
            (v4 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
        };
        { };
        printf(string.as.char.pointer("\n\n NAS Parallel Benchmarks 2.3 OpenMP C version - IS Benchmark\n\n"), varlist.pack(()));
        printf(string.as.char.pointer(" Size:  %d  (class %c)\n"), varlist.pack((int.lshift(1, 20), 'W')));
        printf(string.as.char.pointer(" Iterations:   %d\n"), varlist.pack((10)));
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v13, int<4> v14){
            (vector.ref.elem(composite.ref.elem(v13, elapsed, type<vector<real<8>,64>>), CAST<uint<4>>(v14)) := 0.0);
        }(v1, 0);
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v16, real<8> v17, real<8> v18){
            decl ref<real<8>> v23 = ( var(v17));
            decl ref<real<8>> v24 = ( var(v18));
            {
                decl ref<real<8>> v19 = ( var(0.0));
                decl ref<int<4>> v20 = ( var(0));
                decl ref<int<4>> v21 = ( var(0));
                decl ref<int<4>> v22 = ( var(0));
                (v22 := (int.lshift(1, 16)/4));
                {
                    for(decl int<4> v45 = 0 .. int.lshift(1, 20) : 1) {
                        (v19 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v25, ref<array<real<8>,1>> v26, ref<array<real<8>,1>> v27){
                            decl ref<real<8>> v28 = ( var(0.0));
                            decl ref<real<8>> v29 = ( var(0.0));
                            decl ref<real<8>> v30 = ( var(0.0));
                            decl ref<real<8>> v31 = ( var(0.0));
                            decl ref<real<8>> v32 = ( var(0.0));
                            decl ref<real<8>> v33 = ( var(0.0));
                            decl ref<real<8>> v34 = ( var(0.0));
                            decl ref<real<8>> v35 = ( var(0.0));
                            decl ref<real<8>> v36 = ( var(0.0));
                            decl ref<int<4>> v37 = ( var(0));
                            decl ref<int<4>> v38 = ( var(0));
                            if((( *composite.ref.elem(v25, KS, type<int<4>>))==0)) {
                                (composite.ref.elem(v25, R23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, R46, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, T23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, T46, type<real<8>>) := 1.0);
                                {
                                    for(decl int<4> v40 = 1 .. (23+1) : 1) {
                                        (composite.ref.elem(v25, R23, type<real<8>>) := (0.50*( *composite.ref.elem(v25, R23, type<real<8>>))));
                                        (composite.ref.elem(v25, T23, type<real<8>>) := (2.0*( *composite.ref.elem(v25, T23, type<real<8>>))));
                                    };
                                    (v37 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((23+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                {
                                    for(decl int<4> v42 = 1 .. (46+1) : 1) {
                                        (composite.ref.elem(v25, R46, type<real<8>>) := (0.50*( *composite.ref.elem(v25, R46, type<real<8>>))));
                                        (composite.ref.elem(v25, T46, type<real<8>>) := (2.0*( *composite.ref.elem(v25, T46, type<real<8>>))));
                                    };
                                    (v37 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((46+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                (composite.ref.elem(v25, KS, type<int<4>>) := 1);
                            } else { };
                            (v28 := (( *composite.ref.elem(v25, R23, type<real<8>>))*( *array.ref.elem.1D(v27, 0))));
                            (v38 := real.to.int(( *v28), 4));
                            (v32 := CAST<real<8>>(( *v38)));
                            (v33 := (( *array.ref.elem.1D(v27, 0))-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v32))));
                            (v28 := (( *composite.ref.elem(v25, R23, type<real<8>>))*( *array.ref.elem.1D(v26, 0))));
                            (v38 := real.to.int(( *v28), 4));
                            (v34 := CAST<real<8>>(( *v38)));
                            (v35 := (( *array.ref.elem.1D(v26, 0))-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v34))));
                            (v28 := ((( *v32)*( *v35))+(( *v33)*( *v34))));
                            (v38 := CAST<int<4>>((( *composite.ref.elem(v25, R23, type<real<8>>))*( *v28))));
                            (v29 := CAST<real<8>>(( *v38)));
                            (v36 := (( *v28)-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v29))));
                            (v30 := ((( *composite.ref.elem(v25, T23, type<real<8>>))*( *v36))+(( *v33)*( *v35))));
                            (v38 := CAST<int<4>>((( *composite.ref.elem(v25, R46, type<real<8>>))*( *v30))));
                            (v31 := CAST<real<8>>(( *v38)));
                            (array.ref.elem.1D(v26, 0) := (( *v30)-(( *composite.ref.elem(v25, T46, type<real<8>>))*( *v31))));
                            return (( *composite.ref.elem(v25, R46, type<real<8>>))*( *array.ref.elem.1D(v26, 0)));
                        }(v16, scalar.to.array(v23), scalar.to.array(v24)));
                        (v19 := (( *v19)+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v25, ref<array<real<8>,1>> v26, ref<array<real<8>,1>> v27){
                            decl ref<real<8>> v28 = ( var(0.0));
                            decl ref<real<8>> v29 = ( var(0.0));
                            decl ref<real<8>> v30 = ( var(0.0));
                            decl ref<real<8>> v31 = ( var(0.0));
                            decl ref<real<8>> v32 = ( var(0.0));
                            decl ref<real<8>> v33 = ( var(0.0));
                            decl ref<real<8>> v34 = ( var(0.0));
                            decl ref<real<8>> v35 = ( var(0.0));
                            decl ref<real<8>> v36 = ( var(0.0));
                            decl ref<int<4>> v37 = ( var(0));
                            decl ref<int<4>> v38 = ( var(0));
                            if((( *composite.ref.elem(v25, KS, type<int<4>>))==0)) {
                                (composite.ref.elem(v25, R23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, R46, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, T23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, T46, type<real<8>>) := 1.0);
                                {
                                    for(decl int<4> v40 = 1 .. (23+1) : 1) {
                                        (composite.ref.elem(v25, R23, type<real<8>>) := (0.50*( *composite.ref.elem(v25, R23, type<real<8>>))));
                                        (composite.ref.elem(v25, T23, type<real<8>>) := (2.0*( *composite.ref.elem(v25, T23, type<real<8>>))));
                                    };
                                    (v37 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((23+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                {
                                    for(decl int<4> v42 = 1 .. (46+1) : 1) {
                                        (composite.ref.elem(v25, R46, type<real<8>>) := (0.50*( *composite.ref.elem(v25, R46, type<real<8>>))));
                                        (composite.ref.elem(v25, T46, type<real<8>>) := (2.0*( *composite.ref.elem(v25, T46, type<real<8>>))));
                                    };
                                    (v37 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((46+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                (composite.ref.elem(v25, KS, type<int<4>>) := 1);
                            } else { };
                            (v28 := (( *composite.ref.elem(v25, R23, type<real<8>>))*( *array.ref.elem.1D(v27, 0))));
                            (v38 := real.to.int(( *v28), 4));
                            (v32 := CAST<real<8>>(( *v38)));
                            (v33 := (( *array.ref.elem.1D(v27, 0))-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v32))));
                            (v28 := (( *composite.ref.elem(v25, R23, type<real<8>>))*( *array.ref.elem.1D(v26, 0))));
                            (v38 := real.to.int(( *v28), 4));
                            (v34 := CAST<real<8>>(( *v38)));
                            (v35 := (( *array.ref.elem.1D(v26, 0))-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v34))));
                            (v28 := ((( *v32)*( *v35))+(( *v33)*( *v34))));
                            (v38 := CAST<int<4>>((( *composite.ref.elem(v25, R23, type<real<8>>))*( *v28))));
                            (v29 := CAST<real<8>>(( *v38)));
                            (v36 := (( *v28)-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v29))));
                            (v30 := ((( *composite.ref.elem(v25, T23, type<real<8>>))*( *v36))+(( *v33)*( *v35))));
                            (v38 := CAST<int<4>>((( *composite.ref.elem(v25, R46, type<real<8>>))*( *v30))));
                            (v31 := CAST<real<8>>(( *v38)));
                            (array.ref.elem.1D(v26, 0) := (( *v30)-(( *composite.ref.elem(v25, T46, type<real<8>>))*( *v31))));
                            return (( *composite.ref.elem(v25, R46, type<real<8>>))*( *array.ref.elem.1D(v26, 0)));
                        }(v16, scalar.to.array(v23), scalar.to.array(v24))));
                        (v19 := (( *v19)+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v25, ref<array<real<8>,1>> v26, ref<array<real<8>,1>> v27){
                            decl ref<real<8>> v28 = ( var(0.0));
                            decl ref<real<8>> v29 = ( var(0.0));
                            decl ref<real<8>> v30 = ( var(0.0));
                            decl ref<real<8>> v31 = ( var(0.0));
                            decl ref<real<8>> v32 = ( var(0.0));
                            decl ref<real<8>> v33 = ( var(0.0));
                            decl ref<real<8>> v34 = ( var(0.0));
                            decl ref<real<8>> v35 = ( var(0.0));
                            decl ref<real<8>> v36 = ( var(0.0));
                            decl ref<int<4>> v37 = ( var(0));
                            decl ref<int<4>> v38 = ( var(0));
                            if((( *composite.ref.elem(v25, KS, type<int<4>>))==0)) {
                                (composite.ref.elem(v25, R23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, R46, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, T23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, T46, type<real<8>>) := 1.0);
                                {
                                    for(decl int<4> v40 = 1 .. (23+1) : 1) {
                                        (composite.ref.elem(v25, R23, type<real<8>>) := (0.50*( *composite.ref.elem(v25, R23, type<real<8>>))));
                                        (composite.ref.elem(v25, T23, type<real<8>>) := (2.0*( *composite.ref.elem(v25, T23, type<real<8>>))));
                                    };
                                    (v37 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((23+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                {
                                    for(decl int<4> v42 = 1 .. (46+1) : 1) {
                                        (composite.ref.elem(v25, R46, type<real<8>>) := (0.50*( *composite.ref.elem(v25, R46, type<real<8>>))));
                                        (composite.ref.elem(v25, T46, type<real<8>>) := (2.0*( *composite.ref.elem(v25, T46, type<real<8>>))));
                                    };
                                    (v37 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((46+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                (composite.ref.elem(v25, KS, type<int<4>>) := 1);
                            } else { };
                            (v28 := (( *composite.ref.elem(v25, R23, type<real<8>>))*( *array.ref.elem.1D(v27, 0))));
                            (v38 := real.to.int(( *v28), 4));
                            (v32 := CAST<real<8>>(( *v38)));
                            (v33 := (( *array.ref.elem.1D(v27, 0))-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v32))));
                            (v28 := (( *composite.ref.elem(v25, R23, type<real<8>>))*( *array.ref.elem.1D(v26, 0))));
                            (v38 := real.to.int(( *v28), 4));
                            (v34 := CAST<real<8>>(( *v38)));
                            (v35 := (( *array.ref.elem.1D(v26, 0))-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v34))));
                            (v28 := ((( *v32)*( *v35))+(( *v33)*( *v34))));
                            (v38 := CAST<int<4>>((( *composite.ref.elem(v25, R23, type<real<8>>))*( *v28))));
                            (v29 := CAST<real<8>>(( *v38)));
                            (v36 := (( *v28)-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v29))));
                            (v30 := ((( *composite.ref.elem(v25, T23, type<real<8>>))*( *v36))+(( *v33)*( *v35))));
                            (v38 := CAST<int<4>>((( *composite.ref.elem(v25, R46, type<real<8>>))*( *v30))));
                            (v31 := CAST<real<8>>(( *v38)));
                            (array.ref.elem.1D(v26, 0) := (( *v30)-(( *composite.ref.elem(v25, T46, type<real<8>>))*( *v31))));
                            return (( *composite.ref.elem(v25, R46, type<real<8>>))*( *array.ref.elem.1D(v26, 0)));
                        }(v16, scalar.to.array(v23), scalar.to.array(v24))));
                        (v19 := (( *v19)+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v25, ref<array<real<8>,1>> v26, ref<array<real<8>,1>> v27){
                            decl ref<real<8>> v28 = ( var(0.0));
                            decl ref<real<8>> v29 = ( var(0.0));
                            decl ref<real<8>> v30 = ( var(0.0));
                            decl ref<real<8>> v31 = ( var(0.0));
                            decl ref<real<8>> v32 = ( var(0.0));
                            decl ref<real<8>> v33 = ( var(0.0));
                            decl ref<real<8>> v34 = ( var(0.0));
                            decl ref<real<8>> v35 = ( var(0.0));
                            decl ref<real<8>> v36 = ( var(0.0));
                            decl ref<int<4>> v37 = ( var(0));
                            decl ref<int<4>> v38 = ( var(0));
                            if((( *composite.ref.elem(v25, KS, type<int<4>>))==0)) {
                                (composite.ref.elem(v25, R23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, R46, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, T23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v25, T46, type<real<8>>) := 1.0);
                                {
                                    for(decl int<4> v40 = 1 .. (23+1) : 1) {
                                        (composite.ref.elem(v25, R23, type<real<8>>) := (0.50*( *composite.ref.elem(v25, R23, type<real<8>>))));
                                        (composite.ref.elem(v25, T23, type<real<8>>) := (2.0*( *composite.ref.elem(v25, T23, type<real<8>>))));
                                    };
                                    (v37 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((23+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                {
                                    for(decl int<4> v42 = 1 .. (46+1) : 1) {
                                        (composite.ref.elem(v25, R46, type<real<8>>) := (0.50*( *composite.ref.elem(v25, R46, type<real<8>>))));
                                        (composite.ref.elem(v25, T46, type<real<8>>) := (2.0*( *composite.ref.elem(v25, T46, type<real<8>>))));
                                    };
                                    (v37 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((46+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                (composite.ref.elem(v25, KS, type<int<4>>) := 1);
                            } else { };
                            (v28 := (( *composite.ref.elem(v25, R23, type<real<8>>))*( *array.ref.elem.1D(v27, 0))));
                            (v38 := real.to.int(( *v28), 4));
                            (v32 := CAST<real<8>>(( *v38)));
                            (v33 := (( *array.ref.elem.1D(v27, 0))-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v32))));
                            (v28 := (( *composite.ref.elem(v25, R23, type<real<8>>))*( *array.ref.elem.1D(v26, 0))));
                            (v38 := real.to.int(( *v28), 4));
                            (v34 := CAST<real<8>>(( *v38)));
                            (v35 := (( *array.ref.elem.1D(v26, 0))-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v34))));
                            (v28 := ((( *v32)*( *v35))+(( *v33)*( *v34))));
                            (v38 := CAST<int<4>>((( *composite.ref.elem(v25, R23, type<real<8>>))*( *v28))));
                            (v29 := CAST<real<8>>(( *v38)));
                            (v36 := (( *v28)-(( *composite.ref.elem(v25, T23, type<real<8>>))*( *v29))));
                            (v30 := ((( *composite.ref.elem(v25, T23, type<real<8>>))*( *v36))+(( *v33)*( *v35))));
                            (v38 := CAST<int<4>>((( *composite.ref.elem(v25, R46, type<real<8>>))*( *v30))));
                            (v31 := CAST<real<8>>(( *v38)));
                            (array.ref.elem.1D(v26, 0) := (( *v30)-(( *composite.ref.elem(v25, T46, type<real<8>>))*( *v31))));
                            return (( *composite.ref.elem(v25, R46, type<real<8>>))*( *array.ref.elem.1D(v26, 0)));
                        }(v16, scalar.to.array(v23), scalar.to.array(v24))));
                        (vector.ref.elem(composite.ref.elem(v16, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v45)) := CAST<int<4>>((CAST<real<8>>(( *v22))*( *v19))));
                    };
                    (v20 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-0))/CAST<real<8>>(1))))*1)));
                };
            };
        }(v1, 314159265.00, 1220703125.00);
        <m id=1>fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, int<4> v48){
            decl ref<int<4>> v49 = ( var(0));
            decl ref<int<4>> v50 = ( var(0));
            decl ref<int<4>> v51 = ( var(0));
            decl ref<int<4>> v52 = ( var(0));
            decl ref<int<4>> v53 = ( var(0));
            decl ref<int<4>> v54 = ( var((16-10)));
            decl ref<int<4>> v55 = ( var(0));
            decl ref<int<4>> v56 = ( var(0));
            decl ref<int<4>> v57 = ( var(0));
            decl ref<vector<int<4>,65536>> v58 = ( var(undefined(type<vector<int<4>,65536>>)));
            <m id=1>{
                (vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v48)) := v48);
                (vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>((v48+10))) := (int.lshift(1, 16)-v48));
                {
                    for(decl int<4> v60 = 0 .. 5 : 1) 
                        (vector.ref.elem(composite.ref.elem(v47, partial_verify_vals, type<vector<int<4>,5>>), CAST<uint<4>>(v60)) := ( *vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v47, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v60)))))))
                    ;
                    (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
                };
                {
                    for(decl int<4> v62 = 0 .. int.lshift(1, 16) : 1) 
                        (vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v62)) := 0)
                    ;
                    (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                };
            }</m>;
            {
                <m id=2>for(decl int<4> v64 = 0 .. int.lshift(1, 16) : 1) 
                    (vector.ref.elem(v58, CAST<uint<4>>(v64)) := 0)
                </m>;
                (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
            };
            {
                <m id=3>for(decl int<4> v66 = 0 .. int.lshift(1, 20) : 1) {
                    (vector.ref.elem(composite.ref.elem(v47, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v66)) := ( *vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v66))));
                    int.postInc(vector.ref.elem(v58, CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v47, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v66))))));
                }</m>;
                (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-0))/CAST<real<8>>(1))))*1)));
            };
            {
                for(decl int<4> v68 = 0 .. (int.lshift(1, 16)-1) : 1) 
                    (vector.ref.elem(v58, CAST<uint<4>>((v68+1))) := (( *vector.ref.elem(v58, CAST<uint<4>>((v68+1))))+( *vector.ref.elem(v58, CAST<uint<4>>(v68)))))
                ;
                (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>(((int.lshift(1, 16)-1)-0))/CAST<real<8>>(1))))*1)));
            };
            <m id=4>{
                {
                    for(decl int<4> v70 = 0 .. int.lshift(1, 16) : 1) 
                        (vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v70)) := (( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v70)))+( *vector.ref.elem(v58, CAST<uint<4>>(v70)))))
                    ;
                    (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                };
            }</m>;
            <m id=5>{
                {
                    for(decl int<4> v79 = 0 .. 5 : 1) {
                        (v51 := ( *vector.ref.elem(composite.ref.elem(v47, partial_verify_vals, type<vector<int<4>,5>>), CAST<uint<4>>(v79))));
                        if(((0<=( *v51))&&bind(){fun(ref<int<4>> v76)return (( *v76)<=(int.lshift(1, 20)-1))(v51)})) {
                            decl int<4> v71 = CAST<int<4>>('W');
                            switch(v71) {
                                case 'S': if((v79<=2)) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+v48))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-v48))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                case 'W': if((v79<2)) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+(v48-2)))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-v48))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                case 'A': if((v79<=2)) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+(v48-1)))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-(v48-1)))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                case 'B': if((((v79==1)||bind(){fun(ref<int<4>> v72)return (( *v72)==2)(( var(v79)))})||bind(){fun(ref<int<4>> v74)return (( *v74)==4)(( var(v79)))})) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+v48))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-v48))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                case 'C': if((v79<=2)) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+v48))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-v48))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                    } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                }
                                default: { }
                            };
                        } else { };
                    };
                    (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
                };
                if((v48==10)) (composite.ref.elem(v47, key_buff_ptr_global, type<array<int<4>,1>>) := vector.to.array(( *composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>)))) else { };
            }</m>;
        }(v1, 1)</m>;
        (composite.ref.elem(v1, passed_verification, type<int<4>>) := 0);
        if(('W'!='S')) printf(string.as.char.pointer("\n   iteration\n"), varlist.pack(())) else { };
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v81, int<4> v82){
            (vector.ref.elem(composite.ref.elem(v81, start, type<vector<real<8>,64>>), CAST<uint<4>>(v82)) := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v83){
                decl ref<real<8>> v84 = ( var(0.0));
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v85, ref<array<real<8>,1>> v86){
                    decl ref<struct<tv_sec:int<8>,tv_usec:int<8>>> v87 = ( var(undefined(type<struct<tv_sec:int<8>,tv_usec:int<8>>>)));
                    gettimeofday(scalar.to.array(v87), ( var(get.null(type<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>>))));
                    if((( *composite.ref.elem(v85, sec, type<int<4>>))<0)) (composite.ref.elem(v85, sec, type<int<4>>) := CAST<int<4>>(( *composite.ref.elem(v87, tv_sec, type<int<8>>)))) else { };
                    (array.ref.elem.1D(v86, 0) := (CAST<real<8>>((( *composite.ref.elem(v87, tv_sec, type<int<8>>))-CAST<int<8>>(( *composite.ref.elem(v85, sec, type<int<4>>)))))+(1.0e-6*CAST<real<8>>(( *composite.ref.elem(v87, tv_usec, type<int<8>>))))));
                }(v83, scalar.to.array(v84));
                return ( *v84);
            }(v81));
        }(v1, 0);
        {
            <m id=7>for(decl int<4> v92 = 1 .. (10+1) : 1) {
                <m id=6>if(('W'!='S')) printf(string.as.char.pointer("        %d\n"), varlist.pack((v92))) else { }</m>;
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, int<4> v48){
                    decl ref<int<4>> v49 = ( var(0));
                    decl ref<int<4>> v50 = ( var(0));
                    decl ref<int<4>> v51 = ( var(0));
                    decl ref<int<4>> v52 = ( var(0));
                    decl ref<int<4>> v53 = ( var(0));
                    decl ref<int<4>> v54 = ( var((16-10)));
                    decl ref<int<4>> v55 = ( var(0));
                    decl ref<int<4>> v56 = ( var(0));
                    decl ref<int<4>> v57 = ( var(0));
                    decl ref<vector<int<4>,65536>> v58 = ( var(undefined(type<vector<int<4>,65536>>)));
                    <m id=1>{
                        (vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v48)) := v48);
                        (vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>((v48+10))) := (int.lshift(1, 16)-v48));
                        {
                            for(decl int<4> v60 = 0 .. 5 : 1) 
                                (vector.ref.elem(composite.ref.elem(v47, partial_verify_vals, type<vector<int<4>,5>>), CAST<uint<4>>(v60)) := ( *vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v47, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v60)))))))
                            ;
                            (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
                        };
                        {
                            for(decl int<4> v62 = 0 .. int.lshift(1, 16) : 1) 
                                (vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v62)) := 0)
                            ;
                            (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                        };
                    }</m>;
                    {
                        <m id=2>for(decl int<4> v64 = 0 .. int.lshift(1, 16) : 1) 
                            (vector.ref.elem(v58, CAST<uint<4>>(v64)) := 0)
                        </m>;
                        (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                    };
                    {
                        <m id=3>for(decl int<4> v66 = 0 .. int.lshift(1, 20) : 1) {
                            (vector.ref.elem(composite.ref.elem(v47, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v66)) := ( *vector.ref.elem(composite.ref.elem(v47, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v66))));
                            int.postInc(vector.ref.elem(v58, CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v47, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v66))))));
                        }</m>;
                        (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-0))/CAST<real<8>>(1))))*1)));
                    };
                    {
                        for(decl int<4> v68 = 0 .. (int.lshift(1, 16)-1) : 1) 
                            (vector.ref.elem(v58, CAST<uint<4>>((v68+1))) := (( *vector.ref.elem(v58, CAST<uint<4>>((v68+1))))+( *vector.ref.elem(v58, CAST<uint<4>>(v68)))))
                        ;
                        (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>(((int.lshift(1, 16)-1)-0))/CAST<real<8>>(1))))*1)));
                    };
                    <m id=4>{
                        {
                            for(decl int<4> v70 = 0 .. int.lshift(1, 16) : 1) 
                                (vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v70)) := (( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v70)))+( *vector.ref.elem(v58, CAST<uint<4>>(v70)))))
                            ;
                            (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                        };
                    }</m>;
                    <m id=5>{
                        {
                            for(decl int<4> v79 = 0 .. 5 : 1) {
                                (v51 := ( *vector.ref.elem(composite.ref.elem(v47, partial_verify_vals, type<vector<int<4>,5>>), CAST<uint<4>>(v79))));
                                if(((0<=( *v51))&&bind(){fun(ref<int<4>> v76)return (( *v76)<=(int.lshift(1, 20)-1))(v51)})) {
                                    decl int<4> v71 = CAST<int<4>>('W');
                                    switch(v71) {
                                        case 'S': if((v79<=2)) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+v48))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-v48))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        case 'W': if((v79<2)) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+(v48-2)))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-v48))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        case 'A': if((v79<=2)) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+(v48-1)))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-(v48-1)))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        case 'B': if((((v79==1)||bind(){fun(ref<int<4>> v72)return (( *v72)==2)(( var(v79)))})||bind(){fun(ref<int<4>> v74)return (( *v74)==4)(( var(v79)))})) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+v48))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-v48))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        case 'C': if((v79<=2)) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))+v48))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v51)-1)))), (( *vector.ref.elem(composite.ref.elem(v47, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v79)))-v48))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v48, v79)));
                                            } else int.postInc(composite.ref.elem(v47, passed_verification, type<int<4>>));
                                        }
                                        default: { }
                                    };
                                } else { };
                            };
                            (v49 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
                        };
                        if((v48==10)) (composite.ref.elem(v47, key_buff_ptr_global, type<array<int<4>,1>>) := vector.to.array(( *composite.ref.elem(v47, key_buff1, type<vector<int<4>,1048576>>)))) else { };
                    }</m>;
                }(v1, v92);
            }</m>;
            (v5 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((10+1)-1))/CAST<real<8>>(1))))*1)));
        };
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v93, int<4> v94){
            decl ref<real<8>> v95 = ( var(0.0));
            decl ref<real<8>> v96 = ( var(0.0));
            (v96 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v83){
                decl ref<real<8>> v84 = ( var(0.0));
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v85, ref<array<real<8>,1>> v86){
                    decl ref<struct<tv_sec:int<8>,tv_usec:int<8>>> v87 = ( var(undefined(type<struct<tv_sec:int<8>,tv_usec:int<8>>>)));
                    gettimeofday(scalar.to.array(v87), ( var(get.null(type<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>>))));
                    if((( *composite.ref.elem(v85, sec, type<int<4>>))<0)) (composite.ref.elem(v85, sec, type<int<4>>) := CAST<int<4>>(( *composite.ref.elem(v87, tv_sec, type<int<8>>)))) else { };
                    (array.ref.elem.1D(v86, 0) := (CAST<real<8>>((( *composite.ref.elem(v87, tv_sec, type<int<8>>))-CAST<int<8>>(( *composite.ref.elem(v85, sec, type<int<4>>)))))+(1.0e-6*CAST<real<8>>(( *composite.ref.elem(v87, tv_usec, type<int<8>>))))));
                }(v83, scalar.to.array(v84));
                return ( *v84);
            }(v93));
            (v95 := (( *v96)-( *vector.ref.elem(composite.ref.elem(v93, start, type<vector<real<8>,64>>), CAST<uint<4>>(v94)))));
            (vector.ref.elem(composite.ref.elem(v93, elapsed, type<vector<real<8>,64>>), CAST<uint<4>>(v94)) := (( *vector.ref.elem(composite.ref.elem(v93, elapsed, type<vector<real<8>,64>>), CAST<uint<4>>(v94)))+( *v95)));
        }(v1, 0);
        (v8 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v98, int<4> v99){
            return ( *vector.ref.elem(composite.ref.elem(v98, elapsed, type<vector<real<8>,64>>), CAST<uint<4>>(v99)));
        }(v1, 0));
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:array<int<4>,1>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v101){
            decl ref<int<4>> v102 = ( var(0));
            decl ref<int<4>> v103 = ( var(0));
            decl ref<int<4>> v104 = ( var(0));
            decl ref<int<4>> v105 = ( var(0));
            decl ref<int<4>> v106 = ( var(0));
            {
                for(decl int<4> v108 = 0 .. int.lshift(1, 20) : 1) 
                    (vector.ref.elem(composite.ref.elem(v101, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(int.preDec(array.ref.elem.1D(composite.ref.elem(v101, key_buff_ptr_global, type<array<int<4>,1>>), CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v101, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v108)))))))) := ( *vector.ref.elem(composite.ref.elem(v101, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v108))))
                ;
                (v102 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-0))/CAST<real<8>>(1))))*1)));
            };
            (v103 := 0);
            {
                for(decl int<4> v110 = 1 .. int.lshift(1, 20) : 1) 
                    if((( *vector.ref.elem(composite.ref.elem(v101, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>((v110-1))))>( *vector.ref.elem(composite.ref.elem(v101, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v110))))) int.postInc(v103) else { }
                ;
                (v102 := (1+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-1))/CAST<real<8>>(1))))*1)));
            };
            if(int.ne(( *v103), 0)) {
                printf(string.as.char.pointer("Full_verify: number of keys out of sort: %d\n"), varlist.pack((( *v103))));
            } else int.postInc(composite.ref.elem(v101, passed_verification, type<int<4>>));
        }(v1);
        if(int.ne(( *composite.ref.elem(v1, passed_verification, type<int<4>>)), ((5*10)+1))) (composite.ref.elem(v1, passed_verification, type<int<4>>) := 0) else { };
        fun(ref<array<char,1>> v112, char v113, int<4> v114, int<4> v115, int<4> v116, int<4> v117, int<4> v118, real<8> v119, real<8> v120, ref<array<char,1>> v121, int<4> v122, ref<array<char,1>> v123, ref<array<char,1>> v124, ref<array<char,1>> v125, ref<array<char,1>> v126, ref<array<char,1>> v127, ref<array<char,1>> v128, ref<array<char,1>> v129, ref<array<char,1>> v130, ref<array<char,1>> v131){
            decl ref<array<char,1>> v132 = string.as.char.pointer("1000");
            printf(string.as.char.pointer("\n\n %s Benchmark Completed\n"), varlist.pack((v112)));
            printf(string.as.char.pointer(" Class           =                        %c\n"), varlist.pack((CAST<int<4>>(v113))));
            if(((v115==0)&&bind(){fun(int<4> v133)return (v133==0)(v116)})) printf(string.as.char.pointer(" Size            =             %12d\n"), varlist.pack((v114))) else printf(string.as.char.pointer(" Size            =              %3dx%3dx%3d\n"), varlist.pack((v114, v115, v116)));
            printf(string.as.char.pointer(" Iterations      =             %12d\n"), varlist.pack((v117)));
            printf(string.as.char.pointer(" Threads         =             %12d\n"), varlist.pack((v118)));
            printf(string.as.char.pointer(" Time in seconds =             %12.2f\n"), varlist.pack((0.0)));
            printf(string.as.char.pointer(" Mop/s total     =             %12.2f\n"), varlist.pack((0.0)));
            printf(string.as.char.pointer(" Operation type  = %24s\n"), varlist.pack((v121)));
            if(int.ne(v122, 0)) printf(string.as.char.pointer(" Verification    =               SUCCESSFUL\n"), varlist.pack(())) else printf(string.as.char.pointer(" Verification    =             UNSUCCESSFUL\n"), varlist.pack(()));
            printf(string.as.char.pointer(" Version         =             %12s\n"), varlist.pack((v123)));
            printf(string.as.char.pointer(" Compile date    =             %12s\n"), varlist.pack((v124)));
            printf(string.as.char.pointer("\n Compile options:\n"), varlist.pack(()));
            printf(string.as.char.pointer("    CC           = %s\n"), varlist.pack((v125)));
            printf(string.as.char.pointer("    CLINK        = %s\n"), varlist.pack((v126)));
            printf(string.as.char.pointer("    C_LIB        = %s\n"), varlist.pack((v127)));
            printf(string.as.char.pointer("    C_INC        = %s\n"), varlist.pack((v128)));
            printf(string.as.char.pointer("    CFLAGS       = %s\n"), varlist.pack((v129)));
            printf(string.as.char.pointer("    CLINKFLAGS   = %s\n"), varlist.pack((v130)));
            printf(string.as.char.pointer("    RAND         = %s\n"), varlist.pack((v131)));
        }(string.as.char.pointer("IS"), 'W', int.lshift(1, 20), 0, 0, 10, ( *v7), ( *v8), ((CAST<real<8>>((10*int.lshift(1, 20)))/( *v8))/1000000.), string.as.char.pointer("keys ranked"), ( *composite.ref.elem(v1, passed_verification, type<int<4>>)), string.as.char.pointer("2.3"), string.as.char.pointer("02 Dec 2010"), string.as.char.pointer("cc"), string.as.char.pointer("cc"), string.as.char.pointer("-lm"), string.as.char.pointer("-I../common"), string.as.char.pointer("-O3 "), string.as.char.pointer("-lm"), string.as.char.pointer("randlc"));
    }

