// -------------- Pretty Print Inspire --------------
// Inspire Program 
//  Entry Point: 
fun(int<4> v123, ref<array<ref<array<char,1>>,1>> v124){
        decl ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v1 =  new(struct{start:=vector.init.uniform(0.0, 64), elapsed:=vector.init.uniform(0.0, 64), sec:=0-1, B_test_index_array:=[41869, 812306, 5102857, 18232239, 26860214], B_test_rank_array:=[33422937, 10244, 59149, 33135281, 99], C_test_index_array:=[44172927, 72999161, 74326391, 129606274, 21736814], C_test_rank_array:=[61147, 882988, 266290, 133997595, 133525895], KS:=0, R23:=0.0, R46:=0.0, key_buff_ptr_global:= var(vector.to.array(vector.init.uniform(0, 1))), passed_verification:=0, key_array:=vector.init.uniform(0, 1048576), key_buff1:=vector.init.uniform(0, 1048576), key_buff2:=vector.init.uniform(0, 1048576), partial_verify_vals:=vector.init.uniform(0, 5), test_index_array:=vector.init.uniform(0, 5), test_rank_array:=vector.init.uniform(0, 5), S_test_index_array:=[48427, 17148, 23627, 62548, 4431], S_test_rank_array:=[0, 18, 346, 64917, 65463], W_test_index_array:=[357773, 934767, 875723, 898999, 404505], W_test_rank_array:=[1249, 11698, 1039987, 1043896, 1048018], A_test_index_array:=[2112377, 662041, 5336171, 3642833, 4250760], A_test_rank_array:=[104, 17523, 123928, 8288932, 8388264], T23:=0.0, T46:=0.0});
        decl ref<int<4>> v125 =  var(0);
        decl ref<int<4>> v126 =  var(0);
        decl ref<int<4>> v127 =  var(0);
        decl ref<int<4>> v128 =  var(1);
        decl ref<real<8>> v129 =  var(0.0);
        decl ref<real<8>> v130 =  var(0.0);
        {
            for(decl int<4> v133 = 0 .. 5 : 1) {
                decl int<4> v131 = 'W';
                switch(v131) {
                    case 'S': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, S_test_index_array, type<vector<int<4>,5>>), v133);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, S_test_rank_array, type<vector<int<4>,5>>), v133);
                    }
                    case 'A': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, A_test_index_array, type<vector<int<4>,5>>), v133);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, A_test_rank_array, type<vector<int<4>,5>>), v133);
                    }
                    case 'W': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, W_test_index_array, type<vector<int<4>,5>>), v133);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, W_test_rank_array, type<vector<int<4>,5>>), v133);
                    }
                    case 'B': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, B_test_index_array, type<vector<int<4>,5>>), v133);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, B_test_rank_array, type<vector<int<4>,5>>), v133);
                    }
                    case 'C': {
                        vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, C_test_index_array, type<vector<int<4>,5>>), v133);
                        vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), v133) := vector.ref.elem(composite.ref.elem(v1, C_test_rank_array, type<vector<int<4>,5>>), v133);
                    }
                    default: { }
                };
            };
            v125 := 0+ceil(5-0/1)*1;
        };
        { };
        printf(string.as.char.pointer("\n\n NAS Parallel Benchmarks 2.3 OpenMP C version - IS Benchmark\n\n"), varlist.pack(()));
        printf(string.as.char.pointer(" Size:  %d  (class %c)\n"), varlist.pack((int.lshift(1, 20), 'W')));
        printf(string.as.char.pointer(" Iterations:   %d\n"), varlist.pack((10)));
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v26, int<4> v27){
            vector.ref.elem(composite.ref.elem(v26, elapsed, type<vector<real<8>,64>>), v27) := 0.0;
        }(v1, 0);
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v66, real<8> v67, real<8> v68){
            decl ref<real<8>> v73 =  var(v67);
            decl ref<real<8>> v74 =  var(v68);
            {
                decl ref<real<8>> v69 =  var(0.0);
                decl ref<int<4>> v70 =  var(0);
                decl ref<int<4>> v71 =  var(0);
                decl ref<int<4>> v72 =  var(0);
                v72 := int.lshift(1, 16)/4;
                {
                    for(decl int<4> v76 = 0 .. int.lshift(1, 20) : 1) {
                        v69 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, ref<array<real<8>,1>> v48, ref<array<real<8>,1>> v49){
                            decl ref<real<8>> v50 =  var(0.0);
                            decl ref<real<8>> v51 =  var(0.0);
                            decl ref<real<8>> v52 =  var(0.0);
                            decl ref<real<8>> v53 =  var(0.0);
                            decl ref<real<8>> v54 =  var(0.0);
                            decl ref<real<8>> v55 =  var(0.0);
                            decl ref<real<8>> v56 =  var(0.0);
                            decl ref<real<8>> v57 =  var(0.0);
                            decl ref<real<8>> v58 =  var(0.0);
                            decl ref<int<4>> v59 =  var(0);
                            decl ref<int<4>> v60 =  var(0);
                            if(composite.ref.elem(v47, KS, type<int<4>>)==0) {
                                composite.ref.elem(v47, R23, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, R46, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, T23, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, T46, type<real<8>>) := 1.0;
                                {
                                    for(decl int<4> v62 = 1 .. 23+1 : 1) {
                                        composite.ref.elem(v47, R23, type<real<8>>) := 0.50*composite.ref.elem(v47, R23, type<real<8>>);
                                        composite.ref.elem(v47, T23, type<real<8>>) := 2.0*composite.ref.elem(v47, T23, type<real<8>>);
                                    };
                                    v59 := 1+ceil(23+1-1/1)*1;
                                };
                                {
                                    for(decl int<4> v64 = 1 .. 46+1 : 1) {
                                        composite.ref.elem(v47, R46, type<real<8>>) := 0.50*composite.ref.elem(v47, R46, type<real<8>>);
                                        composite.ref.elem(v47, T46, type<real<8>>) := 2.0*composite.ref.elem(v47, T46, type<real<8>>);
                                    };
                                    v59 := 1+ceil(46+1-1/1)*1;
                                };
                                composite.ref.elem(v47, KS, type<int<4>>) := 1;
                            } else { };
                            v50 := composite.ref.elem(v47, R23, type<real<8>>)*array.ref.elem.1D(v49, 0);
                            v60 := v50;
                            v54 := v60;
                            v55 := array.ref.elem.1D(v49, 0)-composite.ref.elem(v47, T23, type<real<8>>)*v54;
                            v50 := composite.ref.elem(v47, R23, type<real<8>>)*array.ref.elem.1D(v48, 0);
                            v60 := v50;
                            v56 := v60;
                            v57 := array.ref.elem.1D(v48, 0)-composite.ref.elem(v47, T23, type<real<8>>)*v56;
                            v50 := v54*v57+v55*v56;
                            v60 := composite.ref.elem(v47, R23, type<real<8>>)*v50;
                            v51 := v60;
                            v58 := v50-composite.ref.elem(v47, T23, type<real<8>>)*v51;
                            v52 := composite.ref.elem(v47, T23, type<real<8>>)*v58+v55*v57;
                            v60 := composite.ref.elem(v47, R46, type<real<8>>)*v52;
                            v53 := v60;
                            array.ref.elem.1D(v48, 0) := v52-composite.ref.elem(v47, T46, type<real<8>>)*v53;
                            return composite.ref.elem(v47, R46, type<real<8>>)*array.ref.elem.1D(v48, 0);
                        }(v66, scalar.to.array(v73), scalar.to.array(v74));
                        v69 := v69+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, ref<array<real<8>,1>> v48, ref<array<real<8>,1>> v49){
                            decl ref<real<8>> v50 =  var(0.0);
                            decl ref<real<8>> v51 =  var(0.0);
                            decl ref<real<8>> v52 =  var(0.0);
                            decl ref<real<8>> v53 =  var(0.0);
                            decl ref<real<8>> v54 =  var(0.0);
                            decl ref<real<8>> v55 =  var(0.0);
                            decl ref<real<8>> v56 =  var(0.0);
                            decl ref<real<8>> v57 =  var(0.0);
                            decl ref<real<8>> v58 =  var(0.0);
                            decl ref<int<4>> v59 =  var(0);
                            decl ref<int<4>> v60 =  var(0);
                            if(composite.ref.elem(v47, KS, type<int<4>>)==0) {
                                composite.ref.elem(v47, R23, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, R46, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, T23, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, T46, type<real<8>>) := 1.0;
                                {
                                    for(decl int<4> v62 = 1 .. 23+1 : 1) {
                                        composite.ref.elem(v47, R23, type<real<8>>) := 0.50*composite.ref.elem(v47, R23, type<real<8>>);
                                        composite.ref.elem(v47, T23, type<real<8>>) := 2.0*composite.ref.elem(v47, T23, type<real<8>>);
                                    };
                                    v59 := 1+ceil(23+1-1/1)*1;
                                };
                                {
                                    for(decl int<4> v64 = 1 .. 46+1 : 1) {
                                        composite.ref.elem(v47, R46, type<real<8>>) := 0.50*composite.ref.elem(v47, R46, type<real<8>>);
                                        composite.ref.elem(v47, T46, type<real<8>>) := 2.0*composite.ref.elem(v47, T46, type<real<8>>);
                                    };
                                    v59 := 1+ceil(46+1-1/1)*1;
                                };
                                composite.ref.elem(v47, KS, type<int<4>>) := 1;
                            } else { };
                            v50 := composite.ref.elem(v47, R23, type<real<8>>)*array.ref.elem.1D(v49, 0);
                            v60 := v50;
                            v54 := v60;
                            v55 := array.ref.elem.1D(v49, 0)-composite.ref.elem(v47, T23, type<real<8>>)*v54;
                            v50 := composite.ref.elem(v47, R23, type<real<8>>)*array.ref.elem.1D(v48, 0);
                            v60 := v50;
                            v56 := v60;
                            v57 := array.ref.elem.1D(v48, 0)-composite.ref.elem(v47, T23, type<real<8>>)*v56;
                            v50 := v54*v57+v55*v56;
                            v60 := composite.ref.elem(v47, R23, type<real<8>>)*v50;
                            v51 := v60;
                            v58 := v50-composite.ref.elem(v47, T23, type<real<8>>)*v51;
                            v52 := composite.ref.elem(v47, T23, type<real<8>>)*v58+v55*v57;
                            v60 := composite.ref.elem(v47, R46, type<real<8>>)*v52;
                            v53 := v60;
                            array.ref.elem.1D(v48, 0) := v52-composite.ref.elem(v47, T46, type<real<8>>)*v53;
                            return composite.ref.elem(v47, R46, type<real<8>>)*array.ref.elem.1D(v48, 0);
                        }(v66, scalar.to.array(v73), scalar.to.array(v74));
                        v69 := v69+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, ref<array<real<8>,1>> v48, ref<array<real<8>,1>> v49){
                            decl ref<real<8>> v50 =  var(0.0);
                            decl ref<real<8>> v51 =  var(0.0);
                            decl ref<real<8>> v52 =  var(0.0);
                            decl ref<real<8>> v53 =  var(0.0);
                            decl ref<real<8>> v54 =  var(0.0);
                            decl ref<real<8>> v55 =  var(0.0);
                            decl ref<real<8>> v56 =  var(0.0);
                            decl ref<real<8>> v57 =  var(0.0);
                            decl ref<real<8>> v58 =  var(0.0);
                            decl ref<int<4>> v59 =  var(0);
                            decl ref<int<4>> v60 =  var(0);
                            if(composite.ref.elem(v47, KS, type<int<4>>)==0) {
                                composite.ref.elem(v47, R23, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, R46, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, T23, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, T46, type<real<8>>) := 1.0;
                                {
                                    for(decl int<4> v62 = 1 .. 23+1 : 1) {
                                        composite.ref.elem(v47, R23, type<real<8>>) := 0.50*composite.ref.elem(v47, R23, type<real<8>>);
                                        composite.ref.elem(v47, T23, type<real<8>>) := 2.0*composite.ref.elem(v47, T23, type<real<8>>);
                                    };
                                    v59 := 1+ceil(23+1-1/1)*1;
                                };
                                {
                                    for(decl int<4> v64 = 1 .. 46+1 : 1) {
                                        composite.ref.elem(v47, R46, type<real<8>>) := 0.50*composite.ref.elem(v47, R46, type<real<8>>);
                                        composite.ref.elem(v47, T46, type<real<8>>) := 2.0*composite.ref.elem(v47, T46, type<real<8>>);
                                    };
                                    v59 := 1+ceil(46+1-1/1)*1;
                                };
                                composite.ref.elem(v47, KS, type<int<4>>) := 1;
                            } else { };
                            v50 := composite.ref.elem(v47, R23, type<real<8>>)*array.ref.elem.1D(v49, 0);
                            v60 := v50;
                            v54 := v60;
                            v55 := array.ref.elem.1D(v49, 0)-composite.ref.elem(v47, T23, type<real<8>>)*v54;
                            v50 := composite.ref.elem(v47, R23, type<real<8>>)*array.ref.elem.1D(v48, 0);
                            v60 := v50;
                            v56 := v60;
                            v57 := array.ref.elem.1D(v48, 0)-composite.ref.elem(v47, T23, type<real<8>>)*v56;
                            v50 := v54*v57+v55*v56;
                            v60 := composite.ref.elem(v47, R23, type<real<8>>)*v50;
                            v51 := v60;
                            v58 := v50-composite.ref.elem(v47, T23, type<real<8>>)*v51;
                            v52 := composite.ref.elem(v47, T23, type<real<8>>)*v58+v55*v57;
                            v60 := composite.ref.elem(v47, R46, type<real<8>>)*v52;
                            v53 := v60;
                            array.ref.elem.1D(v48, 0) := v52-composite.ref.elem(v47, T46, type<real<8>>)*v53;
                            return composite.ref.elem(v47, R46, type<real<8>>)*array.ref.elem.1D(v48, 0);
                        }(v66, scalar.to.array(v73), scalar.to.array(v74));
                        v69 := v69+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, ref<array<real<8>,1>> v48, ref<array<real<8>,1>> v49){
                            decl ref<real<8>> v50 =  var(0.0);
                            decl ref<real<8>> v51 =  var(0.0);
                            decl ref<real<8>> v52 =  var(0.0);
                            decl ref<real<8>> v53 =  var(0.0);
                            decl ref<real<8>> v54 =  var(0.0);
                            decl ref<real<8>> v55 =  var(0.0);
                            decl ref<real<8>> v56 =  var(0.0);
                            decl ref<real<8>> v57 =  var(0.0);
                            decl ref<real<8>> v58 =  var(0.0);
                            decl ref<int<4>> v59 =  var(0);
                            decl ref<int<4>> v60 =  var(0);
                            if(composite.ref.elem(v47, KS, type<int<4>>)==0) {
                                composite.ref.elem(v47, R23, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, R46, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, T23, type<real<8>>) := 1.0;
                                composite.ref.elem(v47, T46, type<real<8>>) := 1.0;
                                {
                                    for(decl int<4> v62 = 1 .. 23+1 : 1) {
                                        composite.ref.elem(v47, R23, type<real<8>>) := 0.50*composite.ref.elem(v47, R23, type<real<8>>);
                                        composite.ref.elem(v47, T23, type<real<8>>) := 2.0*composite.ref.elem(v47, T23, type<real<8>>);
                                    };
                                    v59 := 1+ceil(23+1-1/1)*1;
                                };
                                {
                                    for(decl int<4> v64 = 1 .. 46+1 : 1) {
                                        composite.ref.elem(v47, R46, type<real<8>>) := 0.50*composite.ref.elem(v47, R46, type<real<8>>);
                                        composite.ref.elem(v47, T46, type<real<8>>) := 2.0*composite.ref.elem(v47, T46, type<real<8>>);
                                    };
                                    v59 := 1+ceil(46+1-1/1)*1;
                                };
                                composite.ref.elem(v47, KS, type<int<4>>) := 1;
                            } else { };
                            v50 := composite.ref.elem(v47, R23, type<real<8>>)*array.ref.elem.1D(v49, 0);
                            v60 := v50;
                            v54 := v60;
                            v55 := array.ref.elem.1D(v49, 0)-composite.ref.elem(v47, T23, type<real<8>>)*v54;
                            v50 := composite.ref.elem(v47, R23, type<real<8>>)*array.ref.elem.1D(v48, 0);
                            v60 := v50;
                            v56 := v60;
                            v57 := array.ref.elem.1D(v48, 0)-composite.ref.elem(v47, T23, type<real<8>>)*v56;
                            v50 := v54*v57+v55*v56;
                            v60 := composite.ref.elem(v47, R23, type<real<8>>)*v50;
                            v51 := v60;
                            v58 := v50-composite.ref.elem(v47, T23, type<real<8>>)*v51;
                            v52 := composite.ref.elem(v47, T23, type<real<8>>)*v58+v55*v57;
                            v60 := composite.ref.elem(v47, R46, type<real<8>>)*v52;
                            v53 := v60;
                            array.ref.elem.1D(v48, 0) := v52-composite.ref.elem(v47, T46, type<real<8>>)*v53;
                            return composite.ref.elem(v47, R46, type<real<8>>)*array.ref.elem.1D(v48, 0);
                        }(v66, scalar.to.array(v73), scalar.to.array(v74));
                        vector.ref.elem(composite.ref.elem(v66, key_array, type<vector<int<4>,1048576>>), v76) := v72*v69;
                    };
                    v70 := 0+ceil(int.lshift(1, 20)-0/1)*1;
                };
            };
        }(v1, 314159265.00, 1220703125.00);
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v89, int<4> v90){
            decl ref<int<4>> v91 =  var(0);
            decl ref<int<4>> v92 =  var(0);
            decl ref<int<4>> v93 =  var(0);
            decl ref<int<4>> v94 =  var(0);
            decl ref<int<4>> v95 =  var(0);
            decl ref<int<4>> v96 =  var(16-10);
            decl ref<int<4>> v97 =  var(0);
            decl ref<int<4>> v98 =  var(0);
            decl ref<int<4>> v99 =  var(0);
            decl ref<vector<int<4>,65536>> v100 =  var(undefined(type<vector<int<4>,65536>>));
            {
                vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), v90) := v90;
                vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), v90+10) := int.lshift(1, 16)-v90;
                {
                    for(decl int<4> v102 = 0 .. 5 : 1) 
                        vector.ref.elem(composite.ref.elem(v89, partial_verify_vals, type<vector<int<4>,5>>), v102) := vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), vector.ref.elem(composite.ref.elem(v89, test_index_array, type<vector<int<4>,5>>), v102))
                    ;
                    v91 := 0+ceil(5-0/1)*1;
                };
                {
                    for(decl int<4> v104 = 0 .. int.lshift(1, 16) : 1) 
                        vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v104) := 0
                    ;
                    v91 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                };
            };
            {
                for(decl int<4> v106 = 0 .. int.lshift(1, 16) : 1) 
                    vector.ref.elem(v100, v106) := 0
                ;
                v91 := 0+ceil(int.lshift(1, 16)-0/1)*1;
            };
            {
                for(decl int<4> v108 = 0 .. int.lshift(1, 20) : 1) {
                    vector.ref.elem(composite.ref.elem(v89, key_buff2, type<vector<int<4>,1048576>>), v108) := vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), v108);
                    int.postInc(vector.ref.elem(v100, vector.ref.elem(composite.ref.elem(v89, key_buff2, type<vector<int<4>,1048576>>), v108)));
                };
                v91 := 0+ceil(int.lshift(1, 20)-0/1)*1;
            };
            {
                for(decl int<4> v110 = 0 .. int.lshift(1, 16)-1 : 1) 
                    vector.ref.elem(v100, v110+1) := vector.ref.elem(v100, v110+1)+vector.ref.elem(v100, v110)
                ;
                v91 := 0+ceil(int.lshift(1, 16)-1-0/1)*1;
            };
            {
                {
                    for(decl int<4> v112 = 0 .. int.lshift(1, 16) : 1) 
                        vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v112) := vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v112)+vector.ref.elem(v100, v112)
                    ;
                    v91 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                };
            };
            {
                {
                    for(decl int<4> v121 = 0 .. 5 : 1) {
                        v93 := vector.ref.elem(composite.ref.elem(v89, partial_verify_vals, type<vector<int<4>,5>>), v121);
                        if(0<=v93&&bind(){fun(ref<int<4>> v118)return v118<=int.lshift(1, 20)-1(v93)}) {
                            decl int<4> v113 = 'W';
                            switch(v113) {
                                case 'S': if(v121<=2) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                case 'W': if(v121<2) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90-2)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                case 'A': if(v121<=2) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90-1)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90-1)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                case 'B': if(v121==1||bind(){fun(ref<int<4>> v114)return v114==2( var(v121))}||bind(){fun(ref<int<4>> v116)return v116==4( var(v121))}) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                case 'C': if(v121<=2) {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90)) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                default: { }
                            };
                        } else { };
                    };
                    v91 := 0+ceil(5-0/1)*1;
                };
                if(v90==10) composite.ref.elem(v89, key_buff_ptr_global, type<ref<array<int<4>,1>>>) := ref.vector.to.ref.array(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>)) else { };
            };
        }(v1, 1);
        composite.ref.elem(v1, passed_verification, type<int<4>>) := 0;
        if('W'!='S') printf(string.as.char.pointer("\n   iteration\n"), varlist.pack(())) else { };
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v36, int<4> v37){
            vector.ref.elem(composite.ref.elem(v36, start, type<vector<real<8>,64>>), v37) := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v33){
                decl ref<real<8>> v34 =  var(0.0);
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v29, ref<array<real<8>,1>> v30){
                    decl ref<struct<tv_sec:int<8>,tv_usec:int<8>>> v31 =  var(undefined(type<struct<tv_sec:int<8>,tv_usec:int<8>>>));
                    gettimeofday(scalar.to.array(v31), get.null(type<array<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>,1>>));
                    if(composite.ref.elem(v29, sec, type<int<4>>)<0) composite.ref.elem(v29, sec, type<int<4>>) := composite.ref.elem(v31, tv_sec, type<int<8>>) else { };
                    array.ref.elem.1D(v30, 0) := composite.ref.elem(v31, tv_sec, type<int<8>>)-composite.ref.elem(v29, sec, type<int<4>>)+1.0e-6*composite.ref.elem(v31, tv_usec, type<int<8>>);
                }(v33, scalar.to.array(v34));
                return v34;
            }(v36);
        }(v1, 0);
        {
            for(decl int<4> v135 = 1 .. 10+1 : 1) {
                if('W'!='S') printf(string.as.char.pointer("        %d\n"), varlist.pack((v135))) else { };
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v89, int<4> v90){
                    decl ref<int<4>> v91 =  var(0);
                    decl ref<int<4>> v92 =  var(0);
                    decl ref<int<4>> v93 =  var(0);
                    decl ref<int<4>> v94 =  var(0);
                    decl ref<int<4>> v95 =  var(0);
                    decl ref<int<4>> v96 =  var(16-10);
                    decl ref<int<4>> v97 =  var(0);
                    decl ref<int<4>> v98 =  var(0);
                    decl ref<int<4>> v99 =  var(0);
                    decl ref<vector<int<4>,65536>> v100 =  var(undefined(type<vector<int<4>,65536>>));
                    {
                        vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), v90) := v90;
                        vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), v90+10) := int.lshift(1, 16)-v90;
                        {
                            for(decl int<4> v102 = 0 .. 5 : 1) 
                                vector.ref.elem(composite.ref.elem(v89, partial_verify_vals, type<vector<int<4>,5>>), v102) := vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), vector.ref.elem(composite.ref.elem(v89, test_index_array, type<vector<int<4>,5>>), v102))
                            ;
                            v91 := 0+ceil(5-0/1)*1;
                        };
                        {
                            for(decl int<4> v104 = 0 .. int.lshift(1, 16) : 1) 
                                vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v104) := 0
                            ;
                            v91 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                        };
                    };
                    {
                        for(decl int<4> v106 = 0 .. int.lshift(1, 16) : 1) 
                            vector.ref.elem(v100, v106) := 0
                        ;
                        v91 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                    };
                    {
                        for(decl int<4> v108 = 0 .. int.lshift(1, 20) : 1) {
                            vector.ref.elem(composite.ref.elem(v89, key_buff2, type<vector<int<4>,1048576>>), v108) := vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), v108);
                            int.postInc(vector.ref.elem(v100, vector.ref.elem(composite.ref.elem(v89, key_buff2, type<vector<int<4>,1048576>>), v108)));
                        };
                        v91 := 0+ceil(int.lshift(1, 20)-0/1)*1;
                    };
                    {
                        for(decl int<4> v110 = 0 .. int.lshift(1, 16)-1 : 1) 
                            vector.ref.elem(v100, v110+1) := vector.ref.elem(v100, v110+1)+vector.ref.elem(v100, v110)
                        ;
                        v91 := 0+ceil(int.lshift(1, 16)-1-0/1)*1;
                    };
                    {
                        {
                            for(decl int<4> v112 = 0 .. int.lshift(1, 16) : 1) 
                                vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v112) := vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v112)+vector.ref.elem(v100, v112)
                            ;
                            v91 := 0+ceil(int.lshift(1, 16)-0/1)*1;
                        };
                    };
                    {
                        {
                            for(decl int<4> v121 = 0 .. 5 : 1) {
                                v93 := vector.ref.elem(composite.ref.elem(v89, partial_verify_vals, type<vector<int<4>,5>>), v121);
                                if(0<=v93&&bind(){fun(ref<int<4>> v118)return v118<=int.lshift(1, 20)-1(v93)}) {
                                    decl int<4> v113 = 'W';
                                    switch(v113) {
                                        case 'S': if(v121<=2) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        case 'W': if(v121<2) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90-2)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        case 'A': if(v121<=2) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90-1)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90-1)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        case 'B': if(v121==1||bind(){fun(ref<int<4>> v114)return v114==2( var(v121))}||bind(){fun(ref<int<4>> v116)return v116==4( var(v121))}) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        case 'C': if(v121<=2) {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)+v90)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), v93-1), vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), v121)-v90)) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        default: { }
                                    };
                                } else { };
                            };
                            v91 := 0+ceil(5-0/1)*1;
                        };
                        if(v90==10) composite.ref.elem(v89, key_buff_ptr_global, type<ref<array<int<4>,1>>>) := ref.vector.to.ref.array(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>)) else { };
                    };
                }(v1, v135);
            };
            v126 := 1+ceil(10+1-1/1)*1;
        };
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v39, int<4> v40){
            decl ref<real<8>> v41 =  var(0.0);
            decl ref<real<8>> v42 =  var(0.0);
            v42 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v33){
                decl ref<real<8>> v34 =  var(0.0);
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v29, ref<array<real<8>,1>> v30){
                    decl ref<struct<tv_sec:int<8>,tv_usec:int<8>>> v31 =  var(undefined(type<struct<tv_sec:int<8>,tv_usec:int<8>>>));
                    gettimeofday(scalar.to.array(v31), get.null(type<array<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>,1>>));
                    if(composite.ref.elem(v29, sec, type<int<4>>)<0) composite.ref.elem(v29, sec, type<int<4>>) := composite.ref.elem(v31, tv_sec, type<int<8>>) else { };
                    array.ref.elem.1D(v30, 0) := composite.ref.elem(v31, tv_sec, type<int<8>>)-composite.ref.elem(v29, sec, type<int<4>>)+1.0e-6*composite.ref.elem(v31, tv_usec, type<int<8>>);
                }(v33, scalar.to.array(v34));
                return v34;
            }(v39);
            v41 := v42-vector.ref.elem(composite.ref.elem(v39, start, type<vector<real<8>,64>>), v40);
            vector.ref.elem(composite.ref.elem(v39, elapsed, type<vector<real<8>,64>>), v40) := vector.ref.elem(composite.ref.elem(v39, elapsed, type<vector<real<8>,64>>), v40)+v41;
        }(v1, 0);
        v129 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v44, int<4> v45){
            return vector.ref.elem(composite.ref.elem(v44, elapsed, type<vector<real<8>,64>>), v45);
        }(v1, 0);
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v78){
            decl ref<int<4>> v79 =  var(0);
            decl ref<int<4>> v80 =  var(0);
            decl ref<int<4>> v81 =  var(0);
            decl ref<int<4>> v82 =  var(0);
            decl ref<int<4>> v83 =  var(0);
            {
                for(decl int<4> v85 = 0 .. int.lshift(1, 20) : 1) 
                    vector.ref.elem(composite.ref.elem(v78, key_array, type<vector<int<4>,1048576>>), int.preDec(array.ref.elem.1D(composite.ref.elem(v78, key_buff_ptr_global, type<ref<array<int<4>,1>>>), vector.ref.elem(composite.ref.elem(v78, key_buff2, type<vector<int<4>,1048576>>), v85)))) := vector.ref.elem(composite.ref.elem(v78, key_buff2, type<vector<int<4>,1048576>>), v85)
                ;
                v79 := 0+ceil(int.lshift(1, 20)-0/1)*1;
            };
            v80 := 0;
            {
                for(decl int<4> v87 = 1 .. int.lshift(1, 20) : 1) 
                    if(vector.ref.elem(composite.ref.elem(v78, key_array, type<vector<int<4>,1048576>>), v87-1)>vector.ref.elem(composite.ref.elem(v78, key_array, type<vector<int<4>,1048576>>), v87)) int.postInc(v80) else { }
                ;
                v79 := 1+ceil(int.lshift(1, 20)-1/1)*1;
            };
            if(int.ne(v80, 0)) {
                printf(string.as.char.pointer("Full_verify: number of keys out of sort: %d\n"), varlist.pack((v80)));
            } else int.postInc(composite.ref.elem(v78, passed_verification, type<int<4>>));
        }(v1);
        if(int.ne(composite.ref.elem(v1, passed_verification, type<int<4>>), 5*10+1)) composite.ref.elem(v1, passed_verification, type<int<4>>) := 0 else { };
        fun(ref<array<char,1>> v2, char v3, int<4> v4, int<4> v5, int<4> v6, int<4> v7, int<4> v8, real<8> v9, real<8> v10, ref<array<char,1>> v11, int<4> v12, ref<array<char,1>> v13, ref<array<char,1>> v14, ref<array<char,1>> v15, ref<array<char,1>> v16, ref<array<char,1>> v17, ref<array<char,1>> v18, ref<array<char,1>> v19, ref<array<char,1>> v20, ref<array<char,1>> v21){
            decl ref<ref<array<char,1>>> v22 =  var(string.as.char.pointer("1000"));
            printf(string.as.char.pointer("\n\n %s Benchmark Completed\n"), varlist.pack((v2)));
            printf(string.as.char.pointer(" Class           =                        %c\n"), varlist.pack((v3)));
            if(v5==0&&bind(){fun(int<4> v23)return v23==0(v6)}) printf(string.as.char.pointer(" Size            =             %12d\n"), varlist.pack((v4))) else printf(string.as.char.pointer(" Size            =              %3dx%3dx%3d\n"), varlist.pack((v4, v5, v6)));
            printf(string.as.char.pointer(" Iterations      =             %12d\n"), varlist.pack((v7)));
            printf(string.as.char.pointer(" Threads         =             %12d\n"), varlist.pack((v8)));
            printf(string.as.char.pointer(" Time in seconds =             %12.2f\n"), varlist.pack((0.0)));
            printf(string.as.char.pointer(" Mop/s total     =             %12.2f\n"), varlist.pack((0.0)));
            printf(string.as.char.pointer(" Operation type  = %24s\n"), varlist.pack((v11)));
            if(int.ne(v12, 0)) printf(string.as.char.pointer(" Verification    =               SUCCESSFUL\n"), varlist.pack(())) else printf(string.as.char.pointer(" Verification    =             UNSUCCESSFUL\n"), varlist.pack(()));
            printf(string.as.char.pointer(" Version         =             %12s\n"), varlist.pack((v13)));
            printf(string.as.char.pointer(" Compile date    =             %12s\n"), varlist.pack((v14)));
            printf(string.as.char.pointer("\n Compile options:\n"), varlist.pack(()));
            printf(string.as.char.pointer("    CC           = %s\n"), varlist.pack((v15)));
            printf(string.as.char.pointer("    CLINK        = %s\n"), varlist.pack((v16)));
            printf(string.as.char.pointer("    C_LIB        = %s\n"), varlist.pack((v17)));
            printf(string.as.char.pointer("    C_INC        = %s\n"), varlist.pack((v18)));
            printf(string.as.char.pointer("    CFLAGS       = %s\n"), varlist.pack((v19)));
            printf(string.as.char.pointer("    CLINKFLAGS   = %s\n"), varlist.pack((v20)));
            printf(string.as.char.pointer("    RAND         = %s\n"), varlist.pack((v21)));
        }(string.as.char.pointer("IS"), 'W', int.lshift(1, 20), 0, 0, 10, v128, v129, 10*int.lshift(1, 20)/v129/1000000., string.as.char.pointer("keys ranked"), composite.ref.elem(v1, passed_verification, type<int<4>>), string.as.char.pointer("2.3"), string.as.char.pointer("02 Dec 2010"), string.as.char.pointer("cc"), string.as.char.pointer("cc"), string.as.char.pointer("-lm"), string.as.char.pointer("-I../common"), string.as.char.pointer("-O3 "), string.as.char.pointer("-lm"), string.as.char.pointer("randlc"));
    }




// --------- Pretty Print Inspire - Detail ----------
// Inspire Program 
//  Entry Point: 
fun(int<4> v123, ref<array<ref<array<char,1>>,1>> v124){
        decl ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v1 = ( new(struct{start:=vector.init.uniform(0.0, 64), elapsed:=vector.init.uniform(0.0, 64), sec:=(CAST<int<4>>(0)-1), B_test_index_array:=[41869, 812306, 5102857, 18232239, 26860214], B_test_rank_array:=[33422937, 10244, 59149, 33135281, 99], C_test_index_array:=[44172927, 72999161, 74326391, 129606274, 21736814], C_test_rank_array:=[61147, 882988, 266290, 133997595, 133525895], KS:=0, R23:=0.0, R46:=0.0, key_buff_ptr_global:=( var(vector.to.array(vector.init.uniform(0, 1)))), passed_verification:=0, key_array:=vector.init.uniform(0, 1048576), key_buff1:=vector.init.uniform(0, 1048576), key_buff2:=vector.init.uniform(0, 1048576), partial_verify_vals:=vector.init.uniform(0, 5), test_index_array:=vector.init.uniform(0, 5), test_rank_array:=vector.init.uniform(0, 5), S_test_index_array:=[48427, 17148, 23627, 62548, 4431], S_test_rank_array:=[0, 18, 346, 64917, 65463], W_test_index_array:=[357773, 934767, 875723, 898999, 404505], W_test_rank_array:=[1249, 11698, 1039987, 1043896, 1048018], A_test_index_array:=[2112377, 662041, 5336171, 3642833, 4250760], A_test_rank_array:=[104, 17523, 123928, 8288932, 8388264], T23:=0.0, T46:=0.0}));
        decl ref<int<4>> v125 = ( var(0));
        decl ref<int<4>> v126 = ( var(0));
        decl ref<int<4>> v127 = ( var(0));
        decl ref<int<4>> v128 = ( var(1));
        decl ref<real<8>> v129 = ( var(0.0));
        decl ref<real<8>> v130 = ( var(0.0));
        {
            for(decl int<4> v133 = 0 .. 5 : 1) {
                decl int<4> v131 = CAST<int<4>>('W');
                switch(v131) {
                    case 'S': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, S_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, S_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                    }
                    case 'A': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, A_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, A_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                    }
                    case 'W': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, W_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, W_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                    }
                    case 'B': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, B_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, B_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                    }
                    case 'C': {
                        (vector.ref.elem(composite.ref.elem(v1, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, C_test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                        (vector.ref.elem(composite.ref.elem(v1, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133)) := ( *vector.ref.elem(composite.ref.elem(v1, C_test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v133))));
                    }
                    default: { }
                };
            };
            (v125 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
        };
        { };
        printf(string.as.char.pointer("\n\n NAS Parallel Benchmarks 2.3 OpenMP C version - IS Benchmark\n\n"), varlist.pack(()));
        printf(string.as.char.pointer(" Size:  %d  (class %c)\n"), varlist.pack((int.lshift(1, 20), 'W')));
        printf(string.as.char.pointer(" Iterations:   %d\n"), varlist.pack((10)));
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v26, int<4> v27){
            (vector.ref.elem(composite.ref.elem(v26, elapsed, type<vector<real<8>,64>>), CAST<uint<4>>(v27)) := 0.0);
        }(v1, 0);
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v66, real<8> v67, real<8> v68){
            decl ref<real<8>> v73 = ( var(v67));
            decl ref<real<8>> v74 = ( var(v68));
            {
                decl ref<real<8>> v69 = ( var(0.0));
                decl ref<int<4>> v70 = ( var(0));
                decl ref<int<4>> v71 = ( var(0));
                decl ref<int<4>> v72 = ( var(0));
                (v72 := (int.lshift(1, 16)/4));
                {
                    for(decl int<4> v76 = 0 .. int.lshift(1, 20) : 1) {
                        (v69 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, ref<array<real<8>,1>> v48, ref<array<real<8>,1>> v49){
                            decl ref<real<8>> v50 = ( var(0.0));
                            decl ref<real<8>> v51 = ( var(0.0));
                            decl ref<real<8>> v52 = ( var(0.0));
                            decl ref<real<8>> v53 = ( var(0.0));
                            decl ref<real<8>> v54 = ( var(0.0));
                            decl ref<real<8>> v55 = ( var(0.0));
                            decl ref<real<8>> v56 = ( var(0.0));
                            decl ref<real<8>> v57 = ( var(0.0));
                            decl ref<real<8>> v58 = ( var(0.0));
                            decl ref<int<4>> v59 = ( var(0));
                            decl ref<int<4>> v60 = ( var(0));
                            if((( *composite.ref.elem(v47, KS, type<int<4>>))==0)) {
                                (composite.ref.elem(v47, R23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, R46, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, T23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, T46, type<real<8>>) := 1.0);
                                {
                                    for(decl int<4> v62 = 1 .. (23+1) : 1) {
                                        (composite.ref.elem(v47, R23, type<real<8>>) := (0.50*( *composite.ref.elem(v47, R23, type<real<8>>))));
                                        (composite.ref.elem(v47, T23, type<real<8>>) := (2.0*( *composite.ref.elem(v47, T23, type<real<8>>))));
                                    };
                                    (v59 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((23+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                {
                                    for(decl int<4> v64 = 1 .. (46+1) : 1) {
                                        (composite.ref.elem(v47, R46, type<real<8>>) := (0.50*( *composite.ref.elem(v47, R46, type<real<8>>))));
                                        (composite.ref.elem(v47, T46, type<real<8>>) := (2.0*( *composite.ref.elem(v47, T46, type<real<8>>))));
                                    };
                                    (v59 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((46+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                (composite.ref.elem(v47, KS, type<int<4>>) := 1);
                            } else { };
                            (v50 := (( *composite.ref.elem(v47, R23, type<real<8>>))*( *array.ref.elem.1D(v49, 0))));
                            (v60 := CAST<int<4>>(( *v50)));
                            (v54 := CAST<real<8>>(( *v60)));
                            (v55 := (( *array.ref.elem.1D(v49, 0))-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v54))));
                            (v50 := (( *composite.ref.elem(v47, R23, type<real<8>>))*( *array.ref.elem.1D(v48, 0))));
                            (v60 := CAST<int<4>>(( *v50)));
                            (v56 := CAST<real<8>>(( *v60)));
                            (v57 := (( *array.ref.elem.1D(v48, 0))-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v56))));
                            (v50 := ((( *v54)*( *v57))+(( *v55)*( *v56))));
                            (v60 := CAST<int<4>>((( *composite.ref.elem(v47, R23, type<real<8>>))*( *v50))));
                            (v51 := CAST<real<8>>(( *v60)));
                            (v58 := (( *v50)-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v51))));
                            (v52 := ((( *composite.ref.elem(v47, T23, type<real<8>>))*( *v58))+(( *v55)*( *v57))));
                            (v60 := CAST<int<4>>((( *composite.ref.elem(v47, R46, type<real<8>>))*( *v52))));
                            (v53 := CAST<real<8>>(( *v60)));
                            (array.ref.elem.1D(v48, 0) := (( *v52)-(( *composite.ref.elem(v47, T46, type<real<8>>))*( *v53))));
                            return (( *composite.ref.elem(v47, R46, type<real<8>>))*( *array.ref.elem.1D(v48, 0)));
                        }(v66, scalar.to.array(v73), scalar.to.array(v74)));
                        (v69 := (( *v69)+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, ref<array<real<8>,1>> v48, ref<array<real<8>,1>> v49){
                            decl ref<real<8>> v50 = ( var(0.0));
                            decl ref<real<8>> v51 = ( var(0.0));
                            decl ref<real<8>> v52 = ( var(0.0));
                            decl ref<real<8>> v53 = ( var(0.0));
                            decl ref<real<8>> v54 = ( var(0.0));
                            decl ref<real<8>> v55 = ( var(0.0));
                            decl ref<real<8>> v56 = ( var(0.0));
                            decl ref<real<8>> v57 = ( var(0.0));
                            decl ref<real<8>> v58 = ( var(0.0));
                            decl ref<int<4>> v59 = ( var(0));
                            decl ref<int<4>> v60 = ( var(0));
                            if((( *composite.ref.elem(v47, KS, type<int<4>>))==0)) {
                                (composite.ref.elem(v47, R23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, R46, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, T23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, T46, type<real<8>>) := 1.0);
                                {
                                    for(decl int<4> v62 = 1 .. (23+1) : 1) {
                                        (composite.ref.elem(v47, R23, type<real<8>>) := (0.50*( *composite.ref.elem(v47, R23, type<real<8>>))));
                                        (composite.ref.elem(v47, T23, type<real<8>>) := (2.0*( *composite.ref.elem(v47, T23, type<real<8>>))));
                                    };
                                    (v59 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((23+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                {
                                    for(decl int<4> v64 = 1 .. (46+1) : 1) {
                                        (composite.ref.elem(v47, R46, type<real<8>>) := (0.50*( *composite.ref.elem(v47, R46, type<real<8>>))));
                                        (composite.ref.elem(v47, T46, type<real<8>>) := (2.0*( *composite.ref.elem(v47, T46, type<real<8>>))));
                                    };
                                    (v59 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((46+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                (composite.ref.elem(v47, KS, type<int<4>>) := 1);
                            } else { };
                            (v50 := (( *composite.ref.elem(v47, R23, type<real<8>>))*( *array.ref.elem.1D(v49, 0))));
                            (v60 := CAST<int<4>>(( *v50)));
                            (v54 := CAST<real<8>>(( *v60)));
                            (v55 := (( *array.ref.elem.1D(v49, 0))-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v54))));
                            (v50 := (( *composite.ref.elem(v47, R23, type<real<8>>))*( *array.ref.elem.1D(v48, 0))));
                            (v60 := CAST<int<4>>(( *v50)));
                            (v56 := CAST<real<8>>(( *v60)));
                            (v57 := (( *array.ref.elem.1D(v48, 0))-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v56))));
                            (v50 := ((( *v54)*( *v57))+(( *v55)*( *v56))));
                            (v60 := CAST<int<4>>((( *composite.ref.elem(v47, R23, type<real<8>>))*( *v50))));
                            (v51 := CAST<real<8>>(( *v60)));
                            (v58 := (( *v50)-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v51))));
                            (v52 := ((( *composite.ref.elem(v47, T23, type<real<8>>))*( *v58))+(( *v55)*( *v57))));
                            (v60 := CAST<int<4>>((( *composite.ref.elem(v47, R46, type<real<8>>))*( *v52))));
                            (v53 := CAST<real<8>>(( *v60)));
                            (array.ref.elem.1D(v48, 0) := (( *v52)-(( *composite.ref.elem(v47, T46, type<real<8>>))*( *v53))));
                            return (( *composite.ref.elem(v47, R46, type<real<8>>))*( *array.ref.elem.1D(v48, 0)));
                        }(v66, scalar.to.array(v73), scalar.to.array(v74))));
                        (v69 := (( *v69)+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, ref<array<real<8>,1>> v48, ref<array<real<8>,1>> v49){
                            decl ref<real<8>> v50 = ( var(0.0));
                            decl ref<real<8>> v51 = ( var(0.0));
                            decl ref<real<8>> v52 = ( var(0.0));
                            decl ref<real<8>> v53 = ( var(0.0));
                            decl ref<real<8>> v54 = ( var(0.0));
                            decl ref<real<8>> v55 = ( var(0.0));
                            decl ref<real<8>> v56 = ( var(0.0));
                            decl ref<real<8>> v57 = ( var(0.0));
                            decl ref<real<8>> v58 = ( var(0.0));
                            decl ref<int<4>> v59 = ( var(0));
                            decl ref<int<4>> v60 = ( var(0));
                            if((( *composite.ref.elem(v47, KS, type<int<4>>))==0)) {
                                (composite.ref.elem(v47, R23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, R46, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, T23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, T46, type<real<8>>) := 1.0);
                                {
                                    for(decl int<4> v62 = 1 .. (23+1) : 1) {
                                        (composite.ref.elem(v47, R23, type<real<8>>) := (0.50*( *composite.ref.elem(v47, R23, type<real<8>>))));
                                        (composite.ref.elem(v47, T23, type<real<8>>) := (2.0*( *composite.ref.elem(v47, T23, type<real<8>>))));
                                    };
                                    (v59 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((23+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                {
                                    for(decl int<4> v64 = 1 .. (46+1) : 1) {
                                        (composite.ref.elem(v47, R46, type<real<8>>) := (0.50*( *composite.ref.elem(v47, R46, type<real<8>>))));
                                        (composite.ref.elem(v47, T46, type<real<8>>) := (2.0*( *composite.ref.elem(v47, T46, type<real<8>>))));
                                    };
                                    (v59 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((46+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                (composite.ref.elem(v47, KS, type<int<4>>) := 1);
                            } else { };
                            (v50 := (( *composite.ref.elem(v47, R23, type<real<8>>))*( *array.ref.elem.1D(v49, 0))));
                            (v60 := CAST<int<4>>(( *v50)));
                            (v54 := CAST<real<8>>(( *v60)));
                            (v55 := (( *array.ref.elem.1D(v49, 0))-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v54))));
                            (v50 := (( *composite.ref.elem(v47, R23, type<real<8>>))*( *array.ref.elem.1D(v48, 0))));
                            (v60 := CAST<int<4>>(( *v50)));
                            (v56 := CAST<real<8>>(( *v60)));
                            (v57 := (( *array.ref.elem.1D(v48, 0))-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v56))));
                            (v50 := ((( *v54)*( *v57))+(( *v55)*( *v56))));
                            (v60 := CAST<int<4>>((( *composite.ref.elem(v47, R23, type<real<8>>))*( *v50))));
                            (v51 := CAST<real<8>>(( *v60)));
                            (v58 := (( *v50)-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v51))));
                            (v52 := ((( *composite.ref.elem(v47, T23, type<real<8>>))*( *v58))+(( *v55)*( *v57))));
                            (v60 := CAST<int<4>>((( *composite.ref.elem(v47, R46, type<real<8>>))*( *v52))));
                            (v53 := CAST<real<8>>(( *v60)));
                            (array.ref.elem.1D(v48, 0) := (( *v52)-(( *composite.ref.elem(v47, T46, type<real<8>>))*( *v53))));
                            return (( *composite.ref.elem(v47, R46, type<real<8>>))*( *array.ref.elem.1D(v48, 0)));
                        }(v66, scalar.to.array(v73), scalar.to.array(v74))));
                        (v69 := (( *v69)+fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v47, ref<array<real<8>,1>> v48, ref<array<real<8>,1>> v49){
                            decl ref<real<8>> v50 = ( var(0.0));
                            decl ref<real<8>> v51 = ( var(0.0));
                            decl ref<real<8>> v52 = ( var(0.0));
                            decl ref<real<8>> v53 = ( var(0.0));
                            decl ref<real<8>> v54 = ( var(0.0));
                            decl ref<real<8>> v55 = ( var(0.0));
                            decl ref<real<8>> v56 = ( var(0.0));
                            decl ref<real<8>> v57 = ( var(0.0));
                            decl ref<real<8>> v58 = ( var(0.0));
                            decl ref<int<4>> v59 = ( var(0));
                            decl ref<int<4>> v60 = ( var(0));
                            if((( *composite.ref.elem(v47, KS, type<int<4>>))==0)) {
                                (composite.ref.elem(v47, R23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, R46, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, T23, type<real<8>>) := 1.0);
                                (composite.ref.elem(v47, T46, type<real<8>>) := 1.0);
                                {
                                    for(decl int<4> v62 = 1 .. (23+1) : 1) {
                                        (composite.ref.elem(v47, R23, type<real<8>>) := (0.50*( *composite.ref.elem(v47, R23, type<real<8>>))));
                                        (composite.ref.elem(v47, T23, type<real<8>>) := (2.0*( *composite.ref.elem(v47, T23, type<real<8>>))));
                                    };
                                    (v59 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((23+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                {
                                    for(decl int<4> v64 = 1 .. (46+1) : 1) {
                                        (composite.ref.elem(v47, R46, type<real<8>>) := (0.50*( *composite.ref.elem(v47, R46, type<real<8>>))));
                                        (composite.ref.elem(v47, T46, type<real<8>>) := (2.0*( *composite.ref.elem(v47, T46, type<real<8>>))));
                                    };
                                    (v59 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((46+1)-1))/CAST<real<8>>(1))))*1)));
                                };
                                (composite.ref.elem(v47, KS, type<int<4>>) := 1);
                            } else { };
                            (v50 := (( *composite.ref.elem(v47, R23, type<real<8>>))*( *array.ref.elem.1D(v49, 0))));
                            (v60 := CAST<int<4>>(( *v50)));
                            (v54 := CAST<real<8>>(( *v60)));
                            (v55 := (( *array.ref.elem.1D(v49, 0))-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v54))));
                            (v50 := (( *composite.ref.elem(v47, R23, type<real<8>>))*( *array.ref.elem.1D(v48, 0))));
                            (v60 := CAST<int<4>>(( *v50)));
                            (v56 := CAST<real<8>>(( *v60)));
                            (v57 := (( *array.ref.elem.1D(v48, 0))-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v56))));
                            (v50 := ((( *v54)*( *v57))+(( *v55)*( *v56))));
                            (v60 := CAST<int<4>>((( *composite.ref.elem(v47, R23, type<real<8>>))*( *v50))));
                            (v51 := CAST<real<8>>(( *v60)));
                            (v58 := (( *v50)-(( *composite.ref.elem(v47, T23, type<real<8>>))*( *v51))));
                            (v52 := ((( *composite.ref.elem(v47, T23, type<real<8>>))*( *v58))+(( *v55)*( *v57))));
                            (v60 := CAST<int<4>>((( *composite.ref.elem(v47, R46, type<real<8>>))*( *v52))));
                            (v53 := CAST<real<8>>(( *v60)));
                            (array.ref.elem.1D(v48, 0) := (( *v52)-(( *composite.ref.elem(v47, T46, type<real<8>>))*( *v53))));
                            return (( *composite.ref.elem(v47, R46, type<real<8>>))*( *array.ref.elem.1D(v48, 0)));
                        }(v66, scalar.to.array(v73), scalar.to.array(v74))));
                        (vector.ref.elem(composite.ref.elem(v66, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v76)) := CAST<int<4>>((CAST<real<8>>(( *v72))*( *v69))));
                    };
                    (v70 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-0))/CAST<real<8>>(1))))*1)));
                };
            };
        }(v1, 314159265.00, 1220703125.00);
        <m id=1>fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v89, int<4> v90){
            decl ref<int<4>> v91 = ( var(0));
            decl ref<int<4>> v92 = ( var(0));
            decl ref<int<4>> v93 = ( var(0));
            decl ref<int<4>> v94 = ( var(0));
            decl ref<int<4>> v95 = ( var(0));
            decl ref<int<4>> v96 = ( var((16-10)));
            decl ref<int<4>> v97 = ( var(0));
            decl ref<int<4>> v98 = ( var(0));
            decl ref<int<4>> v99 = ( var(0));
            decl ref<vector<int<4>,65536>> v100 = ( var(undefined(type<vector<int<4>,65536>>)));
            <m id=1>{
                (vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v90)) := v90);
                (vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>((v90+10))) := (int.lshift(1, 16)-v90));
                {
                    for(decl int<4> v102 = 0 .. 5 : 1) 
                        (vector.ref.elem(composite.ref.elem(v89, partial_verify_vals, type<vector<int<4>,5>>), CAST<uint<4>>(v102)) := ( *vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v89, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v102)))))))
                    ;
                    (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
                };
                {
                    for(decl int<4> v104 = 0 .. int.lshift(1, 16) : 1) 
                        (vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v104)) := 0)
                    ;
                    (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                };
            }</m>;
            {
                <m id=2>for(decl int<4> v106 = 0 .. int.lshift(1, 16) : 1) 
                    (vector.ref.elem(v100, CAST<uint<4>>(v106)) := 0)
                </m>;
                (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
            };
            {
                <m id=3>for(decl int<4> v108 = 0 .. int.lshift(1, 20) : 1) {
                    (vector.ref.elem(composite.ref.elem(v89, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v108)) := ( *vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v108))));
                    int.postInc(vector.ref.elem(v100, CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v89, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v108))))));
                }</m>;
                (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-0))/CAST<real<8>>(1))))*1)));
            };
            {
                for(decl int<4> v110 = 0 .. (int.lshift(1, 16)-1) : 1) 
                    (vector.ref.elem(v100, CAST<uint<4>>((v110+1))) := (( *vector.ref.elem(v100, CAST<uint<4>>((v110+1))))+( *vector.ref.elem(v100, CAST<uint<4>>(v110)))))
                ;
                (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>(((int.lshift(1, 16)-1)-0))/CAST<real<8>>(1))))*1)));
            };
            <m id=4>{
                {
                    for(decl int<4> v112 = 0 .. int.lshift(1, 16) : 1) 
                        (vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v112)) := (( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v112)))+( *vector.ref.elem(v100, CAST<uint<4>>(v112)))))
                    ;
                    (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                };
            }</m>;
            <m id=5>{
                {
                    for(decl int<4> v121 = 0 .. 5 : 1) {
                        (v93 := ( *vector.ref.elem(composite.ref.elem(v89, partial_verify_vals, type<vector<int<4>,5>>), CAST<uint<4>>(v121))));
                        if(((0<=( *v93))&&bind(){fun(ref<int<4>> v118)return (( *v118)<=(int.lshift(1, 20)-1))(v93)})) {
                            decl int<4> v113 = CAST<int<4>>('W');
                            switch(v113) {
                                case 'S': if((v121<=2)) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+v90))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-v90))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                case 'W': if((v121<2)) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+(v90-2)))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-v90))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                case 'A': if((v121<=2)) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+(v90-1)))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-(v90-1)))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                case 'B': if((((v121==1)||bind(){fun(ref<int<4>> v114)return (( *v114)==2)(( var(v121)))})||bind(){fun(ref<int<4>> v116)return (( *v116)==4)(( var(v121)))})) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+v90))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-v90))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                case 'C': if((v121<=2)) {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+v90))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                } else {
                                    if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-v90))) {
                                        printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                    } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                }
                                default: { }
                            };
                        } else { };
                    };
                    (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
                };
                if((v90==10)) (composite.ref.elem(v89, key_buff_ptr_global, type<ref<array<int<4>,1>>>) := ref.vector.to.ref.array(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>))) else { };
            }</m>;
        }(v1, 1)</m>;
        (composite.ref.elem(v1, passed_verification, type<int<4>>) := 0);
        if(('W'!='S')) printf(string.as.char.pointer("\n   iteration\n"), varlist.pack(())) else { };
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v36, int<4> v37){
            (vector.ref.elem(composite.ref.elem(v36, start, type<vector<real<8>,64>>), CAST<uint<4>>(v37)) := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v33){
                decl ref<real<8>> v34 = ( var(0.0));
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v29, ref<array<real<8>,1>> v30){
                    decl ref<struct<tv_sec:int<8>,tv_usec:int<8>>> v31 = ( var(undefined(type<struct<tv_sec:int<8>,tv_usec:int<8>>>)));
                    gettimeofday(scalar.to.array(v31), get.null(type<array<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>,1>>));
                    if((( *composite.ref.elem(v29, sec, type<int<4>>))<0)) (composite.ref.elem(v29, sec, type<int<4>>) := CAST<int<4>>(( *composite.ref.elem(v31, tv_sec, type<int<8>>)))) else { };
                    (array.ref.elem.1D(v30, 0) := (CAST<real<8>>((( *composite.ref.elem(v31, tv_sec, type<int<8>>))-CAST<int<8>>(( *composite.ref.elem(v29, sec, type<int<4>>)))))+(1.0e-6*CAST<real<8>>(( *composite.ref.elem(v31, tv_usec, type<int<8>>))))));
                }(v33, scalar.to.array(v34));
                return ( *v34);
            }(v36));
        }(v1, 0);
        {
            <m id=7>for(decl int<4> v135 = 1 .. (10+1) : 1) {
                <m id=6>if(('W'!='S')) printf(string.as.char.pointer("        %d\n"), varlist.pack((v135))) else { }</m>;
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v89, int<4> v90){
                    decl ref<int<4>> v91 = ( var(0));
                    decl ref<int<4>> v92 = ( var(0));
                    decl ref<int<4>> v93 = ( var(0));
                    decl ref<int<4>> v94 = ( var(0));
                    decl ref<int<4>> v95 = ( var(0));
                    decl ref<int<4>> v96 = ( var((16-10)));
                    decl ref<int<4>> v97 = ( var(0));
                    decl ref<int<4>> v98 = ( var(0));
                    decl ref<int<4>> v99 = ( var(0));
                    decl ref<vector<int<4>,65536>> v100 = ( var(undefined(type<vector<int<4>,65536>>)));
                    <m id=1>{
                        (vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v90)) := v90);
                        (vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>((v90+10))) := (int.lshift(1, 16)-v90));
                        {
                            for(decl int<4> v102 = 0 .. 5 : 1) 
                                (vector.ref.elem(composite.ref.elem(v89, partial_verify_vals, type<vector<int<4>,5>>), CAST<uint<4>>(v102)) := ( *vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v89, test_index_array, type<vector<int<4>,5>>), CAST<uint<4>>(v102)))))))
                            ;
                            (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
                        };
                        {
                            for(decl int<4> v104 = 0 .. int.lshift(1, 16) : 1) 
                                (vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v104)) := 0)
                            ;
                            (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                        };
                    }</m>;
                    {
                        <m id=2>for(decl int<4> v106 = 0 .. int.lshift(1, 16) : 1) 
                            (vector.ref.elem(v100, CAST<uint<4>>(v106)) := 0)
                        </m>;
                        (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                    };
                    {
                        <m id=3>for(decl int<4> v108 = 0 .. int.lshift(1, 20) : 1) {
                            (vector.ref.elem(composite.ref.elem(v89, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v108)) := ( *vector.ref.elem(composite.ref.elem(v89, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v108))));
                            int.postInc(vector.ref.elem(v100, CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v89, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v108))))));
                        }</m>;
                        (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-0))/CAST<real<8>>(1))))*1)));
                    };
                    {
                        for(decl int<4> v110 = 0 .. (int.lshift(1, 16)-1) : 1) 
                            (vector.ref.elem(v100, CAST<uint<4>>((v110+1))) := (( *vector.ref.elem(v100, CAST<uint<4>>((v110+1))))+( *vector.ref.elem(v100, CAST<uint<4>>(v110)))))
                        ;
                        (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>(((int.lshift(1, 16)-1)-0))/CAST<real<8>>(1))))*1)));
                    };
                    <m id=4>{
                        {
                            for(decl int<4> v112 = 0 .. int.lshift(1, 16) : 1) 
                                (vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v112)) := (( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>(v112)))+( *vector.ref.elem(v100, CAST<uint<4>>(v112)))))
                            ;
                            (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 16)-0))/CAST<real<8>>(1))))*1)));
                        };
                    }</m>;
                    <m id=5>{
                        {
                            for(decl int<4> v121 = 0 .. 5 : 1) {
                                (v93 := ( *vector.ref.elem(composite.ref.elem(v89, partial_verify_vals, type<vector<int<4>,5>>), CAST<uint<4>>(v121))));
                                if(((0<=( *v93))&&bind(){fun(ref<int<4>> v118)return (( *v118)<=(int.lshift(1, 20)-1))(v93)})) {
                                    decl int<4> v113 = CAST<int<4>>('W');
                                    switch(v113) {
                                        case 'S': if((v121<=2)) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+v90))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-v90))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        case 'W': if((v121<2)) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+(v90-2)))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-v90))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        case 'A': if((v121<=2)) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+(v90-1)))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-(v90-1)))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        case 'B': if((((v121==1)||bind(){fun(ref<int<4>> v114)return (( *v114)==2)(( var(v121)))})||bind(){fun(ref<int<4>> v116)return (( *v116)==4)(( var(v121)))})) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+v90))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-v90))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        case 'C': if((v121<=2)) {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))+v90))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        } else {
                                            if(int.ne(( *vector.ref.elem(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>), CAST<uint<4>>((( *v93)-1)))), (( *vector.ref.elem(composite.ref.elem(v89, test_rank_array, type<vector<int<4>,5>>), CAST<uint<4>>(v121)))-v90))) {
                                                printf(string.as.char.pointer("Failed partial verification: iteration %d, test key %d\n"), varlist.pack((v90, v121)));
                                            } else int.postInc(composite.ref.elem(v89, passed_verification, type<int<4>>));
                                        }
                                        default: { }
                                    };
                                } else { };
                            };
                            (v91 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((5-0))/CAST<real<8>>(1))))*1)));
                        };
                        if((v90==10)) (composite.ref.elem(v89, key_buff_ptr_global, type<ref<array<int<4>,1>>>) := ref.vector.to.ref.array(composite.ref.elem(v89, key_buff1, type<vector<int<4>,1048576>>))) else { };
                    }</m>;
                }(v1, v135);
            }</m>;
            (v126 := (1+(CAST<int<4>>(ceil((CAST<real<8>>(((10+1)-1))/CAST<real<8>>(1))))*1)));
        };
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v39, int<4> v40){
            decl ref<real<8>> v41 = ( var(0.0));
            decl ref<real<8>> v42 = ( var(0.0));
            (v42 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v33){
                decl ref<real<8>> v34 = ( var(0.0));
                fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v29, ref<array<real<8>,1>> v30){
                    decl ref<struct<tv_sec:int<8>,tv_usec:int<8>>> v31 = ( var(undefined(type<struct<tv_sec:int<8>,tv_usec:int<8>>>)));
                    gettimeofday(scalar.to.array(v31), get.null(type<array<struct<tz_minuteswest:int<4>,tz_dsttime:int<4>>,1>>));
                    if((( *composite.ref.elem(v29, sec, type<int<4>>))<0)) (composite.ref.elem(v29, sec, type<int<4>>) := CAST<int<4>>(( *composite.ref.elem(v31, tv_sec, type<int<8>>)))) else { };
                    (array.ref.elem.1D(v30, 0) := (CAST<real<8>>((( *composite.ref.elem(v31, tv_sec, type<int<8>>))-CAST<int<8>>(( *composite.ref.elem(v29, sec, type<int<4>>)))))+(1.0e-6*CAST<real<8>>(( *composite.ref.elem(v31, tv_usec, type<int<8>>))))));
                }(v33, scalar.to.array(v34));
                return ( *v34);
            }(v39));
            (v41 := (( *v42)-( *vector.ref.elem(composite.ref.elem(v39, start, type<vector<real<8>,64>>), CAST<uint<4>>(v40)))));
            (vector.ref.elem(composite.ref.elem(v39, elapsed, type<vector<real<8>,64>>), CAST<uint<4>>(v40)) := (( *vector.ref.elem(composite.ref.elem(v39, elapsed, type<vector<real<8>,64>>), CAST<uint<4>>(v40)))+( *v41)));
        }(v1, 0);
        (v129 := fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v44, int<4> v45){
            return ( *vector.ref.elem(composite.ref.elem(v44, elapsed, type<vector<real<8>,64>>), CAST<uint<4>>(v45)));
        }(v1, 0));
        fun(ref<struct<start:vector<real<8>,64>,elapsed:vector<real<8>,64>,sec:int<4>,B_test_index_array:vector<int<4>,5>,B_test_rank_array:vector<int<4>,5>,C_test_index_array:vector<int<4>,5>,C_test_rank_array:vector<int<4>,5>,KS:int<4>,R23:real<8>,R46:real<8>,key_buff_ptr_global:ref<array<int<4>,1>>,passed_verification:int<4>,key_array:vector<int<4>,1048576>,key_buff1:vector<int<4>,1048576>,key_buff2:vector<int<4>,1048576>,partial_verify_vals:vector<int<4>,5>,test_index_array:vector<int<4>,5>,test_rank_array:vector<int<4>,5>,S_test_index_array:vector<int<4>,5>,S_test_rank_array:vector<int<4>,5>,W_test_index_array:vector<int<4>,5>,W_test_rank_array:vector<int<4>,5>,A_test_index_array:vector<int<4>,5>,A_test_rank_array:vector<int<4>,5>,T23:real<8>,T46:real<8>>> v78){
            decl ref<int<4>> v79 = ( var(0));
            decl ref<int<4>> v80 = ( var(0));
            decl ref<int<4>> v81 = ( var(0));
            decl ref<int<4>> v82 = ( var(0));
            decl ref<int<4>> v83 = ( var(0));
            {
                for(decl int<4> v85 = 0 .. int.lshift(1, 20) : 1) 
                    (vector.ref.elem(composite.ref.elem(v78, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(int.preDec(array.ref.elem.1D(( *composite.ref.elem(v78, key_buff_ptr_global, type<ref<array<int<4>,1>>>)), CAST<uint<4>>(( *vector.ref.elem(composite.ref.elem(v78, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v85)))))))) := ( *vector.ref.elem(composite.ref.elem(v78, key_buff2, type<vector<int<4>,1048576>>), CAST<uint<4>>(v85))))
                ;
                (v79 := (0+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-0))/CAST<real<8>>(1))))*1)));
            };
            (v80 := 0);
            {
                for(decl int<4> v87 = 1 .. int.lshift(1, 20) : 1) 
                    if((( *vector.ref.elem(composite.ref.elem(v78, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>((v87-1))))>( *vector.ref.elem(composite.ref.elem(v78, key_array, type<vector<int<4>,1048576>>), CAST<uint<4>>(v87))))) int.postInc(v80) else { }
                ;
                (v79 := (1+(CAST<int<4>>(ceil((CAST<real<8>>((int.lshift(1, 20)-1))/CAST<real<8>>(1))))*1)));
            };
            if(int.ne(( *v80), 0)) {
                printf(string.as.char.pointer("Full_verify: number of keys out of sort: %d\n"), varlist.pack((( *v80))));
            } else int.postInc(composite.ref.elem(v78, passed_verification, type<int<4>>));
        }(v1);
        if(int.ne(( *composite.ref.elem(v1, passed_verification, type<int<4>>)), ((5*10)+1))) (composite.ref.elem(v1, passed_verification, type<int<4>>) := 0) else { };
        fun(ref<array<char,1>> v2, char v3, int<4> v4, int<4> v5, int<4> v6, int<4> v7, int<4> v8, real<8> v9, real<8> v10, ref<array<char,1>> v11, int<4> v12, ref<array<char,1>> v13, ref<array<char,1>> v14, ref<array<char,1>> v15, ref<array<char,1>> v16, ref<array<char,1>> v17, ref<array<char,1>> v18, ref<array<char,1>> v19, ref<array<char,1>> v20, ref<array<char,1>> v21){
            decl ref<ref<array<char,1>>> v22 = ( var(string.as.char.pointer("1000")));
            printf(string.as.char.pointer("\n\n %s Benchmark Completed\n"), varlist.pack((v2)));
            printf(string.as.char.pointer(" Class           =                        %c\n"), varlist.pack((CAST<int<4>>(v3))));
            if(((v5==0)&&bind(){fun(int<4> v23)return (v23==0)(v6)})) printf(string.as.char.pointer(" Size            =             %12d\n"), varlist.pack((v4))) else printf(string.as.char.pointer(" Size            =              %3dx%3dx%3d\n"), varlist.pack((v4, v5, v6)));
            printf(string.as.char.pointer(" Iterations      =             %12d\n"), varlist.pack((v7)));
            printf(string.as.char.pointer(" Threads         =             %12d\n"), varlist.pack((v8)));
            printf(string.as.char.pointer(" Time in seconds =             %12.2f\n"), varlist.pack((0.0)));
            printf(string.as.char.pointer(" Mop/s total     =             %12.2f\n"), varlist.pack((0.0)));
            printf(string.as.char.pointer(" Operation type  = %24s\n"), varlist.pack((v11)));
            if(int.ne(v12, 0)) printf(string.as.char.pointer(" Verification    =               SUCCESSFUL\n"), varlist.pack(())) else printf(string.as.char.pointer(" Verification    =             UNSUCCESSFUL\n"), varlist.pack(()));
            printf(string.as.char.pointer(" Version         =             %12s\n"), varlist.pack((v13)));
            printf(string.as.char.pointer(" Compile date    =             %12s\n"), varlist.pack((v14)));
            printf(string.as.char.pointer("\n Compile options:\n"), varlist.pack(()));
            printf(string.as.char.pointer("    CC           = %s\n"), varlist.pack((v15)));
            printf(string.as.char.pointer("    CLINK        = %s\n"), varlist.pack((v16)));
            printf(string.as.char.pointer("    C_LIB        = %s\n"), varlist.pack((v17)));
            printf(string.as.char.pointer("    C_INC        = %s\n"), varlist.pack((v18)));
            printf(string.as.char.pointer("    CFLAGS       = %s\n"), varlist.pack((v19)));
            printf(string.as.char.pointer("    CLINKFLAGS   = %s\n"), varlist.pack((v20)));
            printf(string.as.char.pointer("    RAND         = %s\n"), varlist.pack((v21)));
        }(string.as.char.pointer("IS"), 'W', int.lshift(1, 20), 0, 0, 10, ( *v128), ( *v129), ((CAST<real<8>>((10*int.lshift(1, 20)))/( *v129))/1000000.), string.as.char.pointer("keys ranked"), ( *composite.ref.elem(v1, passed_verification, type<int<4>>)), string.as.char.pointer("2.3"), string.as.char.pointer("02 Dec 2010"), string.as.char.pointer("cc"), string.as.char.pointer("cc"), string.as.char.pointer("-lm"), string.as.char.pointer("-I../common"), string.as.char.pointer("-O3 "), string.as.char.pointer("-lm"), string.as.char.pointer("randlc"));
    }

