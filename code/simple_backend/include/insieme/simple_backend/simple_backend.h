/**
 * Copyright (c) 2002-2013 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please 
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details 
 * regarding third party software licenses.
 */

#pragma once

#include "insieme/core/ast_node.h"

/**
 * This header file represents a facade for the simple_backend. Other modules within the insieme compiler
 * may access the backend using the interfaces described within this file.
 */

namespace insieme {
namespace simple_backend {

class TargetCode;
typedef std::shared_ptr<TargetCode> TargetCodePtr;

/**
 * The main facade function of the simple backend. This function converts the given
 * IR representation into C99-target code.
 *
 * @param source the program to be converted
 * @return a pointer to the converted target code
 */
TargetCodePtr convert(const core::ProgramPtr& source);



// TODO: move this to a general "backend interface specification" file

/**
 * An abstract class used to represent target code generated by the simple backend.
 */
class TargetCode {

	/**
	 * The IR code representation this target code is based on.
	 */
	const core::ProgramPtr source;

protected:

	/**
	 * A protected constructor for this class to be used by derived versions.
	 */
	TargetCode(const core::ProgramPtr& source) : source(source) {}

public:

	/**
	 * A virtual default constructor allowing subclasses to be properly destroyed.
	 */
	virtual ~TargetCode() {}

	/**
	 * Obtains the source
	 */
	const core::ProgramPtr& getSource() const {
		return source;
	}

	/**
	 * Requests this code to be printed into the given output stream.
	 *
	 * @param out the stream to be printed to.
	 * @return a reference to the given output stream.
	 */
	virtual std::ostream& printTo(std::ostream& out) const =0;
};


} // end: namespace simple_backend
} // end: namespace insieme

/**
 * The output operator overloaded for instances of the target code class.
 */
std::ostream& operator<<(std::ostream& out, const insieme::simple_backend::TargetCode& code);

