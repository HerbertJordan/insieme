
let int = int<4>;
let four = lit("4" : intTypeParam<4>);
let initUndef = lit("vector.init.undefined":(type<'elem>, intTypeParam<#a>) -> vector<'elem,#a>);
let initUniform = lit("vector.init.uniform":('elem, intTypeParam<#a>) -> vector<'elem,#a>);
let toUint = lit("to.uint":(intTypeParam<#n>) -> uint<8>);

unit main() {

	// an atomic increment
	let vector_permute = (vector<'a,#n> v, vector<uint<#a>, #m> p) -> vector<'a,#m>{
        ref<vector<'a, #m>> res = var(initUndef(lit('a), param(#m)));
        for (uint<8> i = 0u .. toUint(param(#m))){
            res[i] = v[p[i]];
        }
        return *res;
	};

    vector<int, 4> v = initUniform(0, four);
    ref<vector<uint<4>, 4>> p = var(initUniform(0u, four));

    vector_permute(v, *p);
}
