
let int = int<4>;

let pair = struct {
	int first;
	int second;
};

let obj = struct {
	int a;
	vector<int,4> b;
	pair c;
};

unit main() {

	ref<obj> o;
	
	// check element o.a
	o.a = 0;
	print("o.a = %d\n", *o.a);
	
	// updated member a directly
	ref<int> x = ref.narrow(o, dp.member(dp.root, lit("a")), lit(int));
	x = 12;
	print("Equal: %d\n", ref.eq(o.a, x));
	print("x = %d \t o.a = %d\n", *x, *o.a);

	// udpate element of b directly
	o.b[2u] = 0;
	print("o.b[2] = %d\n", *o.b[2u]);
	
	ref<int> y = ref.narrow(o, dp.element(dp.member(dp.root, lit("b")), 2u), lit(int));
	y = 12;
	print("Equal: %d\n", ref.eq(o.b[2u], y));
	print("y = %d \t o.b[2] = %d\n", *y, *o.b[2u]);
	
	
	// expand a definition
	ref<vector<int,4>> v = ref.expand(y, dp.element(dp.root, 2u), lit(vector<int,4>));
	v[1u] = 10;
	v[2u] = 14;
	
	print("Equal: %d\n", ref.eq(o.b, v));
	print("v[1] = %d \t v[2] = %d \t o.v[1] = %d \t o.v[2] = %d \t y = %d\n",
			*v[1u], *v[2u], *o.b[1u], *o.b[2u], *y);
	
	
	// handle nested element
	ref<int> first = ref.narrow(o, dp.member(dp.member(dp.root, lit("c")), lit("first")), lit(int));
	
	// check reference equality
	print("Equal: %d\n", ref.eq(o.c.first, first));
	
	// and the reverse
	ref<obj> full = ref.expand(first, dp.member(dp.member(dp.root, lit("c")), lit("first")), lit(obj));
	print("Equal: %d\n", ref.eq(o,full));
	
}
