#include "insieme/core/ir_node_tryout.h"

namespace insieme {
namespace core {

	namespace detail {

		struct HashVisitor : public boost::static_visitor<std::size_t> {
			template<typename T>
			std::size_t operator()(const T& value) const {
				return boost::hash<T>()(value);
			}
		};

		std::size_t hash(const Node::Value& value) {
			return boost::apply_visitor(HashVisitor(), value);
		}

		std::size_t hash(NodeType type, const NodeList& children) {
			std::size_t seed;
			boost::hash_combine(seed, type);
			insieme::utils::hashList(seed, children, deref<NodePtr>());
			return seed;
		}


		struct IsValueVisitor : public boost::static_visitor<bool> {
			bool operator()(const Node::Value& value) const { return true; }
			template<typename T> bool operator()(const T& other) const { return false; }
		};

	}

	Node::Node(const Value& value)
		: HashableImmutableData<Node>(detail::hash(value)), data(value) {}

	Node::Node(NodeType type, const NodeList& children)
		: HashableImmutableData<Node>(detail::hash(type, children)), data(std::make_pair(type, children)) {}


	bool Node::isValue() const {
		return boost::apply_visitor(detail::IsValueVisitor(), data);
	}


	std::ostream& Node::printTo(std::ostream& out) const {
		return out << "node";
	}

} // end namespace core
} // end namespace insieme
