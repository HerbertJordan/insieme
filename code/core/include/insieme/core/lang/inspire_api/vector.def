/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */



// Vectors ------------------------------------------------------------------------------------------------------------

GROUP(VectorOp, VectorSubscript, VectorInitUniform, VectorInitUndefined, VectorRefElem, VectorPointwise, 
      VectorPointwiseUnary, VectorReduction, VectorPermute, VectorProjection, VectorRefProjection, RefVectorToRefArray)
GROUP(Pointwise, VectorPointwise, VectorPointwiseUnary)

// deprecated
LITERAL(VectorSubscript,      	"vector.subscript",      	"(vector<'elem,#l>, uint<#a>) -> 'elem")
LITERAL(VectorInitUndefined,  	"vector.init.undefined",  	"(type<'elem>, intTypeParam<#a>) -> vector<'elem,#a>")
DERIVED(VectorInitUniform,    	"vector.init.uniform",  "('elem value, intTypeParam<#a> size) -> vector<'elem,#a>{"
                                                        "    ref<vector<'elem, #a>> res = var(vector.init.undefined(lit('elem), param(#a)));"
                                                        "    for (uint<8> i = 0ul .. to.uint(param(#a))){"
                                                        "        res[i] = value;"
                                                        "    }"
                                                        "    return *res;"
                                                        "}")

//TODO: I would love to convert this, but i find no way to manipulate lists in IR
LITERAL(VectorInitPartial, 		"vector.init.partial",		"(list<'elem>, intTypeParam<#n>) -> vector<'elem,#n>")

DERIVED(VectorRefElem, 			"vector.ref.elem", 			
        "(ref<vector<'elem,#l>> v, uint<8> i) -> ref<'elem> { return ref.narrow(v, dp.element(dp.root, i), lit('elem)); }")

DERIVED(VectorPointwise,		"vector.pointwise",			
		"(('elem1, 'elem2) -> 'res op) -> (vector<'elem1,#l>, vector<'elem2,#l>) => vector<'res, #l> {"
		"	return (vector<'elem1,#l> v1, vector<'elem2,#l> v2) => (vector<'elem1,#l> v1, vector<'elem2,#l> v2, ('elem1, 'elem2) -> 'res op) -> vector<'res,#l> {"
		"		ref<vector<'res,#l>> res = var(vector<'res,#l>);"
		"		for(uint<8> i = 0u .. to.uint(param(#l))-1u ) { res[i] = op(v1[i], v2[i]); }"
		"		return *res;"
		"	}(v1, v2, op);"
		"}")
								
DERIVED(VectorPointwiseUnary,		"vector.pointwise.unary",
		"(('elem) -> 'res op) -> (vector<'elem,#l>) => vector<'res, #l> {"
		"	return (vector<'elem,#l> v) => (vector<'elem,#l> v, ('elem) -> 'res op) -> vector<'res,#l> {"
		"		ref<vector<'res,#l>> res = var(vector<'res,#l>);"
		"		for(uint<8> i = 0u .. to.uint(param(#l))-1u ) { res[i] = op(v[i]); }"
		"		return *res;"
		"	}(v, op);"
		"}")

DERIVED(VectorReduction,      	"vector.reduction", "(vector<'a,#n> v, 'b init, ('b, 'a) -> 'b f) -> 'b {"
                                                    "    ref<'b> res = var(init);"
                                                    "    for (uint<8> i = 0u .. to.uint(param(#n))){"
                                                    "       res = f(*res, v[0]);"
                                                    "    };"
                                                    "    return *res;"
                                                    "}")

DERIVED(VectorPermute,        	"vector.permute",   "(vector<'a,#n> v, vector<uint<#a>, #m> p) -> vector<'a,#m>{"
                                                    "    ref<vector<'a, #m>> res = var(vector.init.undefined(lit('a), param(#m)));"
                                                    "    for (uint<8> i = 0u .. to.uint(param(#m))){"
                                                    "        res[i] = v[p[i]];"
                                                    "    }"
                                                    "    return *res;"
                                                    "}")


DERIVED(VectorProjection, 		"vector.projection",
                                 "(vector<'elem, #n> v, intTypeParam<#a> begin, intTypeParam<#b> end) -> vector<'elem, #b>{"
                                 "    ref<vector<'elem, #b>> res = var(vector.init.undefined(lit('elem), param(#b)));"
                                 "    for (uint<8> i = 0ul .. to.uint(param(#b))-  to.uint(param(#a))){"
                                 "        res[i] = v[i + to.uint(param(#a))];"
                                 "    }"
                                 "    return *res;"
                                 "}")

DERIVED(VectorRefProjection, 	"vector.ref.projection",
"(ref<vector<'elem, #n>> v, intTypeParam<#a> begin, intTypeParam<#b> end) -> ref<vector<'elem, #b>>{"
"   return  ref.reinterpret(array.view(ref.reinterpret(v, lit(array<'elem,1>)), uint.to.int(to.uint(param(#a)),param(8))), lit(vector<'elem, #b>) );"
"}")


DERIVED(RefVectorToRefArray, 	"ref.vector.to.ref.array",		"(ref<vector<'elem,#l>> a) -> ref<array<'elem,1>> { return ref.reinterpret(a, lit(array<'elem,1>)); }")
DERIVED(RefVectorToSrcArray, 	"ref.vector.to.src.array",		"(ref<vector<'elem,#l>> a) -> src<array<'elem,1>> { return ref.reinterpret(a, lit(array<'elem,1>)); }")


