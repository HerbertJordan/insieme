/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */


// Tunable Options ----------------------------------------------------------------------------------------------------

LITERAL(Pick, "pick", "(list<'a>)->'a")
LITERAL(PickInRange, "pickInRange", "(int<4>, 'a, int<4>, int<4>, int<4>)->'a")


// Parallel Constructs ------------------------------------------------------------------------------------------------

GROUP(ParallelOp, Parallel, ParallelDetached)

LITERAL(Parallel, "parallel", "(job) -> threadgroup")
LITERAL(ParallelDetached, "parallel&", "(job) -> unit")

GROUP(MergeOp, Merge, MergeAll)

LITERAL(Merge, "merge", "(threadgroup) -> unit")
LITERAL(MergeAll, "mergeAll", "() -> unit")


GROUP(ThreadOp, GetThreadGroup, GetThreadId)

LITERAL(GetThreadGroup, "getThreadGroup", "(uint<#a>) -> threadgroup")
LITERAL(GetThreadId, "getThreadID", "(uint<#a>) -> int<4>")
LITERAL(GetGroupSize, "getGroupSize", "(uint<#a>) -> int<4>")

// the work-sharing construct
DERIVED(PFor, "pfor", "(threadgroup g, int<#a> a, int<#a> b, int<#a> c, (int<#a>, int<#a>, int<#a>)=>'a f)->unit { f(a,b,c); }")

// the data-sharing construct
LITERAL(Redistribute, "redistribute", "(threadgroup, 'a, (ref<array<'a,1>>, uint<8>, uint<8>)=>'b )->'b")

// some derivades
DERIVED(Barrier, "barrier", "(threadgroup g)->unit { redistribute(g, 0, (ref<array<int<4>,1>> _, uint<8> _, uint<8> _)->unit { return; }); }")
DERIVED(PReduce, "preduce", "(threadgroup g, 'a v, ('b,'a)->'b op, 'b init)->'b { return redistribute(g, v, (ref<array<'a,1>> data, uint<8> size, uint<8> pid)=> array.reduce(data, size, op, init) ); }")


// Channels -----------------------------------------------------------------------------------------------------------

LITERAL(ChannelCreate, 		"channel.create", 		"(type<'a>, intTypeParam<#n>) -> channel<'a,#n>")
LITERAL(ChannelRelease, 	"channel.release", 		"(channel<'a,#n>) -> unit")

LITERAL(ChannelSend, 		"channel.send", 		"(channel<'a,#n>, 'a) -> unit")
LITERAL(ChannelRecv, 		"channel.recv", 		"(channel<'a,#n>) -> 'a")
LITERAL(ChannelProbe, 		"channel.probe", 		"(channel<'a,#n>) -> bool")

// Atomics ------------------------------------------------------------------------------------------------------------

DERIVED(Atomic, "atomic",
		"(ref<'a> v, ('a)=>bool p, ('a)=>'a f)->'a { "
		"	auto res = *v; "
		"	if (p(*v)) { "
		"		v = f(*v); "
		"	} "
		"	return res; "
		"} ")

// arithmetic

DERIVED(AtomicFetchAndAdd, "atomic.fetch.and.add",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	let test = ('a _)=>true; "
		"	let apply = ('a x)=>x+exp; "
		"	return atomic(v, test, apply); "
		"}  ")

DERIVED(AtomicAddAndFetch, "atomic.add.and.fetch",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	return atomic.fetch.and.add(v, exp) + exp; "
		"}  ")

DERIVED(AtomicFetchAndSub, "atomic.fetch.and.sub",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	let test = ('a _)=>true; "
		"	let apply = ('a x)=>x-exp; "
		"	return atomic(v, test, apply); "
		"}  ")

DERIVED(AtomicSubAndFetch, "atomic.sub.and.fetch",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	return atomic.fetch.and.sub(v, exp) - exp; "
		"}  ")

// bitwise

DERIVED(AtomicFetchAndAnd, "atomic.fetch.and.and",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	let test = ('a _) => true; "
		"	let apply = ('a x) => x & exp; "
		"	return atomic(v, test, apply); "
		"}  ")

DERIVED(AtomicAndAndFetch, "atomic.and.and.fetch",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	return atomic.fetch.and.and(v, exp) & exp; "
		"}  ")

DERIVED(AtomicFetchAndOr, "atomic.fetch.and.or",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	let test = ('a _) => true; "
		"	let apply = ('a x) => x | exp; "
		"	return atomic(v, test, apply); "
		"}  ")

DERIVED(AtomicOrAndFetch, "atomic.or.and.fetch",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	return atomic.fetch.and.or(v, exp) | exp; "
		"}  ")

DERIVED(AtomicFetchAndXor, "atomic.fetch.and.xor",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	let test = ('a _) => true; "
		"	let apply = ('a x) => x ^ exp; "
		"	return atomic(v, test, apply); "
		"}  ")

DERIVED(AtomicXorAndFetch, "atomic.xor.and.fetch",
		"(ref<'a> v, 'a exp) -> 'a { "
		"	return atomic.fetch.and.xor(v, exp) ^ exp; "
		"}  ")

// test and set

DERIVED(AtomicValCompareAndSwap, "atomic.val.compare.and.swap",
		"(ref<'a> v, 'a _old, 'a _new) -> 'a { "
		"	let test = ('a x) => x == _old; "
		"	let apply = ('a _) => _new; "
		"	return atomic(v, test, apply); "
		"}  ")

DERIVED(AtomicBoolCompareAndSwap, "atomic.bool.compare.and.swap",
		"(ref<'a> v, 'a _old, 'a _new) -> bool { "
		"	let test = ('a x) => x == _old; "
		"	let apply = ('a _) => _new; "
		"	return atomic(v, test, apply) == _new; "
		"}  ")



// Range Handling -----------------------------------------------------------------------------------------------------

TYPE(JobRange, "JobRange")

LITERAL(CreateMinRange,     "MinRange",    		"(uint<8>)->JobRange")							// lower boundery only
LITERAL(CreateBoundRange,   "BoundRange",    	"(uint<8>, uint<8>)->JobRange")				// lower and upper bound
LITERAL(CreateBoundRangeMod,"BoundRangeMod",    "(uint<8>, uint<8>, uint<8>)->JobRange")		// lower, upper and modula bound


// Locks -----------------------------------------------------------

TYPE(Lock, "lock")

LITERAL(LockAcquire,  "lock.acquire", "(ref<lock>)->unit")
LITERAL(LockRelease, "lock.release", "(ref<lock>)->unit")
LITERAL(LockInit,  "lock.init", "(ref<lock>)->unit")

// --------------------------------------------------------------------------------------------------------------------
