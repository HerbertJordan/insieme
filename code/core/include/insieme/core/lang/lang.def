/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

#ifndef TYPE
#define TYPE(_id, _spec)
#endif
#ifndef LITERAL
#define LITERAL(_id, _name, _spec)
#endif
#ifndef DERIVED
#define DERIVED(_id, _name, _code) LITERAL(_id, _name, fail)
#endif
#ifndef GROUP
#define GROUP(_id, ...)
#endif
#ifndef OPERATOR
#define OPERATOR(_id, _str)
#endif
#ifndef OPERATION
#define OPERATION(_type, _op, _name, _spec)
#endif
#ifndef DERIVED_OP
#define DERIVED_OP(_type, _op, _name, _spec)
#endif
#ifndef SUB_TYPE
#define SUB_TYPE(_subtype, _supertype)
#endif


// Types --------------------------------------------------------------------------------------------------------------
TYPE(Unit,   "unit")

TYPE(Any, "any")
TYPE(AnyRef, "ref<any>")

TYPE(Char,   "char")
TYPE(WChar16,  "wchar<16>")
TYPE(WChar32,  "wchar<32>")
TYPE(String, "ref<array<char,1>>")
TYPE(Identifier, "identifier")

GROUP(UnsignedInt, UInt1, UInt2, UInt4, UInt8, UInt16, UIntInf, UIntGen)
GROUP(SignedInt, Int1, Int2, Int4, Int8, Int16, IntInf, IntGen)
GROUP(Int, UnsignedInt, SignedInt)
GROUP(WChar, WChar16, WChar32)

GROUP(Primitive, Any, Bool, Char, WChar, Int, Real)
GROUP(IRBuiltin, Primitive, Unit)

TYPE(IntGen, "int<#a>")
TYPE(UIntGen,"uint<#a>")

TYPE(Int1,    "int<1>")
TYPE(UInt1,   "uint<1>")
TYPE(Int2,    "int<2>")
TYPE(UInt2,   "uint<2>")
TYPE(Int4,    "int<4>")
TYPE(UInt4,   "uint<4>")
TYPE(Int8,    "int<8>")
TYPE(UInt8,   "uint<8>")
TYPE(Int16,   "int<16>")
TYPE(UInt16,  "uint<16>")
TYPE(IntInf,  "int<#inf>")
TYPE(UIntInf, "uint<#inf>")

SUB_TYPE(Int1, Int2)
SUB_TYPE(Int2, Int4)
SUB_TYPE(Int4, Int8)
SUB_TYPE(Int8, IntInf)

SUB_TYPE(UInt1, UInt2)
SUB_TYPE(UInt2, UInt4)
SUB_TYPE(UInt4, UInt8)
SUB_TYPE(UInt8, UIntInf)

SUB_TYPE(UInt1, Int2)
SUB_TYPE(UInt2, Int4)
SUB_TYPE(UInt4, Int8)

SUB_TYPE(UIntInf, IntInf)

GROUP(Real, RealGen, RealInf, Float, Double, LongDouble)

TYPE(RealGen, "real<#a>")
TYPE(RealInf, "real<#inf>")
TYPE(Real4,   "real<4>")
TYPE(Real8,   "real<8>")
TYPE(Real16,   "real<16>")

// aliases:
TYPE(Float,   "real<4>")
TYPE(Double,  "real<8>")
TYPE(LongDouble,  "real<16>")

SUB_TYPE(Float, Double)
SUB_TYPE(Double, RealInf)

GROUP(ScalarType, Int, Real)

GROUP(BoolLiteral, True, False)

TYPE(Bool, "bool")
LITERAL(True,  "true",  "bool")
LITERAL(False, "false", "bool")

TYPE(Alpha, "'a")
TYPE(TypeLiteralTypeGen, "type<'a>")
TYPE(RefAlpha, "ref<'a>")

TYPE(VarList, "var_list")

// Parallel Types -----------------------------------------------------------------------------------------------------

TYPE(Job, "job")
TYPE(ThreadGroup, "threadgroup")

// The Unit Type Constant ---------------------------------------------------------------------------------------------

LITERAL(UnitConstant, "unit", "unit")

// No Argument -> Unit Type -------------------------------------------------------------------------------------------

TYPE(NoArgsOpType, "() -> unit")

// Operators ----------------------------------------------------------------------------------------------------------

// binary
OPERATOR(Add, 	 "+")  //  0
OPERATOR(Sub,	 "-")  //  1
OPERATOR(Mul, 	 "*")  //  2
OPERATOR(Div, 	 "/")  //  3
OPERATOR(Mod, 	 "%")  //  4
OPERATOR(And, 	 "&")  //  5
OPERATOR(Or, 	 "|")  //  6
OPERATOR(Xor, 	 "^")  //  7
OPERATOR(LShift, "<<") //  8
OPERATOR(RShift, ">>") //  9

// unary
OPERATOR(Not,	"~")   // 10
OPERATOR(Plus,	"+")   // 11
OPERATOR(Minus,	"-")   // 12

OPERATOR(PreInc,  "++")// 13
OPERATOR(PostInc, "++")// 14
OPERATOR(PreDec,  "--")// 15
OPERATOR(PostDec, "--")// 16

// logical
OPERATOR(LAnd, 	"&&")  // 17
OPERATOR(LOr, 	"||")  // 18
OPERATOR(LNot, 	"!")   // 19
OPERATOR(Eq, 	"==")  // 20
OPERATOR(Ne,	"!=")  // 21
OPERATOR(Lt, 	"<")   // 22
OPERATOR(Le,	"<=")  // 23
OPERATOR(Gt, 	">")   // 24
OPERATOR(Ge,	">=")  // 25

// Logical Operations -------------------------------------------------------------------------------------------------

GROUP(LogicOp, BoolLAnd, BoolLOr, BoolEq, BoolNe, BoolLNot)

OPERATION(Bool, Eq,   "bool_eq",  "(bool,bool) -> bool")
OPERATION(Bool, Ne,   "bool_ne",  "(bool,bool) -> bool")
OPERATION(Bool, LNot, "bool_not", "(bool) -> bool")
OPERATION(Bool, And,  "bool_band", "(bool,bool) -> bool")
OPERATION(Bool, Or,   "bool_bor", "(bool,bool) -> bool")
OPERATION(Bool, Xor,  "bool_bxor", "(bool,bool) -> bool")
OPERATION(Bool, Not,  "bool_bnot", "(bool) -> bool")

DERIVED_OP(Bool, LAnd, "bool_and", "lambda (bool a, ()=>bool b)->bool { if (a) return b(); return false; }")
DERIVED_OP(Bool, LOr,  "bool_or",  "lambda (bool a, ()=>bool b)->bool { if (a) return true; return b(); }")

// Arithmetic operations ----------------------------------------------------------------------------------------------

GROUP(IntArithOp, SignedIntAdd, SignedIntSub, SignedIntMul, SignedIntDiv, SignedIntMod, IncrementOp)
//      SignedIntPreInc, SignedIntPostInc, SignedIntPreDec, SignedIntPostDec)

OPERATION(SignedInt, Add,  "int_add", "(int<#a>,int<#a>) -> int<#a>")
OPERATION(SignedInt, Sub,  "int_sub", "(int<#a>,int<#a>) -> int<#a>")
OPERATION(SignedInt, Mul,  "int_mul", "(int<#a>,int<#a>) -> int<#a>")
OPERATION(SignedInt, Div,  "int_div", "(int<#a>,int<#a>) -> int<#a>")
OPERATION(SignedInt, Mod,  "int_mod", "(int<#a>,int<#a>) -> int<#a>")

// OPERATION(SignedInt, PreInc,  "int_preInc",  "(ref<int<#a>>) -> int<#a>")
// OPERATION(SignedInt, PostInc, "int_postInc", "(ref<int<#a>>) -> int<#a>")
OPERATION(SignedInt, PreDec,  "int_preDec",  "(ref<int<#a>>) -> int<#a>")
OPERATION(SignedInt, PostDec, "int_postDec", "(ref<int<#a>>) -> int<#a>")

GROUP(CharArithOp, CharAdd, CharSub, CharMul, CharDiv, CharMod, IncrementOp)

OPERATION(Char, Add,  "char_add", "(char,char) -> char")
OPERATION(Char, Sub,  "char_sub", "(char,char) -> char")
OPERATION(Char, Mul,  "char_mul", "(char,char) -> char")
OPERATION(Char, Div,  "char_div", "(char,char) -> char")
OPERATION(Char, Mod,  "char_mod", "(char,char) -> char")

// OPERATION(Char, PreInc,  "char_preInc",  "(ref<char>) -> char")
// OPERATION(Char, PostInc, "char_postInc", "(ref<char>) -> char")
OPERATION(Char, PreDec,  "char_preDec",  "(ref<char>) -> char")
OPERATION(Char, PostDec, "char_postDec", "(ref<char>) -> char")

GROUP(UIntArithOp, UnsignedIntAdd, UnsignedIntSub, UnsignedIntMul, UnsignedIntDiv, UnsignedIntMod,
IncrementOp)
//        UnsignedIntPreInc, UnsignedIntPostInc, UnsignedIntPreDec, UnsignedIntPostDec)

OPERATION(UnsignedInt, Add,  "uint_add", "(uint<#a>,uint<#a>) -> uint<#a>")
OPERATION(UnsignedInt, Sub,  "uint_sub", "(uint<#a>,uint<#a>) -> uint<#a>")
OPERATION(UnsignedInt, Mul,  "uint_mul", "(uint<#a>,uint<#a>) -> uint<#a>")
OPERATION(UnsignedInt, Div,  "uint_div", "(uint<#a>,uint<#a>) -> uint<#a>")
OPERATION(UnsignedInt, Mod,  "uint_mod", "(uint<#a>,uint<#a>) -> uint<#a>")

// OPERATION(UnsignedInt, PreInc,  "uint_preInc",  "(ref<uint<#a>>) -> uint<#a>")
// OPERATION(UnsignedInt, PostInc, "uint_postInc", "(ref<uint<#a>>) -> uint<#a>")
OPERATION(UnsignedInt, PreDec,  "uint_preDec",  "(ref<uint<#a>>) -> uint<#a>")
OPERATION(UnsignedInt, PostDec, "uint_postDec", "(ref<uint<#a>>) -> uint<#a>")


GROUP(RealArithOp, RealAdd, RealSub, RealMul, RealDiv)

OPERATION(Real, Add,  "real_add", "(real<#a>,real<#a>) -> real<#a>")
OPERATION(Real, Sub,  "real_sub", "(real<#a>,real<#a>) -> real<#a>")
OPERATION(Real, Mul,  "real_mul", "(real<#a>,real<#a>) -> real<#a>")
OPERATION(Real, Div,  "real_div", "(real<#a>,real<#a>) -> real<#a>")

GROUP(ArithOp, IntArithOp, UIntArithOp, RealArithOp)

DERIVED(GenPreInc, 		"gen_pre_inc",		"lambda (ref<'a> v)->'a { v=*v+lit(\"1\":'a); return *v; }")
DERIVED(GenPostInc, 	"gen_post_inc",		"lambda (ref<'a> v)->'a { decl auto tmp=*v; v=*v+lit(\"1\":'a); return tmp; }")
DERIVED(GenPreDec, 		"gen_pre_dec",		"lambda (ref<'a> v)->'a { v=*v-lit(\"1\":'a); return *v; }")
DERIVED(GenPostDec, 	"gen_post_dec",		"lambda (ref<'a> v)->'a { decl auto tmp=*v; v=*v-lit(\"1\":'a); return tmp; }")

GROUP(IncrementOp, GenPreInc, GenPostInc, GenPreDec, GenPostDec)
// SignedIntPreInc, SignedIntPostInc, SignedIntPreDec, SignedIntPostDec,
//        UnsignedIntPreInc, UnsignedIntPostInc, UnsignedIntPreDec, UnsignedIntPostDec)

GROUP(LinearIntOp, SignedIntAdd, SignedIntSub, SignedIntMul, SignedIntDiv, UnsignedIntAdd, UnsignedIntSub, UnsignedIntMul, UnsignedIntDiv, IncrementOp)

// Comparison Operations ----------------------------------------------------------------------------------------------

GROUP(CharCompOp, CharEq, CharNe, CharLt, CharGt, CharLe, CharGe)

OPERATION(Char, Eq, "char_eq", "(char,char) -> bool")
OPERATION(Char, Ne, "char_ne", "(char,char) -> bool")
OPERATION(Char, Lt, "char_lt", "(char,char) -> bool")
OPERATION(Char, Gt, "char_gt", "(char,char) -> bool")
OPERATION(Char, Le, "char_le", "(char,char) -> bool")
OPERATION(Char, Ge, "char_ge", "(char,char) -> bool")

GROUP(IntCompOp, SignedIntEq, SignedIntNe, SignedIntLt, SignedIntGt, SignedIntLe, SignedIntGe)

OPERATION(SignedInt, Eq, "int_eq", "(int<#a>,int<#a>) -> bool")
OPERATION(SignedInt, Ne, "int_ne", "(int<#a>,int<#a>) -> bool")
OPERATION(SignedInt, Lt, "int_lt", "(int<#a>,int<#a>) -> bool")
OPERATION(SignedInt, Gt, "int_gt", "(int<#a>,int<#a>) -> bool")
OPERATION(SignedInt, Le, "int_le", "(int<#a>,int<#a>) -> bool")
OPERATION(SignedInt, Ge, "int_ge", "(int<#a>,int<#a>) -> bool")

GROUP(UIntCompOp, UnsignedIntEq, UnsignedIntNe, UnsignedIntLt, UnsignedIntGt, UnsignedIntLe, UnsignedIntGe)

OPERATION(UnsignedInt, Eq, "uint_eq", "(uint<#a>,uint<#a>) -> bool")
OPERATION(UnsignedInt, Ne, "uint_ne", "(uint<#a>,uint<#a>) -> bool")
OPERATION(UnsignedInt, Lt, "uint_lt", "(uint<#a>,uint<#a>) -> bool")
OPERATION(UnsignedInt, Gt, "uint_gt", "(uint<#a>,uint<#a>) -> bool")
OPERATION(UnsignedInt, Le, "uint_le", "(uint<#a>,uint<#a>) -> bool")
OPERATION(UnsignedInt, Ge, "uint_ge", "(uint<#a>,uint<#a>) -> bool")

GROUP(RealCompOp, RealEq, RealNe, RealLt, RealGt, RealLe, RealGe)

OPERATION(Real, Eq, "real_eq", "(real<#a>,real<#a>) -> bool")
OPERATION(Real, Ne, "real_ne", "(real<#a>,real<#a>) -> bool")
OPERATION(Real, Lt, "real_lt", "(real<#a>,real<#a>) -> bool")
OPERATION(Real, Gt, "real_gt", "(real<#a>,real<#a>) -> bool")
OPERATION(Real, Le, "real_le", "(real<#a>,real<#a>) -> bool")
OPERATION(Real, Ge, "real_ge", "(real<#a>,real<#a>) -> bool")

// Type conversion Operations -----------------------------------------------------------------------------------------

GROUP(ScalarCast, ToInt, ToUint, ToReal, ToChar, ToBool)

      // TO INT
GROUP( ToInt, UnsignedToInt, WCharToInt, RealToInt, CharToInt, BoolToInt, IntPrecisionFix)
LITERAL (UnsignedToInt,	"uint_to_int",    "(uint<#a>,intTypeParam<#b>) -> int<#b>")
LITERAL (RealToInt,		"real_to_int",    "(real<#a>,intTypeParam<#b>) -> int<#b>")
LITERAL (WCharToInt,	"wchar_to_int",   "(wchar<#a>,intTypeParam<#b>) -> int<#b>")
LITERAL (CharToInt,		"char_to_int",    "(char,intTypeParam<#b>) -> int<#b>")
LITERAL (IntPrecisionFix,"int_precision",    "(int<#a>,intTypeParam<#b>) -> int<#b>")
DERIVED (BoolToInt,		"bool_to_int",    "lambda (bool b,intTypeParam<#b> t) -> int<#b> { return (b)?(int_precision(1,param(#b))):(int_precision(0,param(#b))); }")

      // TO UINT
GROUP( ToUint, SignedToUnsigned, WCharToUnsigned, RealToUnsigned, CharToUnsigned, BoolToUnsigned, UintPrecisionFix)
LITERAL (SignedToUnsigned,	"int_to_uint" ,	"(int<#a>,intTypeParam<#b>) -> uint<#b>")
LITERAL (RealToUnsigned,	"real_to_uint",	"(real<#a>,intTypeParam<#b>) -> uint<#b>")
LITERAL (WCharToUnsigned,	"wchar_to_uint","(wchar<#a>,intTypeParam<#b>) -> uint<#b>")
LITERAL (CharToUnsigned,	"char_to_uint",	"(char,intTypeParam<#b>) -> uint<#b>")
LITERAL (BoolToUnsigned,	"bool_to_uint",	"(bool,intTypeParam<#b>) -> uint<#b>")
LITERAL (UintPrecisionFix,"uint_precision",    "(uint<#a>,intTypeParam<#b>) -> uint<#b>")

	  // TO WCHAR
GROUP( ToWChar, SignedToWChar, UnsignedToWChar, RealToWChar, CharToWChar, BoolToWChar, WCharPrecisionFix)
LITERAL (SignedToWChar,	    "int_to_wchar" ,	"(int<#a>,intTypeParam<#b>) -> wchar<#b>")
LITERAL (UnsignedToWChar,	"uint_to_wchar",    "(uint<#a>,intTypeParam<#b>) -> wchar<#b>")
LITERAL (RealToWChar,		"real_to_wchar",    "(real<#a>,intTypeParam<#b>) -> wchar<#b>")
LITERAL (CharToWChar,		"char_to_wchar",    "(char,intTypeParam<#b>) -> wchar<#b>")
LITERAL (BoolToWChar,		"bool_to_wchar",    "(bool,intTypeParam<#b>) -> wchar<#b>")
LITERAL (WCharPrecisionFix, "wchar_precision",  "(wchar<#a>,intTypeParam<#b>) -> wchar<#b>")

      // TO REAL
GROUP( ToReal, SignedToReal, UnsignedToReal, CharToReal, BoolToReal, RealPrecisionFix)
LITERAL (SignedToReal,		"int_to_real",	"(int<#a>,intTypeParam<#b>) -> real<#b>")
LITERAL (UnsignedToReal,	"uint_to_real",	"(uint<#a>,intTypeParam<#b>) -> real<#b>")
LITERAL (CharToReal,		"char_to_real",	"(char,intTypeParam<#b>) -> real<#b>")
LITERAL (BoolToReal,		"bool_to_real",	"(bool,intTypeParam<#b>) -> real<#b>")
LITERAL (RealPrecisionFix,"real_precision",    "(real<#a>,intTypeParam<#b>) -> real<#b>")

      // TO CHAR
GROUP( ToChar, SignedToChar, UnsignedToChar, RealToChar, BoolToChar)
LITERAL (SignedToChar,    	"int_to_char" ,	"(int<#a>) -> char")
LITERAL (UnsignedToChar,	"uint_to_char",	"(uint<#a>) -> char")
LITERAL (RealToChar,		"real_to_char",	"(real<#a>) -> char")
LITERAL (BoolToChar,		"bool_to_char",	"(bool) -> char")

      // TO Bool
GROUP( ToBool, SignedToBool, UnsignedToBool, RealToBool, CharToBool)
DERIVED (SignedToBool,		"int_to_bool" ,	"lambda (int<#a> a) -> bool { return a != int_precision(0,param(#a)); }")
DERIVED (UnsignedToBool,	"uint_to_bool",	"lambda (uint<#a> a) -> bool { return a != uint_precision(0u,param(#a)); }")
DERIVED (RealToBool,		"real_to_bool",	"lambda (real<#a> a) -> bool { return a != real_precision(0.0f, param(#a)); }")
DERIVED (CharToBool,		"char_to_bool",	R"(lambda(char a) -> bool { return a != '\0'; })")

// Bitwise Operations -------------------------------------------------------------------------------------------------

GROUP(BitwiseIntOp, SignedIntNot, SignedIntAnd, SignedIntOr, SignedIntXor, SignedIntLShift, SignedIntRShift)

OPERATION(SignedInt, Not,    "int_not",    "(int<#a>) -> int<#a>")
OPERATION(SignedInt, And,    "int_and",    "(int<#a>,int<#a>) -> int<#a>")
OPERATION(SignedInt, Or,     "int_or",     "(int<#a>,int<#a>) -> int<#a>")
OPERATION(SignedInt, Xor,    "int_xor",    "(int<#a>,int<#a>) -> int<#a>")
OPERATION(SignedInt, LShift, "int_lshift", "(int<#a>,int<4>) -> int<#a>")
OPERATION(SignedInt, RShift, "int_rshift", "(int<#a>,int<4>) -> int<#a>")

GROUP(BitwiseUIntOp, UnsignedIntNot, UnsignedIntAnd, UnsignedIntOr, UnsignedIntXor, UnsignedIntLShift, UnsignedIntRShift)

OPERATION(UnsignedInt, Not,    "uint_not",    "(uint<#a>) -> uint<#a>")
OPERATION(UnsignedInt, And,    "uint_and",    "(uint<#a>,uint<#a>) -> uint<#a>")
OPERATION(UnsignedInt, Or,     "uint_or",     "(uint<#a>,uint<#a>) -> uint<#a>")
OPERATION(UnsignedInt, Xor,    "uint_xor",    "(uint<#a>,uint<#a>) -> uint<#a>")
OPERATION(UnsignedInt, LShift, "uint_lshift", "(uint<#a>,int<4>) -> uint<#a>")
OPERATION(UnsignedInt, RShift, "uint_rshift", "(uint<#a>,int<4>) -> uint<#a>")

GROUP(BitwiseOp, BitwiseIntOp, BitwiseUIntOp)

// References ---------------------------------------------------------------------------------------------------------

GROUP(RefOp, RefAlloc, RefNull, RefDelete, RefAssign, RefDeref, RefVar, RefNew, 
	  RefLoc, RefIsNull, RefReinterpret, RefNarrow, RefExpand)
GROUP(Delete, RefDelete)

TYPE(MemLoc, "memloc")
LITERAL(MemLocStack, "memloc_stack", "memloc")
LITERAL(MemLocHeap, "memloc_heap", "memloc")
LITERAL(MemLocLocal, "memloc_local", "memloc")

LITERAL(RefAlloc,    	"ref_alloc",    		"(type<'a>, memloc) -> ref<'a>")
LITERAL(RefNull,        "ref_null",             "ref<any>")
LITERAL(NullFunc,       "func_null",            "(type<'a>)->'a")
LITERAL(RefDelete, 		"ref_delete", 			"(ref<'a>) -> unit")
LITERAL(RefAssign, 		"ref_assign", 			"(sink<'a>,'a) -> unit")
LITERAL(RefDeref,  		"ref_deref",  			"(src<'a>) -> 'a")

LITERAL(SrcToRef,		"src_to_ref",			"(src<'a>) -> ref<'a>")
LITERAL(SinkToRef,		"sink_to_ref",			"(sink<'a>) -> ref<'a>")

LITERAL(RefToInt,		"ref_to_int",			"(ref<'a>) -> uint<8>")
LITERAL(IntToRef,		"int_to_ref",			"(uint<8>, type<'a>) -> ref<'a>")

DERIVED(RefVar,  			"ref_var",    	    "lambda ('a v) -> ref<'a> { decl auto r = ref_alloc(  type_of(v), memloc_stack); r = v; return r; }")
DERIVED(RefNew,  			"ref_new",    	    "lambda ('a v) -> ref<'a> { decl auto r = ref_alloc(  type_of(v), memloc_heap ); r = v; return r; }")
DERIVED(RefLoc,  			"ref_loc",    	    "lambda ('a v) -> ref<'a> { decl auto r = ref_alloc(  type_of(v), memloc_local); r = v; return r; }")
DERIVED(RefIsNull,   		"ref_is_null",	    "lambda (ref<'a> r) -> bool { return ref_eq(r, ref_null); }")
DERIVED(FuncIsNull,   		"func_is_null",	    "lambda ('a f) -> bool { return f == func_null(lit('a)); }")

GROUP(AllocOp, RefVar, RefNew, RefLoc)

LITERAL(RefReinterpret, "ref_reinterpret",      "(ref<'a>, type<'b>) -> ref<'b>")
LITERAL(RefNarrow, 		"ref_narrow",			"(ref<'a>, datapath, type<'b>) -> ref<'b>")
LITERAL(RefExpand,		"ref_expand",			"(ref<'a>, datapath, type<'b>) -> ref<'b>")

LITERAL(SrcReinterpret, "src_reinterpret",      "(src<'a>, type<'b>) -> src<'b>")
LITERAL(SrcNarrow, 		"src_narrow",			"(src<'a>, datapath, type<'b>) -> src<'b>")
LITERAL(SrcExpand,		"src_expand",			"(src<'a>, datapath, type<'b>) -> src<'b>")

LITERAL(RefToSrc, "ref_src_cast",      "(ref<'a>) -> src<'a>")

// Operators for references
OPERATION(Ref, Eq, "ref_eq", "(ref<'a>,ref<'b>) -> bool")
OPERATION(Ref, Ne, "ref_ne", "(ref<'a>,ref<'b>) -> bool")
OPERATION(Ref, Lt, "ref_lt", "(ref<'a>,ref<'b>) -> bool")
OPERATION(Ref, Gt, "ref_gt", "(ref<'a>,ref<'b>) -> bool")
OPERATION(Ref, Le, "ref_le", "(ref<'a>,ref<'b>) -> bool")
OPERATION(Ref, Ge, "ref_ge", "(ref<'a>,ref<'b>) -> bool")

GROUP(RefCompOp, RefEq, RefNe, RefLt, RefGt, RefLe, RefGe)

// Type Operations ----------------------------------------------------------------------------------------------------

DERIVED(TypeOf,			"type_of",				"lambda ('a x)->type<'a> { return lit('a); }")
DERIVED(TypeCast,		"type_cast",			"lambda ('a x,type<'b> t)->'b { return CAST('b)x; }")
LITERAL(TypeIsSubtype,	"type_is_subtype",		"(type<'a>, type<'b>)->bool")

OPERATION(Type, Eq, 	"type_eq", "(type<'a>,type<'a>) -> bool")

GROUP(TypeCompOp, TypeEq)


// Generic Operations -------------------------------------------------------------------------------------------------

// binary generic operators
OPERATION(Gen, Add, 	 "gen_add", "('a,'a)->'a")
OPERATION(Gen, Sub, 	 "gen_sub", "('a,'a)->'a")
OPERATION(Gen, Mul, 	 "gen_mul", "('a,'a)->'a")
OPERATION(Gen, Div, 	 "gen_div", "('a,'a)->'a")
OPERATION(Gen, Mod, 	 "gen_mod", "('a,'a)->'a")

OPERATION(Gen, And, 	 "gen_and", "('a,'b)->'a")
OPERATION(Gen, Or, 	 	 "gen_or",  "('a,'b)->'a")
OPERATION(Gen, Xor, 	 "gen_xor", "('a,'b)->'a")
OPERATION(Gen, LShift, 	 "gen_lshift", "('a,'b)->'a")
OPERATION(Gen, RShift, 	 "gen_rshift", "('a,'b)->'a")

OPERATION(Gen, Eq, "gen_eq", "('a,'a) -> bool")
OPERATION(Gen, Ne, "gen_ne", "('a,'a) -> bool")
OPERATION(Gen, Lt, "gen_lt", "('a,'a) -> bool")
OPERATION(Gen, Gt, "gen_gt", "('a,'a) -> bool")
OPERATION(Gen, Le, "gen_le", "('a,'a) -> bool")
OPERATION(Gen, Ge, "gen_ge", "('a,'a) -> bool")

// generic unary ops
OPERATION(Gen, Not,      "gen_not",    "('a) -> 'a")

GROUP(GenArithmeticOp, GenAdd, GenSub, GenMul, GenDiv, GenMod)
GROUP(GenBitwiseOp, GenNot, GenAnd, GenOr, GenXor, GenLShift, GenRShift)
GROUP(GenCompOp, GenEq, GenNe, GenLt, GenGt, GenLe, GenGe)
GROUP(GenOp, GenArithmeticOp, GenBitwiseOp, GenCompOp, IncrementOp )

GROUP(AddOp, GenAdd, SignedIntAdd, UnsignedIntAdd, RealAdd)
GROUP(SubOp, GenSub, SignedIntSub, UnsignedIntSub, RealSub)

GROUP(BitwiseAndOp, GenAnd, SignedIntAnd, UnsignedIntAnd)
GROUP(BitwiseOrOp, GenOr, SignedIntOr, UnsignedIntOr)
GROUP(BitwiseXorOp, GenXor, SignedIntXor, UnsignedIntXor)


// Data Paths ---------------------------------------------------------------------------------------------------------

TYPE(DataPath, "datapath")
LITERAL(DataPathRoot,		"dp_root", 				"datapath")
LITERAL(DataPathMember,		"dp_member", 			"(datapath, identifier) -> datapath")
LITERAL(DataPathElement,	"dp_element", 			"(datapath, uint<8>) -> datapath")
LITERAL(DataPathComponent,	"dp_component", 		"(datapath, uint<8>) -> datapath")
LITERAL(DataPathParent,     "dp_parent",            "(datapath, type<'a>) -> datapath")

GROUP(DataPathPrimitive, DataPathRoot, DataPathMember, DataPathElement, DataPathComponent, DataPathParent)

// Volatile -----------------------------------------------------------------------------------------------------------
// Volatile types mark memory locations that may be changed by some outside agency

GROUP(VolatileOp, VolatileMake, VolatileRead)

TYPE(VolatileGen,		"volatile<'a>")
LITERAL(VolatileMake,	"volatile_make",		"('a) -> volatile<'a>")
LITERAL(VolatileRead,	"volatile_read",		"(volatile<'a>) -> 'a")

// TEMP FIX
LITERAL(Flush, "flush", "(ref<'a>) -> unit")

// General ------------------------------------------------------------------------------------------------------------

GROUP(GeneralOp, Undefined, Sizeof, IntTypeParamToInt)

DERIVED(Id, 				"id", "lambda ('a x)->'a { return x; }")

LITERAL(Undefined, 			"undefined", 				"(type<'a>) -> 'a")
LITERAL(Zero, 				"zero", 					"(type<'a>) -> 'a")
LITERAL(Sizeof, 			"sizeof", 					"(type<'a>) -> uint<8>")
LITERAL(IntTypeParamToInt, 	"to_uint", 					"(intTypeParam<#n>)->uint<8>")

// Arrays -------------------------------------------------------------------------------------------------------------

GROUP(ArrayOp, ArrayCreate1D, ArrayCreateND, ArraySubscript1D, ArraySubscriptND, ArrayRefElem1D, ArrayRefElemND, ArrayRefProjection1D, ArrayRefProjectionND)

LITERAL(ArrayCreate1D, 		"array_create_1D", 		"(type<'elem>, uint<8>) -> array<'elem,1>")
LITERAL(ArrayCreateND, 		"array_create_ND", 		"(type<'elem>, vector<uint<8>,#n>) -> array<'elem,#n>")

LITERAL(ArraySubscript1D,      "array_subscript_1D",   "(array<'elem,1>, uint<8>) -> 'elem")
LITERAL(ArraySubscriptND,      "array_subscript_ND",   "(array<'elem,#n>, vector<uint<8>,#n>) -> 'elem")

DERIVED(ArrayRefElem1D,     "array_ref_elem_1D",    "lambda (ref<array<'elem,1>> a, uint<8> i) -> ref<'elem> { return ref_narrow(a, dp_element(dp_root, i), lit('elem)); }")
LITERAL(ArrayRefElemND, 	"array_ref_elem_ND", 	"(ref<array<'elem,#n>>, vector<uint<8>,#n>) -> ref<'elem>")

LITERAL(ArrayRefProjection1D, "array_ref_projection_1D",
							  "(ref<array<'elem,1>>,uint<8>,uint<8>) -> ref<array<'elem,1>>")
LITERAL(ArrayRefProjectionND, "array_ref_projection_ND",
							  "(ref<array<'elem,#n>>,vector<uint<8>,#n>,vector<uint<8>,#n>) -> ref<array<'elem,#n>>")

LITERAL(ArrayRefDistance, 		"array_ref_distance", 	"(ref<array<'elem,1>>, ref<array<'elem,1>>) -> int<8>")
DERIVED(ScalarToArray, 			"scalar_to_array", 		"lambda (ref<'a> a) -> ref<array<'a,1>> { return ref_expand(a, dp_element(dp_root,0u), lit(array<'a,1>)); }")

// computation of an array-offset and some derivades
LITERAL(ArrayView, 				"array_view",					"(ref<array<'elem,1>>, int<8>) -> ref<array<'elem,1>>")
DERIVED(ArrayViewPreInc, 		"array_view_pre_inc",			"lambda (ref<ref<array<'elem,1>>> a)->ref<array<'elem,1>> { a = array_view(*a,1); return *a; }")
DERIVED(ArrayViewPostInc, 		"array_view_post_inc",			"lambda (ref<ref<array<'elem,1>>> a)->ref<array<'elem,1>> { decl auto res = *a; a = array_view(*a,1); return res; }")
DERIVED(ArrayViewPreDec, 		"array_view_pre_dec",			"lambda (ref<ref<array<'elem,1>>> a)->ref<array<'elem,1>> { a = array_view(*a,-1); return *a; }")
DERIVED(ArrayViewPostDec, 		"array_view_post_dec",			"lambda (ref<ref<array<'elem,1>>> a)->ref<array<'elem,1>> { decl auto res = *a; a = array_view(*a,-1); return res; }")

DERIVED(ArrayReduce, "array_reduce",
		"lambda (ref<array<'a,1>> data, uint<8> size, ('b,'a)->'b op, 'b init)->'b {"
		"	decl ref<'b> res = var(init);"
		"	for(uint<8> i = 0ul .. size) {"
		"		res = op(*res, *(data[i]));"
		"	}"
		"	return *res;"
		"}"
)


// Vectors ------------------------------------------------------------------------------------------------------------

GROUP(VectorOp, VectorSubscript, VectorInitUniform, VectorInitUndefined, VectorRefElem, VectorPointwise, VectorPointwiseUnary, VectorReduction, VectorPermute,
		VectorProjection, VectorRefProjection, RefVectorToRefArray)
GROUP(Pointwise, VectorPointwise, VectorPointwiseUnary)

// deprecated
LITERAL(VectorSubscript,      	"vector_subscript",      	"(vector<'elem,#l>, uint<#a>) -> 'elem")
LITERAL(VectorInitUniform,    	"vector_init_uniform",    	"('elem, intTypeParam<#a>) -> vector<'elem,#a>")
LITERAL(VectorInitUndefined,  	"vector_init_undefined",  	"(type<'elem>, intTypeParam<#a>) -> vector<'elem,#a>")
LITERAL(VectorInitPartial, 		"vector_init_partial",		"(list<'elem>, intTypeParam<#n>) -> vector<'elem,#n>")

DERIVED(VectorRefElem, 			"vector_ref_elem", 			"lambda (ref<vector<'elem,#l>> v, uint<8> i) -> ref<'elem> { return ref_narrow(v, dp_element(dp_root, i), lit('elem)); }")

DERIVED(VectorPointwise,		"vector_pointwise",	 R"V0G0N(
    lambda (('elem1, 'elem2) -> 'res op) -> (vector<'elem1,#l>, vector<'elem2,#l>) => vector<'res, #l> {  
        return lambda (vector<'elem1,#l> v1, vector<'elem2,#l> v2) => lambda (vector<'elem1,#l> v1, vector<'elem2,#l> v2, ('elem1, 'elem2) -> 'res op) -> vector<'res,#l> {
            decl ref<vector<'res,#l>> res = var(undefined(vector<'res,#l>));
            for(uint<8> i = 0u .. to_uint(param(#l))-1u ) { res[i] = op(v1[i], v2[i]); }
            return *res;
        }(v1, v2, op);
    } 
)V0G0N")
								
//LITERAL(VectorPointwiseUnary, 	"vector_pointwise_unary", 	"(('elem) -> 'res) -> (vector<'elem,#l>) -> vector<'res, #l>")

DERIVED(VectorPointwiseUnary,		"vector_pointwise_unary", R"V0G0N(
		lambda (('elem) -> 'res op) -> (vector<'elem,#l>) => vector<'res, #l> {
			return lambda (vector<'elem,#l> v) => lambda (vector<'elem,#l> v, ('elem) -> 'res op) -> vector<'res,#l> {
				decl ref<vector<'res,#l>> res = var(undefined(vector<'res,#l>));
				for(uint<8> i = 0u .. to_uint(param(#l))-1u ) { res[i] = op(v[i]); }
				return *res;
			}(v, op);
		}
)V0G0N")

LITERAL(VectorReduction,      	"vector_reduction",       	"(vector<'elem,#l>, 'res, ('elem, 'res) -> 'res) -> 'res")
LITERAL(VectorPermute,        	"vector_permute",         	"(vector<'elem,#l>, vector<uint<#a>,#m>) -> vector<'elem,#m>")

LITERAL(VectorProjection, 		"vector_projection",
						  		"(vector<'elem,#n>,intTypeParam<#s>,intTypeParam<#m>) -> vector<'elem,#m>")

LITERAL(VectorRefProjection, 	"vector_ref_projection",
							 	"(ref<vector<'elem,#n>>,intTypeParam<#s>,intTypeParam<#m>) -> ref<vector<'elem,#m>>")

DERIVED(RefVectorToRefArray, 	"ref_vector_to_ref_array",		"lambda (ref<vector<'elem,#l>> a) -> ref<array<'elem,1>> { return ref_reinterpret(a, lit(array<'elem,1>)); }")
DERIVED(RefVectorToSrcArray, 	"ref_vector_to_src_array",		"lambda (ref<vector<'elem,#l>> a) -> src<array<'elem,1>> { return ref_reinterpret(a, lit(array<'elem,1>)); }")


// Arrays and Vectors -------------------------------------------------------------------------------------------------

GROUP(SubscriptOperator, ArraySubscript1D, ArraySubscriptND, VectorSubscript, ArrayRefElem1D, ArrayRefElemND, VectorRefElem)

// Struct and Unions --------------------------------------------------------------------------------------------------
// first argument has to be a struct or a union, 'b has to be the type of the requested member
DERIVED(CompositeRefElem,      "composite_ref_elem",      "lambda (ref<'a> s, identifier i, type<'b> t) -> ref<'b> { return ref_narrow(s, dp_member(dp_root, i), t); }")
LITERAL(CompositeMemberAccess, "composite_member_access", "('a, identifier, type<'b>) -> 'b")

// Tuple --------------------------------------------------------------------------------------------------------------
// first argument has to be a tuple or a union, 'b has to be the type of the requested member
DERIVED(TupleRefElem,      "tuple_ref_elem",      "lambda (ref<'a> s, uint<8> i, type<'b> t) -> ref<'b> { return ref_narrow(s, dp_component(dp_root, i), t); }")
LITERAL(TupleMemberAccess, "tuple_member_access", "('a, uint<8>, type<'b>) -> 'b")

GROUP(MemberAccess, CompositeRefElem, CompositeMemberAccess, TupleRefElem, TupleMemberAccess)

// Generic type initialization ----------------------------------------------------------------------------------------

LITERAL(GenInit, "gen_init", "(type<'a>, 'b) -> 'a")

// Accuracy defining functions ----------------------------------------------------------------------------------------
GROUP(Accuracy, AccuracyHighBinary, AccuracyBestEffortBinary, AccuracyFastBinary, AccuracyHighUnary, AccuracyBestEffortUnary, AccuracyFastUnary)

LITERAL(AccuracyHighBinary,       "accuracy_high", "(('a, 'a)=>'b) -> ('a, 'a)=>'b")
LITERAL(AccuracyBestEffortBinary, "accuracy_besteffort", "(('a, 'a)=>'b) -> ('a, 'a)=>'b")
LITERAL(AccuracyFastBinary,       "accuracy_fast", "(('a, 'a)=>'b) -> ('a, 'a)=>'b")
LITERAL(AccuracyHighUnary,       "accuracy_high_unary", "(('a)=>'b) -> ('a)=>'b")
LITERAL(AccuracyBestEffortUnary, "accuracy_besteffort_unary", "(('a)=>'b) -> ('a)=>'b")
LITERAL(AccuracyFastUnary,       "accuracy_fast_unary", "(('a)=>'b) -> ('a)=>'b")

// IO -----------------------------------------------------------------------------------------------------------------

LITERAL(Print, "print", "(ref<array<char,1>>,var_list)->unit")

// Misc. --------------------------------------------------------------------------------------------------------------

LITERAL(VarlistPack, "varlist_pack", "('alpha) -> var_list")
DERIVED(IfThenElse, "ite", "lambda (bool c, () => 'b a, () => 'b b) -> 'b { if (c) { return a(); } else { return b(); } }")


// Tunable Options ----------------------------------------------------------------------------------------------------

LITERAL(Pick, "pick", "(list<'a>)->'a")
LITERAL(PickInRange, "pickInRange", "(int<4>, 'a, int<4>, int<4>, int<4>)->'a")


// Parallel Constructs ------------------------------------------------------------------------------------------------

GROUP(ParallelOp, Parallel, ParallelDetached)

LITERAL(Parallel, "parallel", "(job) -> threadgroup")
LITERAL(ParallelDetached, "parallel&", "(job) -> unit")

GROUP(MergeOp, Merge, MergeAll)

LITERAL(Merge, "merge", "(threadgroup) -> unit")
LITERAL(MergeAll, "mergeAll", "() -> unit")


GROUP(ThreadOp, GetThreadGroup, GetThreadId)

LITERAL(GetThreadGroup, "getThreadGroup", "(uint<#a>) -> threadgroup")
LITERAL(GetThreadId, "getThreadID", "(uint<#a>) -> int<4>")
LITERAL(GetGroupSize, "getGroupSize", "(uint<#a>) -> int<4>")

// the work-sharing construct
DERIVED(PFor, "pfor", "lambda (threadgroup g, int<#a> a, int<#a> b, int<#a> c, (int<#a>, int<#a>, int<#a>)=>'a f)->unit { f(a,b,c); }")

// the data-sharing construct
LITERAL(Redistribute, "redistribute", "(threadgroup, 'a, (ref<array<'a,1>>, uint<8>, uint<8>)=>'b )->'b")

// some derivades
DERIVED(Barrier, "barrier", "lambda (threadgroup g)->unit { redistribute(g, 0, lambda (ref<array<int<4>,1>> _, uint<8> _, uint<8> _)->unit { return; }); }")
DERIVED(PReduce, "preduce", "lambda (threadgroup g, 'a v, ('b,'a)->'b op, 'b init)->'b { return redistribute(g, v, lambda (ref<array<'a,1>> data, uint<8> size, uint<8> pid)=> array_reduce(data, size, op, init) ); }")


// Channels -----------------------------------------------------------------------------------------------------------

LITERAL(ChannelCreate, 		"channel_create", 		"(type<'a>, intTypeParam<#n>) -> channel<'a,#n>")
LITERAL(ChannelRelease, 	"channel_release", 		"(channel<'a,#n>) -> unit")

LITERAL(ChannelSend, 		"channel_send", 		"(channel<'a,#n>, 'a) -> unit")
LITERAL(ChannelRecv, 		"channel_recv", 		"(channel<'a,#n>) -> 'a")
LITERAL(ChannelProbe, 		"channel_probe", 		"(channel<'a,#n>) -> bool")

// Atomics ------------------------------------------------------------------------------------------------------------

DERIVED(Atomic, "atomic", R"V0G0N(
		lambda (ref<'a> v, ('a)=>bool p, ('a)=>'a f)->'a { 
			decl auto res = *v; 
			if (p(*v)) { 
				v = f(*v); 
			} 
			return res; 
		} 
)V0G0N")

// arithmetic

DERIVED(AtomicFetchAndAdd, "atomic_fetch_and_add",R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			let test = lambda ('a _)=>true; 
			let apply = lambda ('a x)=>x+exp; 
			return atomic(v, test, apply); 
		}  
)V0G0N")

DERIVED(AtomicAddAndFetch, "atomic_add_and_fetch",R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			return atomic_fetch_and_add(v, exp) + exp; 
		}  
)V0G0N")

DERIVED(AtomicFetchAndSub, "atomic_fetch_and_sub",R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			let test = lambda ('a _)=>true; 
			let apply = lambda ('a x)=>x-exp; 
			return atomic(v, test, apply); 
		}  
)V0G0N")

DERIVED(AtomicSubAndFetch, "atomic_sub_and_fetch",R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			return atomic_fetch_and_sub(v, exp) - exp; 
		}  
)V0G0N")

// bitwise
DERIVED(AtomicFetchAndAnd, "atomic_fetch_and_and", R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			let test = lambda ('a _) => true; 
			let apply = lambda ('a x) => x & exp; 
			return atomic(v, test, apply); 
		}  
)V0G0N")

DERIVED(AtomicAndAndFetch, "atomic_and_and_fetch", R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			return atomic_fetch_and_and(v, exp) & exp; 
		}  
)V0G0N")

DERIVED(AtomicFetchAndOr, "atomic_fetch_and_or", R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			let test = lambda ('a _) => true; 
			let apply = lambda ('a x) => x | exp; 
			return atomic(v, test, apply); 
		}  
)V0G0N")

DERIVED(AtomicOrAndFetch, "atomic_or_and_fetch", R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			return atomic_fetch_and_or(v, exp) | exp; 
		}  
)V0G0N")

DERIVED(AtomicFetchAndXor, "atomic_fetch_and_xor", R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			let test = lambda ('a _) => true; 
			let apply = lambda ('a x) => x ^ exp; 
			return atomic(v, test, apply); 
		}  
)V0G0N")

DERIVED(AtomicXorAndFetch, "atomic_xor_and_fetch", R"V0G0N(
		lambda (ref<'a> v, 'a exp) -> 'a { 
			return atomic_fetch_and_xor(v, exp) ^ exp; 
		}  
)V0G0N")

// test and set

DERIVED(AtomicValCompareAndSwap, "atomic_val_compare_and_swap",
		"lambda (ref<'a> v, 'a _old, 'a _new) -> 'a { "
		"	let test = lambda ('a x) => x == _old; "
		"	let apply = lambda ('a _) => _new; "
		"	return atomic(v, test, apply); "
		"}  ")

DERIVED(AtomicBoolCompareAndSwap, "atomic_bool_compare_and_swap",
		"lambda (ref<'a> v, 'a _old, 'a _new) -> bool { "
		"	let test = lambda ('a x) => x == _old; "
		"	let apply = lambda ('a _) => _new; "
		"	return atomic(v, test, apply) == _new; "
		"}  ")



// Range Handling -----------------------------------------------------------------------------------------------------

TYPE(JobRange, "JobRange")

LITERAL(CreateMinRange,     "MinRange",    		"(uint<8>)->JobRange")							// lower boundery only
LITERAL(CreateBoundRange,   "BoundRange",    	"(uint<8>, uint<8>)->JobRange")				// lower and upper bound
LITERAL(CreateBoundRangeMod,"BoundRangeMod",    "(uint<8>, uint<8>, uint<8>)->JobRange")		// lower, upper and modula bound


// Locks -----------------------------------------------------------

TYPE(Lock, "lock")

LITERAL(LockAcquire,  "lock_acquire", "(ref<lock>)->unit")
LITERAL(LockRelease, "lock_release", "(ref<lock>)->unit")
LITERAL(LockInit,  "lock_init", "(ref<lock>)->unit")

// --------------------------------------------------------------------------------------------------------------------


// Special Functions --------------------------------------------------------------------------------

GROUP(CloogMath, CloogFloor, CloogCeil, CloogMod)

LITERAL(Select, "select", "('a, 'a, ('a, 'a) -> bool) -> 'a")
LITERAL(CloogFloor, "cloog_floor", "( int<4>, int<4> ) -> int<4>" )
LITERAL(CloogCeil,  "cloog_ceil",  "( int<4>, int<4> ) -> int<4>" )
LITERAL(CloogMod, 	"cloog_mod",   "( int<4>, int<4> ) -> int<4>" )

LITERAL(Exit, "exit", "(int<4>)->unit" )

// Semantic Grouping --------------------------------------------------------------------------------

GROUP(CompOp, IntCompOp, UIntCompOp, RealCompOp, RefCompOp, TypeCompOp, GenCompOp)

GROUP(Pure, IfThenElse, VarlistPack, CloogMath, MemberAccess, SubscriptOperator,
	VectorOp, ArrayOp, CompOp, RefDeref, BitwiseOp, CompOp, ArithOp, GeneralOp)


#undef TYPE
#undef LITERAL
#undef DERIVED
#undef GROUP
#undef OPERATOR
#undef OPERATION
#undef DERIVED_OP
#undef SUB_TYPE
