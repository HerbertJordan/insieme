#pragma once

#include <iostream>
#include <boost/type_traits/is_base_of.hpp>
#include <boost/utility/enable_if.hpp>

#include "insieme/utils/pointer.h"
#include "insieme/utils/type_traits_utils.h"


namespace insieme {
namespace core {

// Forward declaration of cast functor.
struct StaticPointerCast;
struct DynamicPointerCast;
struct PointerChildFactory;

template<typename T>
class Pointer : public Ptr<T> {
public:

	typedef StaticPointerCast StaticCast;
	typedef DynamicPointerCast DynamicCast;
	typedef PointerChildFactory ChildFactory;

	Pointer() : Ptr<T>(NULL) {}

	Pointer(T* ptr) : Ptr<T>(ptr) { }

	/**
	 * A conversion operator to a annotated pointer referencing a super type of the type
	 * pointed to by this instance can be efficiently realized using a reinterpret_cast. This
	 * operator is realizing this efficient conversion.
	 */
	template<typename B, typename boost::enable_if<boost::is_base_of<B,T>,int>::type = 0>
	operator const Pointer<B>() const {
		return Pointer<B>(this->ptr);
	}
};

template<typename B, typename T>
inline typename boost::enable_if<boost::is_base_of<T,B>, Pointer<B>>::type
dynamic_pointer_cast(const Pointer<T>& src) {
	return Pointer<B>((src)?dynamic_cast<B*>(&(*src)):NULL);
}

template<typename B, typename T, typename E = typename B::element_type>
inline typename boost::enable_if<boost::is_base_of<T,E>, B>::type
dynamic_pointer_cast(const Pointer<T>& src) {
	return B((src)?dynamic_cast<E*>(&(*src)):NULL);
}

template<typename B, typename T>
inline typename boost::enable_if<boost::is_base_of<T,B>, Pointer<B>>::type
static_pointer_cast(Pointer<T>& src) {
	assert((!src || dynamic_cast<B*>(&(*src))) && "Invalid static cast!");
	return Pointer<B>(static_cast<B*>(src.ptr));
}

template<typename B, typename T>
inline typename boost::enable_if<boost::is_base_of<T,B>, const Pointer<B>>::type
static_pointer_cast(const Pointer<T>& src) {
	assert((!src || dynamic_cast<B*>(&(*src))) && "Invalid static cast!");
	return Pointer<B>(static_cast<B*>(src.ptr));
}

template<typename B, typename T, typename E = typename B::element_type>
inline typename boost::enable_if<boost::is_base_of<T,E>, B>::type
static_pointer_cast(const Pointer<T>& src) {
	assert((!src || dynamic_cast<E*>(&(*src))) && "Invalid static cast!");
	return B(static_cast<E*>(src.ptr));
}


/**
 * A template version for a functor performing static pointer casts on annotated pointer.
 * The purpose of this struct is to allow the static_pointer_cast function to be defined as
 * a pointer conversion function required as a template parameter of the AST Visitor class.
 */
struct StaticPointerCast {
	template<typename Target, typename Source>
	const Pointer<Target> operator()(const Pointer<Source>& value) const {
		return static_pointer_cast<Target>(value);
	}
};

/**
 * A template version for a functor performing dynamic pointer casts on annotated pointer.
 * The purpose of this struct is to allow the dynamic_pointer_cast function to be defined as
 * a pointer conversion function required as a template parameter of the AST Visitor class.
 */
struct DynamicPointerCast {
	template<typename Target, typename Source>
	const Pointer<Target> operator()(const Pointer<Source>& value) const {
		return dynamic_pointer_cast<Target>(value);
	}
};


// forward declaration of the node type
class Node;

/**
 * A static functor object extracting child node pointer from given pointer.
 */
struct PointerChildFactory {
	template<typename Source>
	inline const Pointer<const Node> operator()(const Pointer<Source>& value, std::size_t childIndex) const {
		return value->getChildList()[childIndex];
	}
};

} // end namespace core
} // end namespace insieme

namespace std {

	template<typename T>
	std::ostream& operator<<(std::ostream& out, const insieme::core::Pointer<T>& ptr) {
		out << "AP(";
		if (!!ptr) {
			out << *ptr;
		} else {
			out << "NULL";
		}
		out << ")";
		return out;
	}

}

