#pragma once

#include <algorithm>
#include <iterator>
#include <memory>
#include <sstream>
#include <string>
#include <vector>
#include <utility>

#include "insieme/utils/container_utils.h"
#include "insieme/utils/instance_manager.h"

#include "insieme/core/ir_node.h"
#include "insieme/core/ir_types.h"
#include "insieme/core/identifier.h"

using std::string;
using std::vector;

namespace insieme {
namespace core {

// ------------------------------------- Statements ---------------------------------

/**
 * The abstract statement class provides the foundation for all AST nodes representing statements
 * and expressions.
 */
class Statement : public Node {

protected:

	Statement(NodeType type, std::size_t hashCode, const NodeCategory category = NC_Statement) : Node(type, category, hashCode) {}

	virtual bool equals(const Node& node) const;
	virtual bool equalsStmt(const Statement& stmt) const = 0;

public:

	typedef NodeManager Manager;

	virtual ~Statement() {}
};

class BreakStmt : public Statement {
	BreakStmt();
	virtual BreakStmt* createCopyUsing(NodeMapping& mapper) const;
	
protected:
	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:
	virtual std::ostream& printTo(std::ostream& out) const;

	static BreakStmtPtr get(NodeManager& manager);
};


class ContinueStmt : public Statement {
	ContinueStmt();
	virtual ContinueStmt* createCopyUsing(NodeMapping& mapper) const;
	
protected:
	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:
	virtual std::ostream& printTo(std::ostream& out) const;
	
	static ContinueStmtPtr get(NodeManager& manager);
};


class ReturnStmt: public Statement {
	const ExpressionPtr returnExpression;

	ReturnStmt(const ExpressionPtr& returnExpression);
	virtual ReturnStmt* createCopyUsing(NodeMapping& mapper) const;
	
protected:
	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:
	virtual std::ostream& printTo(std::ostream& out) const;

	const ExpressionPtr& getReturnExpr() const { return returnExpression; };

	static ReturnStmtPtr get(NodeManager& manager, const ExpressionPtr& returnExpression);
};


class DeclarationStmt : public Statement {
	const VariablePtr variable;
	const ExpressionPtr initExpression;

	DeclarationStmt(const VariablePtr& variable, const ExpressionPtr& initExpression);
	virtual DeclarationStmt* createCopyUsing(NodeMapping& mapper) const;
	
protected:
	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:
	virtual std::ostream& printTo(std::ostream& out) const;

	const VariablePtr& getVariable() const { return variable; }
	const ExpressionPtr& getInitialization() const { return initExpression; }

	static DeclarationStmtPtr get(NodeManager& manager, const TypePtr& type, const ExpressionPtr& initExpression);
	static DeclarationStmtPtr get(NodeManager& manager, const VariablePtr& variable, const ExpressionPtr& initExpression);
};


class CompoundStmt: public Statement {
	virtual CompoundStmt* createCopyUsing(NodeMapping& mapper) const;
	
protected:
	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:
	typedef vector<StatementPtr> StatementList;

	CompoundStmt(const StatementList& stmts);

	virtual std::ostream& printTo(std::ostream& out) const;

	const StatementPtr& operator[](unsigned index) const;
	const vector<StatementPtr>& getStatements() const { return statements; }

	static CompoundStmtPtr get(NodeManager& manager);
	static CompoundStmtPtr get(NodeManager& manager, const StatementPtr& stmt);
	static CompoundStmtPtr get(NodeManager& manager, const vector<StatementPtr>& stmts);

private:
	const StatementList statements;
};


class WhileStmt: public Statement {
	ExpressionPtr condition;
	CompoundStmtPtr body;

	WhileStmt(const ExpressionPtr& condition, const CompoundStmtPtr& body);
	virtual WhileStmt* createCopyUsing(NodeMapping& mapper) const;
	
protected:
	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:
	virtual std::ostream& printTo(std::ostream& out) const;

	const ExpressionPtr& getCondition() const { return condition; }
	const CompoundStmtPtr& getBody() const { return body; }

	static WhileStmtPtr get(NodeManager& manager, const ExpressionPtr& condition, const StatementPtr& body);
};

class ForStmt: public Statement {
	DeclarationStmtPtr declaration;
	CompoundStmtPtr body;
	ExpressionPtr end, step;

	ForStmt(const DeclarationStmtPtr& declaration, const CompoundStmtPtr& body, const ExpressionPtr& end, const ExpressionPtr& step);
	virtual ForStmt* createCopyUsing(NodeMapping& mapper) const;
	
protected:
	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:
	virtual std::ostream& printTo(std::ostream& out) const;

	const DeclarationStmtPtr& getDeclaration() const { return declaration; }
	const CompoundStmtPtr& getBody() const { return body; }
	const ExpressionPtr& getEnd() const { return end; }
	const ExpressionPtr& getStep() const { return step; }
	
	static ForStmtPtr get(NodeManager& manager, const DeclarationStmtPtr& declaration, const StatementPtr& body, const ExpressionPtr& end,
			const ExpressionPtr& step);
};

class IfStmt: public Statement {
	ExpressionPtr condition;
	CompoundStmtPtr thenBody;
	CompoundStmtPtr elseBody;
	
	IfStmt(const ExpressionPtr& condition, const CompoundStmtPtr& thenBody, const CompoundStmtPtr& elseBody);
	virtual IfStmt* createCopyUsing(NodeMapping& mapper) const;
	
protected:
	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:
	virtual std::ostream& printTo(std::ostream& out) const;
	
	const ExpressionPtr& getCondition() const { return condition; }
	const CompoundStmtPtr& getThenBody() const { return thenBody; }
	const CompoundStmtPtr& getElseBody() const { return elseBody; }

	static IfStmtPtr get(NodeManager& manager, const ExpressionPtr& condition, const StatementPtr& thenBody);
	static IfStmtPtr get(NodeManager& manager, const ExpressionPtr& condition, const StatementPtr& thenBody, const StatementPtr& elseBody);
};

class SwitchStmt: public Statement {
public:
	typedef std::pair<ExpressionPtr, StatementPtr> Case;

private:
	const ExpressionPtr switchExpr;
	const vector<Case> cases;
	const StatementPtr defaultCase;

	SwitchStmt(const ExpressionPtr& switchExpr, const vector<Case>& cases, const StatementPtr& defaultCase);
	virtual SwitchStmt* createCopyUsing(NodeMapping& mapper) const;
	
protected:
	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:
	virtual std::ostream& printTo(std::ostream& out) const;

	const ExpressionPtr& getSwitchExpr() const { return switchExpr; }
	const vector<Case>& getCases() const { return cases; }
	const StatementPtr& getDefaultCase() const { return defaultCase; }
	
	static SwitchStmtPtr get(NodeManager& manager, const ExpressionPtr& switchExpr, const vector<SwitchStmt::Case>& cases);
	static SwitchStmtPtr get(NodeManager& manager, const ExpressionPtr& switchExpr, const vector<SwitchStmt::Case>& cases, const StatementPtr& defaultCase);
};


class MarkerStmt : public Statement {

	static unsigned int counter;

	const StatementPtr subStatement;
	const unsigned id;

	MarkerStmt(const StatementPtr& subStatement, const unsigned id);
	virtual MarkerStmt* createCopyUsing(NodeMapping& mapper) const;

protected:

	virtual bool equalsStmt(const Statement& stmt) const;
	virtual NodeListOpt getChildNodes() const;

public:

	virtual std::ostream& printTo(std::ostream& out) const;
	static MarkerStmtPtr get(NodeManager& manager, const StatementPtr& subStatement);
	static MarkerStmtPtr get(NodeManager& manager, const StatementPtr& subStatement, const unsigned id);

	const StatementPtr& getSubStatement() const { return subStatement; }
	const unsigned int getID() const { return id; }
};

} // end namespace core
} // end namespace insieme
