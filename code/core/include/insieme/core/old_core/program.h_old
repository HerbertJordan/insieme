#pragma once

#include <memory>
#include <ostream>
#include <unordered_set>

//#include <boost/unordered_set.hpp>

#include "insieme/utils/functional_utils.h"
#include "insieme/utils/set_utils.h"
#include "insieme/utils/container_utils.h"

#include "insieme/core/ir_node.h"
#include "insieme/core/ir_expressions.h"
#include "insieme/core/ir_statements.h"
#include "insieme/core/ir_types.h"

namespace insieme {
namespace core {


class IRBuilder;

/**
 * This class implements an AST Node which can be used to represent entire programs. Unlike
 * other nodes, this node cannot be maintained within a node manager (invoking this will lead
 * to an assertion error).
 *
 * Programs and especially ProgramPtrs can be used like values. Generally, they are immutable
 * and can be copied / passed as an argument or return value of a function. Programs manage
 * the memory allocation of all its referenced nodes implicitly using a shared NodeManager.
 * This ensures that by passing a program between methods, no referenced AST nodes will be
 * lost.
 */
class Program : public Node {

public:

	/**
	 * The type used to represent the list of entry points.
	 */
	typedef std::vector<ExpressionPtr> EntryPointList;

private:

	/**
	 * A flag indicating whether the given entry point should be the main function
	 * of the represented program. This flag may only be set to true in case there
	 * is a single entry point representing a function.
	 */
	const bool main;

	/**
	 * This set contains the list of expressions to be exported to the context
	 * program. Hence, the code which can be reached starting from those points
	 * has to be considered. In case elements of this list represent functions,
	 * the signature of the corresponding structure may not be changed.
	 */
	const EntryPointList entryPoints;

	/**
	 * Creates a new AST using a fresh AST node manager.
	 */
	Program();

	/**
	 * Creates a new AST based on the given data.
	 *
	 * @param entryPoints the list of entry points the program is consisting of.
	 * @param main a flag allowing to indicate that the given entry point represents the main
	 * function of a program and should be synthesized accordingly by the backend
	 */
	Program(const EntryPointList& entryPoints, bool main);

	/**
	 * Implements the copy method defined by the Base Node class.
	 *
	 * @param mapper the mapper to be used to resolve alternatives for current elements.
	 * @return a pointer to the new program, copies using the given mapper
	 */
	virtual Program* createCopyUsing(NodeMapping& mapper) const;

protected:

	/**
	 * Obtains a list of all nodes referenced by this program node.
	 */
	virtual NodeListOpt getChildNodes() const;

public:

	/**
	 * Creates a new program node within the given manager combining the given set of entry points.
	 *
	 * @param manager the manager used to create the new node and to maintain all referenced nodes
	 * @param entryPoints the list of entry points to be included within the resulting program.
	 * @param main a flag to be used to mark the resulting program as a main program.
	 * @return a ProgramPtr referencing the resulting program. The life time of the referenced node
	 * 						will be bound to the given manager.
	 */
	static ProgramPtr create(NodeManager& manager, const EntryPointList& entryPoints = EntryPointList(), bool main=false);

	/**
	 * Creates a new program node within the given manager which is equivalent to the given program plus the
	 * given, additional entry point.
	 *
	 * @param manager the manager used to create the new node and to maintain all referenced nodes
	 * @param program the program to be extended by an additional entry point
	 * @param point the additional entry point to be added
	 * @param main a flag to be used to mark the resulting program as a main program.
	 * @return a ProgramPtr referencing the resulting program. The life time of the referenced node
	 * 						will be bound to the given manager.
	 */
	static ProgramPtr addEntryPoint(NodeManager& manager, const ProgramPtr& program, const ExpressionPtr& point, bool main=false);

	/**
	 * Creates a new program node within the given manager which is equivalent to the given program plus the
	 * given, additional entry points.
	 *
	 * @param manager the manager used to create the new node and to maintain all referenced nodes
	 * @param program the program to be extended by additional entry points
	 * @param points the additional entry points to be added
	 * @param main a flag to be used to mark the resulting program as a main program.
	 * @return a ProgramPtr referencing the resulting program. The life time of the referenced node
	 * 						will be bound to the given manager.
	 */
	static ProgramPtr addEntryPoints(NodeManager& manager, const ProgramPtr& program, const EntryPointList& points, bool main=false);

	/**
	 * Creates a new program node within the given manager which is equivalent to the given program except the
	 * given entry point will be removed.
	 *
	 * @param manager the manager used to create the new node and to maintain all referenced nodes
	 * @param program the program to be reduced by an entry point
	 * @param point the entry point to be removed
	 * @param main a flag to be used to mark the resulting program as a main program.
	 * @return a ProgramPtr referencing the resulting program. The life time of the referenced node
	 * 						will be bound to the given manager.
	 */
	static ProgramPtr remEntryPoint(NodeManager& manager, const ProgramPtr& program, const ExpressionPtr& point, bool main=false);

	/**
	 * Creates a new program node within the given manager which is equivalent to the given program except the
	 * given entry points will be removed.
	 *
	 * @param manager the manager used to create the new node and to maintain all referenced nodes
	 * @param program the program to be reduced by some entry points
	 * @param points the entry points to be removed
	 * @param main a flag to be used to mark the resulting program as a main program.
	 * @return a ProgramPtr referencing the resulting program. The life time of the referenced node
	 * 						will be bound to the given manager.
	 */
	static ProgramPtr remEntryPoints(NodeManager& manager, const ProgramPtr& program, const EntryPointList& points, bool main=false);

	/**
	 * Creates a copy of the given program using the given main flag. The flag may only be true in case there is only
	 * a single entry point within the given program.
	 *
	 * @param manager the manager to be used to create the new node and to maintain all references
	 * @param program the program to be copied
	 * @param main the value to be used for the main flag
	 * @return a ProgramPtr referencing the resulting program. The life time of the referenced node
	 * 						will be bound to the given manager.
	 */
	static ProgramPtr setMainFlag(NodeManager& manager, const ProgramPtr& program, bool main);

	/**
	 * Tests whether this program represents a main program - hence there is only one entry point
	 * marked as main, or an arbitrary program exposing an arbitrary number of entry points.
	 *
	 * @return true if this is a main-program, false otherwise
	 */
	const bool isMain() const {
		return main;
	}

	/**
	 * Obtains the set of entry points associated to this program node.
	 *
	 * @return the set of entry points.
	 */
	const EntryPointList& getEntryPoints() const {
		return entryPoints;
	}

	/**
	 * Implements equals for the program type. Two programs are considered
	 * equal if they consist of the same set of definitions and entry points.
	 */
	bool equals(const Node& other) const;

	/**
	 * Implements the printing of this program into the given output stream.
	 */
	virtual std::ostream& printTo(std::ostream& out) const;

	// TODO: add consistency check routine!!
	//   - check: all names defined in scope
	//   - no duplicates in switch
	//   - no duplicates in names composite types

};

} // end namespace core
} // end namespace insieme

