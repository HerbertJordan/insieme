
#pragma once

#include "insieme/core/ir_node.h"

namespace insieme {
namespace core {


class ASTStatistic {

public:

	/**
	 * A type definition for the information stored per node type.
	 */
	typedef struct {
		unsigned numShared;
		unsigned numAddressable;
	} NodeTypeInfo;

private:

	/**
	 * The number of nodes within an AST.
	 */
	unsigned numSharedNodes;

	/**
	 * The number of addressable nodes within an AST.
	 */
	unsigned numAddressableNodes;

	/**
	 * The height of the AST, hence, the maximum length of a path
	 * from the root node to one of the leafs.
	 */
	unsigned height;

	/**
	 * The statistical information stored per node type.
	 */
	NodeTypeInfo nodeTypeInfo[NUM_CONCRETE_NODE_TYPES];

	/**
	 * Creates a new instance of this class, initializing all values to 0.
	 */
	ASTStatistic();

public:

	/**
	 * Creates an AST statistic summary for the given AST tree.
	 *
	 * @param node the root of the tree to be evaluated
	 * @return the collected statistic information
	 */
	static ASTStatistic evaluate(const NodePtr& node);

	/**
	 * Obtains the number of shared nodes.
	 *
	 * @return the total number of shared nodes within the AST
	 */
	unsigned getNumSharedNodes() const {
		return numSharedNodes;
	}

	/**
	 * Obtains the number of addressable nodes within the AST.
	 *
	 * @return the total number of addressable nodes within the AST
	 */
	unsigned getNumAddressableNodes() const {
		return numAddressableNodes;
	}

	/**
	 * Obtains the height of the AST.
	 *
	 * @return the height of the AST.
	 */
	unsigned getHeight() const {
		return height;
	}

	/**
	 * Returns to average number nodes are shared within an AST, hence
	 * the ratio between the number of addressable nodes and the number
	 * of shared nodes.
	 *
	 * @return the average node sharing ratio
	 */
	float getShareRatio() const {
		return numAddressableNodes/(float)numSharedNodes;
	}

	/**
	 * Returns an array filled with the statistical data describing the
	 * distribution of the various node types within the covered AST.
	 *
	 * @return the statistical data collected regarding the node types.
	 */
	const NodeTypeInfo& getNodeTypeInfo(NodeType nodeType) const {
		return nodeTypeInfo[nodeType];
	}

};


} // end namespace core
} // end namespace insieme


namespace std {

	/**
	 * Allows AST statistics to be directly printed into output streams.
	 */
	std::ostream& operator<<(std::ostream& out, const insieme::core::ASTStatistic& statistics);

}
