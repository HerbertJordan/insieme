ArrayTypePtr                   arrayType(const TypePtr& elementType, const IntTypeParam& dim = IntTypeParam::ONE) const;
BreakStmtPtr                   breakStmt() const;
CallExprPtr                    callExpr(const TypePtr& type, const ExpressionPtr& functionExpr, const vector<ExpressionPtr>& arguments) const;
CallExprPtr                    callExpr(const ExpressionPtr& functionExpr, const vector<ExpressionPtr>& arguments) const;
CastExprPtr                    castExpr(const TypePtr& type, const ExpressionPtr& subExpression) const;
ChannelTypePtr                 channelType(const TypePtr& elementType, const IntTypeParam& size) const;
CompoundStmtPtr                compoundStmt() const;
CompoundStmtPtr                compoundStmt(const vector<StatementPtr>& stmts) const;
CompoundStmtPtr                compoundStmt(const StatementPtr& stmt) const;
ContinueStmtPtr                continueStmt() const;
DeclarationStmtPtr             declarationStmt(const TypePtr& type, const Identifier& id, const ExpressionPtr& initExpression) const;
ForStmtPtr                     forStmt(const DeclarationStmtPtr& declaration, const StatementPtr& body, const ExpressionPtr& end,			const ExpressionPtr& step) const;
FunctionTypePtr                functionType(const TypePtr& argumentType, const TypePtr& returnType) const;
GenericTypePtr                 genericType(const Identifier& name,			const vector<TypePtr>& typeParams = vector<TypePtr> (),			const vector<IntTypeParam>& intTypeParams = vector<IntTypeParam> (),			const TypePtr& baseType = NULL) const;
IfStmtPtr                      ifStmt(const ExpressionPtr& condition, const StatementPtr& thenBody) const;
IfStmtPtr                      ifStmt(const ExpressionPtr& condition, const StatementPtr& thenBody, const StatementPtr& elseBody) const;
JobExprPtr                     jobExpr(const StatementPtr& defaultStmt, 		const GuardedStmts& guardedStmts = GuardedStmts(), const LocalDecls& localDecs = LocalDecls()) const;
LambdaExprPtr                  lambdaExpr(const TypePtr& type, const ParamList& params, const StatementPtr& body) const;
LiteralPtr                     literal(const string& value, const TypePtr& type) const;
ParamExprPtr                   paramExpr(const TypePtr& type, const Identifier &id) const;
RecLambdaDefinitionPtr         recLambdaDefinition(const RecFunDefs& definitions) const;
RecLambdaExprPtr               recLambdaExpr(const VarExprPtr& variable, const RecLambdaDefinitionPtr& definition) const;
RecTypeDefinitionPtr           recTypeDefinition(const RecTypeDefs& definitions) const;
RecTypePtr                     recType(const TypeVariablePtr& typeVariable, const RecTypeDefinitionPtr& definition) const;
RefTypePtr                     refType(const TypePtr& elementType) const;
ReturnStmtPtr                  returnStmt(const ExpressionPtr& returnExpression) const;
StructExprPtr                  structExpr(const Members& members) const;
StructTypePtr                  structType(const Entries& entries) const;
SwitchStmtPtr                  switchStmt(const ExpressionPtr& switchExpr, const vector<SwitchStmt::Case>& cases, const StatementPtr& defaultCase) const;
SwitchStmtPtr                  switchStmt(const ExpressionPtr& switchExpr, const vector<SwitchStmt::Case>& cases) const;
TupleExprPtr                   tupleExpr(const vector<ExpressionPtr>& expressions) const;
TupleTypePtr                   tupleType(const ElementTypeList& elementTypes = ElementTypeList()) const;
TypeVariablePtr                typeVariable(const string& name) const;
UnionExprPtr                   unionExpr(const Members& members) const;
UnionTypePtr                   unionType(const Entries& entries) const;
VarExprPtr                     varExpr(const TypePtr& type, const Identifier &id) const;
VectorExprPtr                  vectorExpr(const vector<ExpressionPtr>& expressions) const;
VectorTypePtr                  vectorType(const TypePtr& elementType, const IntTypeParam& size) const;
WhileStmtPtr                   whileStmt(const ExpressionPtr& condition, const StatementPtr& body) const;
