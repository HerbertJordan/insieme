/**
 * Copyright (c) 2002-2013 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please 
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details 
 * regarding third party software licenses.
 */

#ifndef CSVANALYZER_H_
#define CSVANALYZER_H_

#include "AbstractAnalyzer.h"
#include "CSVParser.h"
#include "ServerParser.h"
#include <stdio.h>
#include <utility>
#include <time.h>

/*
 * Subclass of AbstractAnalyzer which analyzes the static CSV file generated by the Voltech PM 1000+
 * USB logging feature or the Ethernet logging feature.
 */
class CSVAnalyzer: public AbstractAnalyzer {
public:

	CSVAnalyzer(AbstractParser * parser);
	virtual ~CSVAnalyzer();

	/*
	 * @param measurementType - which should be mapped to a position.
	 *
	 * Checks if the given measurementType is available.
	 *
	 * Returns the column position of the measurement type in the CSV file or -1 if the given type could not been found.
	 */
	virtual int mapMeasurementTypeToColumn(string & measurementType);

	//Inherited methods - for documentation see base class. -------------------------------------------------------------
	virtual unsigned int getNumberOfMeasurements(bool force);
	virtual list<string>* getMeasurementTypeList();

	virtual time_t getStartTime();

	virtual time_t getEndTime();

	virtual int calculateMinMaxAvg(unsigned int resultFrom,
			unsigned int resultTo, string measurementType, double & max,
			double & min, double & avg);

	virtual int evaluateMeasurementTrends_Percentage(unsigned int resultFrom,
			unsigned int resultTo, string measurementType,
			double ditherIgnorePercentage,
			map<std::pair<double, double>, double> & resultMap);

	int evaluateMeasurementTrends(unsigned int resultFrom,
			unsigned int resultTo, string measurementType,
			double ditherTolerance,
			map<std::pair<double, double>, double> & resultMap);

	int sumOfColumn(unsigned int resultFrom, unsigned int resultTo,
			string measuremenType, double & result, int & counter);

	int getValueList(unsigned int resultFrom, unsigned int resultTo,
			string measuremenType, list<double> &resultList);

protected:
	virtual double getMeasurementHook(const unsigned int &measurementNumber,
			string measurementType) throw (std::invalid_argument);

	virtual int getOffset();

	virtual double convertStringToValue(string str);

	time_t startTime;
	time_t endTime;

private:
	/*
	 * OFFSET in lines inside the CSV until the header of the measured results starts.
	 */
	static unsigned int OFFSET;

	list<string> getResultList(unsigned int resultFrom, unsigned int resultTo,
			int & position);

};

#endif /* CSVANALYZER_H_ */
