/**
 * Copyright (c) 2002-2013 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please 
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details 
 * regarding third party software licenses.
 */

/**
 * This macro file defines the metrics supported by the performance 
 * instrumentation system.
 * 
 * There are METRICs and GROUPs, and each METRIC must be a member of a group
 * (groups can hold multiple METRICs).
 * 
 * Important non-selfexplanatory parameters:
 * 
 * SCOPE: denotes the topological scope (see instrumentation.h)
 * AGGREGATION_METHOD: sum, average, ... (see instrumentation.h)
 * WI_START_CODE/WI_END_CODE: measurement code to start/end a measurement every 
 *   time a WI is started / suspended / resumed / ended. Measured per 
 *   individual WI. For each measurement, first the start/end code of the GROUPS
 *   is called, followed by the start/end code of the individual METRICS.
 * REGION_EARLY_START_CODE/REGION_LATE_END_CODE: measurement code to start/end a
 *   measurement at the first entry and last exit of a region. This is done once
 *   per invidivual region. For each measurement, first the start/end code of
 *   the GROUPS is called, followed by the start/end code of the individual
 *   METRICS.
 * OUTPUT_CONVERSION_CODE: conversion factor applied during output (e.g. time is
 *   measured in clock cycles but printed in nanoseconds).
 * 
 * Inside the WI_START_CODE/WI_END_CODE and 
 * REGION_EARLY_START_CODE/REGION_LATE_END_CODE environments, the developer has
 * access to inst_region_struct* rg and irt_work_item* wi respectively, to 
 * access and modify data. For every metric, fields "last_<metric_name>" and
 * "aggregated_<metric_name>" will be generated, and can be used for
 * measurements (c.f. the cpu_time METRIC).
 */
 
#include "instrumentation_regions.h"
#include "instrumentation_regions_includes.h"



#ifndef METRIC
#define METRIC( NAME, ID, UNIT, DATA_TYPE, FORMAT_STRING, SCOPE, AGGREGATION_METHOD, GROUP, WI_START_CODE, WI_END_CODE, REGION_EARLY_START_CODE, REGION_LATE_END_CODE, OUTPUT_CONVERSION_CODE ) 
#endif

#ifndef GROUP
#define GROUP( NAME, GLOBAL_VAR_DECLARATIONS, LOCAL_VAR_DECLARATIONS, INIT_CODE, FINALIZE_CODE, WI_START_CODE, WI_END_CODE, REGION_EARLY_START_CODE, REGION_LATE_END_CODE )
#endif



GROUP(cpu_time_group, int ctg_dummy, , {}, {}, {}, {}, {}, {})

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_CPU_TIME)
METRIC(cpu_time,				0,	ns,		uint64,	"%lu",		IRT_HW_SCOPE_CORE,		IRT_METRIC_AGGREGATOR_SUM,	cpu_time_group, \
	{ wi->inst_region_data->last_cpu_time = irt_time_ticks(); }, \
	{ wi->inst_region_data->aggregated_cpu_time += irt_time_ticks() - wi->inst_region_data->last_cpu_time; }, \
	{}, \
	{}, \
	((double)1e9/irt_g_time_ticks_per_sec) \
)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_WALL_TIME)
METRIC(wall_time,				1,	ns,		uint64, "%lu",		IRT_HW_SCOPE_SYSTEM,		IRT_METRIC_AGGREGATOR_NONE,	cpu_time_group, \
	{  }, \
	{  }, \
	{ rg->last_wall_time = irt_time_ticks(); }, \
	{ rg->aggregated_wall_time += irt_time_ticks() - rg->last_wall_time; }, \
	((double)1e9/irt_g_time_ticks_per_sec) \
)
#endif

GROUP(energy_group, , rapl_energy_data rapl_data, { irt_energy_select_instrumentation_method(); }, {}, \
	{}, \
	{}, \
	{ irt_get_energy_consumption(&(rapl_data)); }, \
	{ irt_get_energy_consumption(&(rapl_data)); } \
)

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_CPU_ENERGY)
METRIC(cpu_energy,					100,	j,		double,		"%f",		IRT_HW_SCOPE_SOCKET,	IRT_METRIC_AGGREGATOR_SUM,	energy_group, \
	{}, \
	{}, \
	{ rg->last_cpu_energy = rapl_data.package; }, \
	{ rg->aggregated_cpu_energy += rapl_data.package - rg->last_cpu_energy; }, \
	1 \
)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_CORES_ENERGY)
METRIC(cores_energy,				101,	j,		double,		"%f",		IRT_HW_SCOPE_SOCKET,	IRT_METRIC_AGGREGATOR_SUM,	energy_group, \
	{}, \
	{}, \
	{ rg->last_cores_energy = rapl_data.cores; }, \
	{ rg->aggregated_cores_energy += rapl_data.cores - rg->last_cores_energy; }, \
	1 \
)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_MEMORY_CONTROLLER_ENERGY)
METRIC(memory_controller_energy,	102,	j,		double,		"%f",		IRT_HW_SCOPE_SOCKET,	IRT_METRIC_AGGREGATOR_SUM,	energy_group, \
	{}, \
	{}, \
	{ rg->last_memory_controller_energy = rapl_data.mc; }, \
	{ rg->aggregated_memory_controller_energy += rapl_data.mc - rg->last_memory_controller_energy; }, \
	1 \
)
#endif

GROUP(socket_occupancy_group, int sog_dummy, , {}, {}, {}, {}, {}, {})

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_SOCKET_OCCUPANCY)
METRIC(socket_occupancy,			200,	unit,		double,		"%f",		IRT_HW_SCOPE_SOCKET,	IRT_METRIC_AGGREGATOR_AVG,	socket_occupancy_group,	\
	{ wi->inst_region_data->last_socket_occupancy = 42; }, \
	{ wi->inst_region_data->aggregated_socket_occupancy = 42; }, \
	{}, \
	{}, \
	1 \
)
#endif

GROUP(papi_group, int32* papi_eventset, long long int papi_values[IRT_INST_PAPI_MAX_COUNTERS], { irt_papi_init(); irt_papi_setup(context); }, { irt_papi_finalize(context); }, { irt_papi_start(); }, { irt_papi_stop(papi_values); }, {}, {})

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L1_TCM)
METRIC(PAPI_L1_TCM,			300,	unit,		uint64,		"%lu",		IRT_HW_SCOPE_SOCKET,	IRT_METRIC_AGGREGATOR_SUM,	papi_group,	\
	{ wi->inst_region_data->last_PAPI_L1_TCM = 0; }, \
	{ wi->inst_region_data->aggregated_PAPI_L1_TCM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L1_TCM"); }, \
	{  }, \
	{  }, \
	1 \
)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L1_DCM)
METRIC(PAPI_L1_DCM,			301,	unit,		uint64,		"%lu",		IRT_HW_SCOPE_SOCKET,	IRT_METRIC_AGGREGATOR_SUM,	papi_group,	\
	{ wi->inst_region_data->last_PAPI_L1_DCM = 0; }, \
	{ wi->inst_region_data->aggregated_PAPI_L1_DCM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L1_DCM"); }, \
	{  }, \
	{  }, \
	1 \
)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L2_TCM)
METRIC(PAPI_L2_TCM,			310,	unit,		uint64,		"%lu",		IRT_HW_SCOPE_SOCKET,	IRT_METRIC_AGGREGATOR_SUM,	papi_group,	\
	{ wi->inst_region_data->last_PAPI_L2_TCM = 0; }, \
	{ wi->inst_region_data->aggregated_PAPI_L2_TCM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L2_TCM"); }, \
	{  }, \
	{  }, \
	1 \
)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_L3_TCM)
METRIC(PAPI_L3_TCM,			320,	unit,		uint64,		"%lu",		IRT_HW_SCOPE_SOCKET,	IRT_METRIC_AGGREGATOR_SUM,	papi_group,	\
	{ wi->inst_region_data->last_PAPI_L3_TCM = 0; }, \
	{ wi->inst_region_data->aggregated_PAPI_L3_TCM = irt_papi_get_value_by_name(context, papi_values, "PAPI_L3_TCM"); }, \
	{  }, \
	{  }, \
	1 \
)
#endif

#if !defined(ISOLATE_METRIC) || defined(ISOLATE_PAPI_FP_OPS)
METRIC(PAPI_FP_OPS,			330,	unit,		uint64,		"%lu",		IRT_HW_SCOPE_SOCKET,	IRT_METRIC_AGGREGATOR_SUM,	papi_group,	\
	{ wi->inst_region_data->last_PAPI_FP_OPS = 0; }, \
	{ wi->inst_region_data->aggregated_PAPI_FP_OPS = irt_papi_get_value_by_name(context, papi_values, "PAPI_FP_OPS"); }, \
	{  }, \
	{  }, \
	1 \
)
#endif

#undef ISOLATE_METRIC
#undef ISOLATE_CPU_TIME
#undef ISOLATE_WALL_TIME
#undef ISOLATE_RAPMI_AVERAGE_POWER
#undef ISOLATE_RAPMI_ENERGY
#undef ISOLATE_RAPMI_TICKS
#undef ISOLATE_CPU_ENERGY
#undef ISOLATE_CORES_ENERGY
#undef ISOLATE_MEMORY_CONTROLLER_ENERGY
#undef ISOLATE_SOCKET_OCCUPANCY
#undef ISOLATE_PAPI_L1_TCM
#undef ISOLATE_PAPI_L1_DCM
#undef ISOLATE_PAPI_L2_TCM
#undef ISOLATE_PAPI_L3_TCM
#undef ISOLATE_PAPI_FP_OPS

#undef METRIC
#undef GROUP
