/**
 * Copyright (c) 2002-2013 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please 
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details 
 * regarding third party software licenses.
 */

//FLAG(opt_name, opt_id, var_name, def_value, var_help)
FLAG("help,h", 				"help", 				Help, 			false, 	"produce help message")
FLAG("version,V", 			"version", 				Version, 		false, 	"print version string")

OPTION("database,b",			"database",				DataBase,		std::string,				"Data base path")
OPTION("static_feature,S",		"static_feature", 		SFeatures, 		std::vector<std::string>, 	"Indices of static features to query form the database")
OPTION("static_feature_name,s",	"static_feature_name",	SFeatureNames,	std::vector<std::string>, 	"Names of static features to query form the database")
OPTION("dyn_feature,D",			"dyn_feature", 			DFeatures, 		std::vector<std::string>, 	"Indices of dynamic features to query form the database")
OPTION("dyn_feature_name,d",	"dyn_feature_name",		DFeatureNames,	std::vector<std::string>, 	"Names of dynamic features to query form the database")
OPTION("pca_feature,P",			"pca_feature", 			PFeatures, 		std::vector<std::string>, 	"Indices of PCA features to query form the database")
OPTION("pca_feature_name,p",	"pca_feature_name",		PFeatureNames,	std::vector<std::string>, 	"Names of PCA features to query form the database")
OPTION("target_name,t",			"target_name",			TargetName,		std::string, 				"Name of the target to query form the database")
OPTION("output_model,o",		"output_model",			OutputModel,	std::string,				"File name to store the generated model")
OPTION("output_path,O",			"output_path",			OutputPath,		std::string,				"Path where to store the output files")
OPTION("optimizer,m",			"optimizer",			Optimizer,		std::string,				"Optimizer to be used for the neural network")

//INT_OPTION(opt_name, opt_id, var_name, def_value, var_help)
INT_OPTION("verbose,v", 		"verbosity", 				Verbosity, 		0, 			"Set verbosity level")
INT_OPTION("num_classes,n",		"number_of_classes",		NumClasses,		2,			"The number of classes = ouptut neurons")
INT_OPTION("num_hidden,h",		"number_of_hidden_neurons",	NumHidden,		8,			"The number of neurons in the hidden layer")
INT_OPTION("training_iter,i",	"training_iterations",		TrainingIter,	0,			"Number of training iterations (0 for early stopping = default)")

REAL_OPTION("init_interval,r",	"weight_init_boundaries",	Init,			0.1,		"Value of lower/upper bound for weight init")
