/**
 * Copyright (c) 2002-2015 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details
 * regarding third party software licenses.
 */

#ifndef FLAG
#define FLAG( NAME, ID, DESCRIPTION )
#endif

#ifndef OPTION
#define OPTION( NAME, ID, ARG_TYPE, DEFAULT_VALUE, DESCRIPTION )
#endif

FLAG("benchmark-core", 			benchmarkCore, 				"benchmarking of some standard core operations on the intermediate representation")
FLAG("check-sema", 				checkSema,					"Run semantic checks on the generated IR")
FLAG("compile,c", 				compileOnly, 				"compilation only")
FLAG("debug-information,g", 	debug, 						"produce debug information")
FLAG("estimate-effort", 		estimateEffort,				"Enables generation of the effort estimation function")
FLAG("fcilk", 					cilk, 						"Cilk support")
FLAG("flib-icl", 				iCL, 						"ICL support")
FLAG("fopencl", 				openCL,						"OpenCL support")
FLAG("fopenmp", 				openMP, 					"OpenMP support")
FLAG("full-optimization", 		fullOptimization, 			"full optimization")
FLAG("gem-cross-compile", 		gemCrossCompile,			"Set cross compilation for the GEMSCLAIM target")
FLAG("help,h", 					help, 						"produce help message")
FLAG("mark-scop",				markScop,					"Mark SCoPs (Static COntrol Parts) in the IR (analysis only")
FLAG("no-warnings", 			noWarnings, 				"inhibit all warnings")
FLAG("progress", 				progress, 					"show progress bar for frontend conversion process")
FLAG("use-pm",					usePM,						"Perform code transformations using the Polyhedral Model")
//FLAG("strict-semantics", 		strictSemantics,			"semantic checks")
FLAG("version,v", 				version, 					"print version string")
FLAG("win-cross-compile", 		winCrossCompile,			"Set cross compilation for a Windows target")

OPTION("input-file", 			inFiles, 					std::vector<frontend::path>, 		std::vector<frontend::path>(), "input file(s)")
OPTION("tu-code", 				dumpTU, 					frontend::path, 					"a.tu", "dump translation unit")
OPTION("ir-code", 				dumpIR, 					frontend::path, 					"a.ir", "dump intermediate representation")
OPTION("trg-code", 				dumpTRG, 					frontend::path, 					"a.c", "dump target code")
OPTION("outfile,o", 			outFile, 					frontend::path, 					"a.out", "output file")
OPTION("backend",				backend,					std::string,						"runtime", "Backend selection: sequential | runtime | ocl | pthread")
OPTION("log-level",				logLevel,					std::string,						"ERROR", "Log level: DEBUG|INFO|WARN|ERROR|FATAL")
OPTION("include-path,I", 		includePaths, 				std::vector<frontend::path>, 		std::vector<frontend::path>(), "additional user include search path(s)")
OPTION("isystem", 				systemIncludePaths, 		std::vector<frontend::path>, 		std::vector<frontend::path>(), "additional system include search path(s)")
OPTION("library-file,l", 		libraryFiles,				std::vector<frontend::path>, 		std::vector<frontend::path>(), "linker flag(s)/file(s)")
OPTION("library-path,L", 		libraryPaths,				std::vector<frontend::path>, 		std::vector<frontend::path>(), "library search path(s)")
OPTION("definitions,D", 		definitions,				std::vector<std::string>, 			std::vector<std::string>(), "definition(s)")
OPTION("std", 					standard,					std::string, 						"auto", "language standard")
OPTION("intercept", 			intercept,					std::vector<std::string>, 			std::vector<std::string>(), "regular expression(s) to be intercepted")
OPTION("intercept-include", 	interceptIncludes,			std::vector<frontend::path>, 		std::vector<frontend::path>(), "intercepted include file(s)")
OPTION("fopt", 					optimizationFlags,			std::vector<std::string>, 			std::vector<std::string>(), "optimization flags")

/*
// output options
FLAG("pretty-print,P", 		"pretty-print", 		PrettyPrint, 	false, 	"pretty print the IR after frontend conversion")
FLAG("show-line-no",       "show-num",             ShowLineNo,		true,	"Show line numbers when the IR code is printed to the standard output")
//FLAG("timer",              "timer",                 UseTimer,   false, "Show timing information for code analysis and transformation")
FLAG("show-stats",			"show-stats", 			ShowStats, 		false, 	"computes statistics regarding the composition of the IR")
//FLAG("cleanup,C",			"cleanup", 				Cleanup, 		false,	"applies some cleanup operations to the IR produced by the frontend")

//OPTION(opt_name, opt_id, var_name, var_type, var_help)

// backend selection
OPTION("dump-cfg",			"dump-cfg", 			CFG,    		std::string,				"Print dot graph of the CFG")

OPTION("cross-compile", "cross-compile", CrossCompile, std::string, "Set cross compilation. System Headers path must be provided.")

//INT_OPTION(opt_name, opt_id, var_name, def_value, var_help)
INT_OPTION("verbose,v", "verbosity", Verbosity, 0, "Set verbosity level")
INT_OPTION("col-wrap", "column-wrap", ColumnWrap, -1, "Wrap the output of the pretty printer up to specified size")
*/

#undef FLAG
#undef OPTION
