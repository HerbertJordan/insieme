/**
 * Copyright (c) 2002-2013 Distributed and Parallel Systems Group,
 *                Institute of Computer Science,
 *               University of Innsbruck, Austria
 *
 * This file is part of the INSIEME Compiler and Runtime System.
 *
 * We provide the software of this file (below described as "INSIEME")
 * under GPL Version 3.0 on an AS IS basis, and do not warrant its
 * validity or performance.  We reserve the right to update, modify,
 * or discontinue this software at any time.  We shall have no
 * obligation to supply such updates or modifications or any other
 * form of support to you.
 *
 * If you require different license terms for your intended use of the
 * software, e.g. for proprietary commercial or industrial use, please
 * contact us at:
 *                   insieme@dps.uibk.ac.at
 *
 * We kindly ask you to acknowledge the use of this software in any
 * publication or other disclosure of results by referring to the
 * following citation:
 *
 * H. Jordan, P. Thoman, J. Durillo, S. Pellegrini, P. Gschwandtner,
 * T. Fahringer, H. Moritsch. A Multi-Objective Auto-Tuning Framework
 * for Parallel Codes, in Proc. of the Intl. Conference for High
 * Performance Computing, Networking, Storage and Analysis (SC 2012),
 * IEEE Computer Society Press, Nov. 2012, Salt Lake City, USA.
 *
 * All copyright notices must be kept intact.
 *
 * INSIEME depends on several third party software packages. Please 
 * refer to http://www.dps.uibk.ac.at/insieme/license.html for details 
 * regarding third party software licenses.
 */

//FLAG(opt_name, opt_id, var_name, def_value, var_help)
FLAG("help,h", 				Help, 			false, 	"produce help message")
FLAG("version,V", 			Version, 		false, 	"print version string")

// frontend options
FLAG("omp-sema",			OpenMP, 		false,	"enable OpenMP semantics in frontend")
FLAG("opencl", 				OpenCL, 		false, 	"enable OpenCL semantics in frontend")
FLAG("tag-mpi",				MPITag,			false,  "add mpi pragma to MPI statements in the program and assign unique ID")
FLAG("clang-cfg-dump",		ClangCFGDump,	false, 	"Dump cfg graph of clang")

// core options
FLAG("benchmark-core", 		BenchmarkCore, 	false, "runs some standard-core operations on the IR representation")
FLAG("test,T", 				Test, 			false, "Enable the test function which should test some pre-released features of insieme")
FLAG("feat-extract,f",		FeatureExtract,	false,	"Enables feature extraction")

// backend options
FLAG("estimate-effort",		EstimateEffort,	false,	"Enables generation of the effort estimation function")

// output options
FLAG("pretty-print,P", 		PrettyPrint, 	false, 	"pretty print the IR after frontend conversion")
FLAG("show-line-no",        ShowLineNo,		true,	"Show line numbers when the IR code is printed to the standard output")
FLAG("mark-scop",       	MarkScop,		false,	"Mark Static Control Parts int the IR")
FLAG("check-sema,S",		CheckSema, 		false, 	"run semantics check on the generated IR")
FLAG("show-stats",			ShowStats, 		false, 	"computes statistics regarding the composition of the IR")
FLAG("cleanup,C",			Cleanup, 		false,	"applies some cleanup operations to the IR produced by the frontend")

// region options
FLAG("region-instrumentation,R", DoRegionInstrumentation, false, "Enables automatic region deteation and instrumentation")

//OPTION(opt_name, opt_id, var_name, var_type, var_help)

// backend selection
OPTION("backend,b",			Backend,		std::string,		"Backend Selection: sequential | runtime | ocl | pthread")

OPTION("log-level,L",		LogLevel,		std::string,				"Log level: DEBUG|INFO|WARN|ERROR|FATAL")
OPTION("input-file", 		InputFiles, 	std::vector<std::string>, 	"input file(s)")
OPTION("include-path,I", 	IncludePaths, 	std::vector<std::string>, 	"Add directory to include search path")
OPTION("std,std", 			STD, 			std::string, 				"Set compatibility mode")
OPTION("definitions,D",	 	Defs, 			std::vector<std::string>, 	"Add a preprocessor definition")
OPTION("show-ir", 			ShowIR, 		std::string, 				"Print a dot representation of the IR")
OPTION("dump-xml", 			DumpXML, 		std::string, 				"Print the xml representation of the IR")
OPTION("load-xml", 			LoadXML, 		std::string, 				"Load an xml contanining an IR")
OPTION("dump-ir", 			DumpIR, 		std::string, 				"Print the pretty printed representation of the IR")
OPTION("out-file,o", 		Output, 		std::string, 				"output file")
OPTION("dump-cfg",			CFG,    		std::string,				"Print dot graph of the CFG")


//INT_OPTION(opt_name, opt_id, var_name, def_value, var_help)
INT_OPTION("max-region-size", MaxRegionSize, 5000, "Set the maximum size of autoamtically identified code regions")
INT_OPTION("min-region-size", MinRegionSize, 100, "Set the minimum size of autoamtically identified code regions")

INT_OPTION("verbose,v", Verbosity, 0, "Set verbosity level")
INT_OPTION("col-wrap",  ColumnWrap, -1, "Wrap the output of the pretty printer up to specified size")

// Cache Parameters
INT_OPTION("cache-size", 	  CacheSize,  	(4*1024*1024), "Set the cache size which should be used by the analysis module to estimate cache behavior")
INT_OPTION("cache-line-size", CacheLineSize,	64, 		 "Set the size of a cache line which should be utilized by the analysis module to estimate cache behavior")
INT_OPTION("cache-associativity", CacheAssociativity, 8,  "Set the associativity level of the cache which should be utilized by the analysis module to estimate cache behavior")

